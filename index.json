{
  "api/Global.AllScenes.html": {
    "href": "api/Global.AllScenes.html",
    "title": "Enum AllScenes | Catch.io Dev Doc",
    "keywords": "Enum AllScenes Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum AllScenes Fields Name Description GrassLands Launcher LobbyMenu ManagerScene UIScene"
  },
  "api/Global.BouncingToadCollisionStrategy.html": {
    "href": "api/Global.BouncingToadCollisionStrategy.html",
    "title": "Class BouncingToadCollisionStrategy | Catch.io Dev Doc",
    "keywords": "Class BouncingToadCollisionStrategy Inheritance Object ProjectileCollisionStrategy BouncingToadCollisionStrategy Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BouncingToadCollisionStrategy : ProjectileCollisionStrategy Methods Execute(Boolean) Declaration public override void Execute(bool isGround) Parameters Type Name Description Boolean isGround Overrides ProjectileCollisionStrategy.Execute(Boolean) Initialize(BoxCollider2D) Declaration public override void Initialize(BoxCollider2D collider2D) Parameters Type Name Description BoxCollider2D collider2D Overrides ProjectileCollisionStrategy.Initialize(BoxCollider2D)"
  },
  "api/Global.BouncingToadProjectile.html": {
    "href": "api/Global.BouncingToadProjectile.html",
    "title": "Class BouncingToadProjectile | Catch.io Dev Doc",
    "keywords": "Class BouncingToadProjectile Inheritance Object Projectile BouncingToadProjectile Namespace : Global Assembly : cs.temp.dll.dll Syntax public class BouncingToadProjectile : Projectile Methods Execute() Declaration public override void Execute() Overrides Projectile.Execute() GetMovePoints(Vector2, Vector2) Declaration public override List<Vector3> GetMovePoints(Vector2 startPosition, Vector2 endPosition) Parameters Type Name Description Vector2 startPosition Vector2 endPosition Returns Type Description List < Vector3 > Overrides Projectile.GetMovePoints(Vector2, Vector2) HandleDestroy() Declaration public override void HandleDestroy() Overrides Projectile.HandleDestroy() HandleSpawn(Int32) Declaration public override void HandleSpawn(int elevation) Parameters Type Name Description Int32 elevation Overrides Projectile.HandleSpawn(Int32) Initialize() Declaration public override void Initialize() Overrides Projectile.Initialize() OnGround() Declaration public override void OnGround() Overrides Projectile.OnGround() OnTriggerEnter2D(Collider2D) Declaration public override void OnTriggerEnter2D(Collider2D other) Parameters Type Name Description Collider2D other Overrides Projectile.OnTriggerEnter2D(Collider2D) SetSpritePosition(Vector3) Declaration public override void SetSpritePosition(Vector3 position) Parameters Type Name Description Vector3 position Overrides Projectile.SetSpritePosition(Vector3)"
  },
  "api/Global.CameraManager.html": {
    "href": "api/Global.CameraManager.html",
    "title": "Class CameraManager | Catch.io Dev Doc",
    "keywords": "Class CameraManager Inheritance Object GameCamera CameraManager Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CameraManager : GameCamera Fields PlayerToFollow Declaration public GameObject PlayerToFollow Field Value Type Description GameObject Properties IsFollowing Declaration public bool IsFollowing { get; } Property Value Type Description Boolean Methods SetupCamera() Declaration public void SetupCamera()"
  },
  "api/Global.CameraTargetMovement.html": {
    "href": "api/Global.CameraTargetMovement.html",
    "title": "Class CameraTargetMovement | Catch.io Dev Doc",
    "keywords": "Class CameraTargetMovement Inheritance Object GameCamera CameraTargetMovement Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CameraTargetMovement : GameCamera Fields ClampXDistance Declaration public float ClampXDistance Field Value Type Description Single ClampYDistance Declaration public float ClampYDistance Field Value Type Description Single Methods Move(Camera, PlayerControlInput) Declaration public void Move(Camera mainCamera, PlayerControlInput playerControlInput) Parameters Type Name Description Camera mainCamera PlayerControlInput playerControlInput"
  },
  "api/Global.CatchButtonEnable.html": {
    "href": "api/Global.CatchButtonEnable.html",
    "title": "Class CatchButtonEnable | Catch.io Dev Doc",
    "keywords": "Class CatchButtonEnable Inheritance Object CatchButtonEnable Implements ICallback Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CatchButtonEnable : MonoBehaviour, ICallback Methods Invoke() Declaration public void Invoke() Implements ICallback"
  },
  "api/Global.CharacterRenderer.html": {
    "href": "api/Global.CharacterRenderer.html",
    "title": "Class CharacterRenderer | Catch.io Dev Doc",
    "keywords": "Class CharacterRenderer Inheritance Object CharacterRenderer Implements IPunObservable Namespace : Global Assembly : cs.temp.dll.dll Syntax public class CharacterRenderer : MonoBehaviourPun, IPunObservable Fields runDirections Declaration public static readonly string[] runDirections Field Value Type Description String [] sneakDirections Declaration public static readonly string[] sneakDirections Field Value Type Description String [] sneakStaticDirections Declaration public static readonly string[] sneakStaticDirections Field Value Type Description String [] staticDirections Declaration public static readonly string[] staticDirections Field Value Type Description String [] walkDirections Declaration public static readonly string[] walkDirections Field Value Type Description String [] Methods OnPhotonSerializeView(PhotonStream, PhotonMessageInfo) Declaration public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info) Parameters Type Name Description PhotonStream stream PhotonMessageInfo info SetCharMovementAnim(Vector2, MoveState) Changes the character animation state values based on the given state parameters Declaration public void SetCharMovementAnim(Vector2 direction, MoveState state) Parameters Type Name Description Vector2 direction What direction the player is facing MoveState state What movement state the player is Implements IPunObservable"
  },
  "api/Global.EditorGameLoader.html": {
    "href": "api/Global.EditorGameLoader.html",
    "title": "Class EditorGameLoader | Catch.io Dev Doc",
    "keywords": "Class EditorGameLoader Inheritance Object EditorGameLoader Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EditorGameLoader : MonoBehaviour"
  },
  "api/Global.Effect.html": {
    "href": "api/Global.Effect.html",
    "title": "Class Effect | Catch.io Dev Doc",
    "keywords": "Class Effect Inheritance Object Effect SoundWave StunBombExplosion Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Effect : MonoBehaviour Fields DestroyHandler Declaration public Action<GameObject> DestroyHandler Field Value Type Description Action < GameObject > Methods Initialize(Action<GameObject>) Declaration public virtual void Initialize(Action<GameObject> destroyAction) Parameters Type Name Description Action < GameObject > destroyAction"
  },
  "api/Global.EffectData.html": {
    "href": "api/Global.EffectData.html",
    "title": "Class EffectData | Catch.io Dev Doc",
    "keywords": "Class EffectData Inheritance Object EffectData Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class EffectData Properties EffectType Declaration public EffectType EffectType { get; } Property Value Type Description EffectType Prefab Declaration public GameObject Prefab { get; } Property Value Type Description GameObject"
  },
  "api/Global.EffectScriptableObject.html": {
    "href": "api/Global.EffectScriptableObject.html",
    "title": "Class EffectScriptableObject | Catch.io Dev Doc",
    "keywords": "Class EffectScriptableObject Inheritance Object EffectScriptableObject Namespace : Global Assembly : cs.temp.dll.dll Syntax public class EffectScriptableObject : ScriptableObject Fields EffectDatas Declaration public List<EffectData> EffectDatas Field Value Type Description List < EffectData > Methods FindPrefab(EffectType) Declaration public GameObject FindPrefab(EffectType type) Parameters Type Name Description EffectType type Returns Type Description GameObject"
  },
  "api/Global.EffectType.html": {
    "href": "api/Global.EffectType.html",
    "title": "Enum EffectType | Catch.io Dev Doc",
    "keywords": "Enum EffectType Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum EffectType Fields Name Description SoundWave StunBombExplosion"
  },
  "api/Global.Elevation.html": {
    "href": "api/Global.Elevation.html",
    "title": "Class Elevation | Catch.io Dev Doc",
    "keywords": "Class Elevation Inheritance Object Elevation Implements IPunObservable Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Elevation : MonoBehaviourPun, IPunObservable Fields value Declaration public int value Field Value Type Description Int32 Methods OnPhotonSerializeView(PhotonStream, PhotonMessageInfo) Declaration public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info) Parameters Type Name Description PhotonStream stream PhotonMessageInfo info Implements IPunObservable"
  },
  "api/Global.ElevationTrigger.html": {
    "href": "api/Global.ElevationTrigger.html",
    "title": "Class ElevationTrigger | Catch.io Dev Doc",
    "keywords": "Class ElevationTrigger Inheritance Object ElevationTrigger Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ElevationTrigger : MonoBehaviour Properties BottomCollider Declaration public BoxCollider2D BottomCollider { get; } Property Value Type Description BoxCollider2D TopCollider Declaration public BoxCollider2D TopCollider { get; } Property Value Type Description BoxCollider2D"
  },
  "api/Global.ExtensionMethods.html": {
    "href": "api/Global.ExtensionMethods.html",
    "title": "Class ExtensionMethods | Catch.io Dev Doc",
    "keywords": "Class ExtensionMethods Inheritance Object ExtensionMethods Namespace : Global Assembly : cs.temp.dll.dll Syntax public static class ExtensionMethods Methods toVector2(Vector3) Declaration public static Vector2 toVector2(this Vector3 vec3) Parameters Type Name Description Vector3 vec3 Returns Type Description Vector2 toVector3(Vector2) Declaration public static Vector3 toVector3(this Vector2 vec2) Parameters Type Name Description Vector2 vec2 Returns Type Description Vector3"
  },
  "api/Global.FloorTilemaps.html": {
    "href": "api/Global.FloorTilemaps.html",
    "title": "Class FloorTilemaps | Catch.io Dev Doc",
    "keywords": "Class FloorTilemaps Inheritance Object FloorTilemaps Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class FloorTilemaps Fields Tilemaps Declaration public List<Tilemap> Tilemaps Field Value Type Description List < Tilemap >"
  },
  "api/Global.Footprint.FootprintSprite.html": {
    "href": "api/Global.Footprint.FootprintSprite.html",
    "title": "Struct Footprint.FootprintSprite | Catch.io Dev Doc",
    "keywords": "Struct Footprint.FootprintSprite Namespace : Global Assembly : cs.temp.dll.dll Syntax public struct FootprintSprite Fields Sprite Declaration public Sprite Sprite Field Value Type Description Sprite Surface Declaration public Surface.SurfaceType Surface Field Value Type Description Surface.SurfaceType"
  },
  "api/Global.Footprint.html": {
    "href": "api/Global.Footprint.html",
    "title": "Class Footprint | Catch.io Dev Doc",
    "keywords": "Class Footprint Inheritance Object Footprint Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Footprint : MonoBehaviour Methods HandleSpawn() Declaration public void HandleSpawn() Initialize() Declaration public void Initialize()"
  },
  "api/Global.FootprintGenerator.html": {
    "href": "api/Global.FootprintGenerator.html",
    "title": "Class FootprintGenerator | Catch.io Dev Doc",
    "keywords": "Class FootprintGenerator Inheritance Object FootprintGenerator Namespace : Global Assembly : cs.temp.dll.dll Syntax public class FootprintGenerator : MonoBehaviour Fields GeneratorTime Declaration public float GeneratorTime Field Value Type Description Single"
  },
  "api/Global.GameCamera.html": {
    "href": "api/Global.GameCamera.html",
    "title": "Class GameCamera | Catch.io Dev Doc",
    "keywords": "Class GameCamera Master class for game scene camera controller objects. Inheritance Object GameCamera CameraManager CameraTargetMovement Namespace : Global Assembly : cs.temp.dll.dll Syntax public class GameCamera : MonoBehaviour"
  },
  "api/Global.GameManager.html": {
    "href": "api/Global.GameManager.html",
    "title": "Class GameManager | Catch.io Dev Doc",
    "keywords": "Class GameManager Inheritance Object NetworkCallback GameManager Inherited Members NetworkCallback.gameVersion NetworkCallback.OnDisconnected(DisconnectCause) NetworkCallback.OnJoinRoomFailed(Int16, String) NetworkCallback.OnCreateRoomFailed(Int16, String) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class GameManager : NetworkCallback Fields PlayerCamera Declaration public GameObject PlayerCamera Field Value Type Description GameObject PlayerPrefab Declaration public GameObject PlayerPrefab Field Value Type Description GameObject Properties CurrentTilemapContainer Declaration public static TilemapContainer CurrentTilemapContainer { get; } Property Value Type Description TilemapContainer IsMobile Declaration public static bool IsMobile { get; } Property Value Type Description Boolean LocalPlayerInst Local player instance Declaration public static Player LocalPlayerInst { get; } Property Value Type Description Player Methods OnLeftRoom() Called when the local player left the room. We need to load the launcher scene. Declaration public override void OnLeftRoom() OnPlayerEnteredRoom(Photon.Realtime.Player) Declaration public override void OnPlayerEnteredRoom(Photon.Realtime.Player newPlayer) Parameters Type Name Description Photon.Realtime.Player newPlayer OnPlayerLeftRoom(Photon.Realtime.Player) Declaration public override void OnPlayerLeftRoom(Photon.Realtime.Player otherPlayer) Parameters Type Name Description Photon.Realtime.Player otherPlayer SetLocalPlayer(GameObject) Declaration public static void SetLocalPlayer(GameObject playerObject) Parameters Type Name Description GameObject playerObject"
  },
  "api/Global.GuiBehavior.html": {
    "href": "api/Global.GuiBehavior.html",
    "title": "Class GuiBehavior | Catch.io Dev Doc",
    "keywords": "Class GuiBehavior Master class used for components that has to work with scene UI elements and their behaviors. Inheritance Object GuiBehavior LobbyRoomsView RoomItemControl Namespace : Global Assembly : cs.temp.dll.dll Syntax public class GuiBehavior : MonoBehaviour"
  },
  "api/Global.HitPoint.html": {
    "href": "api/Global.HitPoint.html",
    "title": "Enum HitPoint | Catch.io Dev Doc",
    "keywords": "Enum HitPoint Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum HitPoint Fields Name Description DOWN LEFT NONE RIGHT UP"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace Global | Catch.io Dev Doc",
    "keywords": "Namespace Global Classes BouncingToadCollisionStrategy BouncingToadProjectile CameraManager CameraTargetMovement CatchButtonEnable CharacterRenderer EditorGameLoader Effect EffectData EffectScriptableObject Elevation ElevationTrigger ExtensionMethods FloorTilemaps Footprint FootprintGenerator GameCamera Master class for game scene camera controller objects. GameManager GuiBehavior Master class used for components that has to work with scene UI elements and their behaviors. Inventory InventoryHUD Launcher The entry point for establishing a connection between the player and the master server. This script will handle the menu GUI logic as well. LightFlicker LobbyRoomsView View controller for the game lobby menu. This class will only expose the GUI methods and controls for the scene to render. The actual logic of all this is handled by the lobby manager script. NetworkCallback Master class for manager scripts that works with PUN callbacks. This script is not meant to be used as a component, rather, other game managers are expected to inherit from this class. NetworkLobbyManager Photon lobby scene manager. All the lobby logic and network management should be handled from here. Player PlayerControlInput Player controller abstraction component. Everything that relates to controlling the player should be part of this script. Projectile ProjectileCollisionStrategy ProjectileData ProjectileEffect ProjectilePathGenerator ProjectileScriptableObject PurePoolManager RaycastOrigins RaySpace RoomItemControl A GUI controller script for displaying Photon rooms RotateJoystick Singleton<T> SingletonMonoBehaviour<T> SingletonReferences SoundManager SoundWave SoundWaveEffect StaminaBar StaminaMeter StoneCollisionStrategy StoneProjectile StunBombEffect StunBombExplosion StunBombProjectile SurfaceDictionary ThrowableObject TileInfo TilemapContainer Structs Footprint.FootprintSprite ProjectileCollisionStrategy.OffensiveValue ProjectileValues Interfaces ICallback IHitable Enums AllScenes EffectType HitPoint MenuScenes MoveState PlayableScenes ThrowableType"
  },
  "api/Global.ICallback.html": {
    "href": "api/Global.ICallback.html",
    "title": "Interface ICallback | Catch.io Dev Doc",
    "keywords": "Interface ICallback Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface ICallback Methods Invoke() Declaration void Invoke()"
  },
  "api/Global.IHitable.html": {
    "href": "api/Global.IHitable.html",
    "title": "Interface IHitable | Catch.io Dev Doc",
    "keywords": "Interface IHitable Namespace : Global Assembly : cs.temp.dll.dll Syntax public interface IHitable Properties IsCaught Declaration bool IsCaught { get; set; } Property Value Type Description Boolean IsStun Declaration bool IsStun { get; set; } Property Value Type Description Boolean StunDelayTime Declaration WaitForSecondsRealtime StunDelayTime { get; set; } Property Value Type Description WaitForSecondsRealtime Methods OnCaught(Vector2) Declaration void OnCaught(Vector2 lookDir) Parameters Type Name Description Vector2 lookDir OnHit(ThrowableObject) Declaration void OnHit(ThrowableObject throwableObject) Parameters Type Name Description ThrowableObject throwableObject"
  },
  "api/Global.Inventory.html": {
    "href": "api/Global.Inventory.html",
    "title": "Class Inventory | Catch.io Dev Doc",
    "keywords": "Class Inventory Inheritance Object Inventory Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Inventory : MonoBehaviourPun Fields MaxInventorySlot Declaration public int MaxInventorySlot Field Value Type Description Int32 UpdateHUDEvent Declaration public Action UpdateHUDEvent Field Value Type Description Action Methods AddObject(ThrowableType) Declaration public void AddObject(ThrowableType _type) Parameters Type Name Description ThrowableType _type GetInventoryObjects() Declaration public List<ThrowableObject> GetInventoryObjects() Returns Type Description List < ThrowableObject > GetSelectedIndex() Declaration public int GetSelectedIndex() Returns Type Description Int32 GetThrowableObjectType() Declaration public ThrowableType GetThrowableObjectType() Returns Type Description ThrowableType GetThrowalbeObject() Declaration public ThrowableObject GetThrowalbeObject() Returns Type Description ThrowableObject IsEmpty() Declaration public bool IsEmpty() Returns Type Description Boolean IsFull() Declaration public bool IsFull() Returns Type Description Boolean RemoveObject() Declaration public void RemoveObject() SetSelectIndex(Int32) Declaration public void SetSelectIndex(int index) Parameters Type Name Description Int32 index"
  },
  "api/Global.InventoryHUD.html": {
    "href": "api/Global.InventoryHUD.html",
    "title": "Class InventoryHUD | Catch.io Dev Doc",
    "keywords": "Class InventoryHUD Inheritance Object InventoryHUD Namespace : Global Assembly : cs.temp.dll.dll Syntax public class InventoryHUD : MonoBehaviour Methods SelectItem(Int32) Declaration public void SelectItem(int index) Parameters Type Name Description Int32 index UpdateHUD() Declaration public void UpdateHUD()"
  },
  "api/Global.Launcher.html": {
    "href": "api/Global.Launcher.html",
    "title": "Class Launcher | Catch.io Dev Doc",
    "keywords": "Class Launcher The entry point for establishing a connection between the player and the master server. This script will handle the menu GUI logic as well. Inheritance Object NetworkCallback Launcher Inherited Members NetworkCallback.gameVersion NetworkCallback.OnJoinRoomFailed(Int16, String) NetworkCallback.OnCreateRoomFailed(Int16, String) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Launcher : NetworkCallback Methods OnClick_Login() Connect the user to Photon when they click the login button Declaration public void OnClick_Login() OnConnectedToMaster() Declaration public override void OnConnectedToMaster() OnDisconnected(DisconnectCause) Declaration public override void OnDisconnected(DisconnectCause cause) Parameters Type Name Description DisconnectCause cause Overrides NetworkCallback.OnDisconnected(DisconnectCause) OnJoinedLobby() Declaration public override void OnJoinedLobby()"
  },
  "api/Global.LightFlicker.html": {
    "href": "api/Global.LightFlicker.html",
    "title": "Class LightFlicker | Catch.io Dev Doc",
    "keywords": "Class LightFlicker Inheritance Object LightFlicker Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LightFlicker : MonoBehaviour Fields flickerRangeMax Declaration public float flickerRangeMax Field Value Type Description Single flickerRangeMin Declaration public float flickerRangeMin Field Value Type Description Single flickersPerSecond Declaration public float flickersPerSecond Field Value Type Description Single"
  },
  "api/Global.LobbyRoomsView.html": {
    "href": "api/Global.LobbyRoomsView.html",
    "title": "Class LobbyRoomsView | Catch.io Dev Doc",
    "keywords": "Class LobbyRoomsView View controller for the game lobby menu. This class will only expose the GUI methods and controls for the scene to render. The actual logic of all this is handled by the lobby manager script. Inheritance Object GuiBehavior LobbyRoomsView Namespace : Global Assembly : cs.temp.dll.dll Syntax public class LobbyRoomsView : GuiBehavior Properties NewRoomMap Declaration public string NewRoomMap { get; } Property Value Type Description String NewRoomMaxPlayer Declaration public int NewRoomMaxPlayer { get; } Property Value Type Description Int32 NewRoomName Declaration public string NewRoomName { get; } Property Value Type Description String Methods AddRoomRender(RoomInfo) Declaration public void AddRoomRender(RoomInfo room) Parameters Type Name Description RoomInfo room DisplayLogMessage(String, Color) Declaration public void DisplayLogMessage(string message, Color color) Parameters Type Name Description String message Color color OnChange_MapDropdown() Declaration public void OnChange_MapDropdown() OnChange_MaxSlider() Declaration public void OnChange_MaxSlider() OnChange_RoomNameInput() Declaration public void OnChange_RoomNameInput() OnClick_CloseCreateRoomPanel() Declaration public void OnClick_CloseCreateRoomPanel() OnClick_CreateRoomButton() Declaration public void OnClick_CreateRoomButton() OnClick_OpenCreateRoomPanel() Declaration public void OnClick_OpenCreateRoomPanel() RemoveRoomRender(RoomInfo) Declaration public void RemoveRoomRender(RoomInfo room) Parameters Type Name Description RoomInfo room SetInitialRoomData() Declaration public void SetInitialRoomData() SetLoadableScenes(List<String>) Declaration public void SetLoadableScenes(List<string> playableList) Parameters Type Name Description List < String > playableList SetPlayerNameLabel(String) Declaration public void SetPlayerNameLabel(string name) Parameters Type Name Description String name"
  },
  "api/Global.MenuScenes.html": {
    "href": "api/Global.MenuScenes.html",
    "title": "Enum MenuScenes | Catch.io Dev Doc",
    "keywords": "Enum MenuScenes Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum MenuScenes Fields Name Description Launcher LobbyMenu"
  },
  "api/Global.MoveState.html": {
    "href": "api/Global.MoveState.html",
    "title": "Enum MoveState | Catch.io Dev Doc",
    "keywords": "Enum MoveState Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum MoveState Fields Name Description Run Sneak SneakStatic Static Walk"
  },
  "api/Global.NetworkCallback.html": {
    "href": "api/Global.NetworkCallback.html",
    "title": "Class NetworkCallback | Catch.io Dev Doc",
    "keywords": "Class NetworkCallback Master class for manager scripts that works with PUN callbacks. This script is not meant to be used as a component, rather, other game managers are expected to inherit from this class. Inheritance Object NetworkCallback GameManager Launcher NetworkLobbyManager Namespace : Global Assembly : cs.temp.dll.dll Syntax public class NetworkCallback : MonoBehaviourPunCallbacks Fields gameVersion This client's version number. Users are separated from each other by gameVersion (which allows you to make breaking changes). Declaration public string gameVersion Field Value Type Description String Methods OnCreateRoomFailed(Int16, String) Declaration public override void OnCreateRoomFailed(short returnCode, string message) Parameters Type Name Description Int16 returnCode String message OnDisconnected(DisconnectCause) Declaration public override void OnDisconnected(DisconnectCause cause) Parameters Type Name Description DisconnectCause cause OnJoinRoomFailed(Int16, String) Declaration public override void OnJoinRoomFailed(short returnCode, string message) Parameters Type Name Description Int16 returnCode String message"
  },
  "api/Global.NetworkLobbyManager.html": {
    "href": "api/Global.NetworkLobbyManager.html",
    "title": "Class NetworkLobbyManager | Catch.io Dev Doc",
    "keywords": "Class NetworkLobbyManager Photon lobby scene manager. All the lobby logic and network management should be handled from here. Inheritance Object NetworkCallback NetworkLobbyManager Inherited Members NetworkCallback.gameVersion NetworkCallback.OnDisconnected(DisconnectCause) NetworkCallback.OnCreateRoomFailed(Int16, String) Namespace : Global Assembly : cs.temp.dll.dll Syntax public class NetworkLobbyManager : NetworkCallback Fields instance Declaration public static GameObject instance Field Value Type Description GameObject Methods CreateRoom(String, String, Byte) Declaration public void CreateRoom(string roomName, string mapName, byte maxPlayer) Parameters Type Name Description String roomName String mapName Byte maxPlayer JoinRoom(String) Declaration public void JoinRoom(string roomName) Parameters Type Name Description String roomName OnCreatedRoom() Declaration public override void OnCreatedRoom() OnJoinedRoom() Declaration public override void OnJoinedRoom() OnJoinRoomFailed(Int16, String) Declaration public override void OnJoinRoomFailed(short returnCode, string message) Parameters Type Name Description Int16 returnCode String message Overrides NetworkCallback.OnJoinRoomFailed(Int16, String) OnRoomListUpdate(List<RoomInfo>) Declaration public override void OnRoomListUpdate(List<RoomInfo> roomList) Parameters Type Name Description List < RoomInfo > roomList"
  },
  "api/Global.PlayableScenes.html": {
    "href": "api/Global.PlayableScenes.html",
    "title": "Enum PlayableScenes | Catch.io Dev Doc",
    "keywords": "Enum PlayableScenes Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum PlayableScenes Fields Name Description GrassLands HouseInteriorsTest TestMap VillageMap"
  },
  "api/Global.Player.html": {
    "href": "api/Global.Player.html",
    "title": "Class Player | Catch.io Dev Doc",
    "keywords": "Class Player Inheritance Object Player Implements IHitable IPunObservable Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Player : MonoBehaviourPun, IHitable, IPunObservable Fields CatchAngle Declaration public float CatchAngle Field Value Type Description Single CatchRadius Declaration public float CatchRadius Field Value Type Description Single CrouchingSpeed Declaration public float CrouchingSpeed Field Value Type Description Single CurrentSurface Declaration public Surface.SurfaceType CurrentSurface Field Value Type Description Utils.Surface.SurfaceType LookAngle Declaration public int LookAngle Field Value Type Description Int32 LookDirection Declaration public Vector2 LookDirection Field Value Type Description Vector2 MoveDirectionAngle Declaration public int MoveDirectionAngle Field Value Type Description Int32 MoveSpeed Declaration public float MoveSpeed Field Value Type Description Single PlayerMoveState Declaration public MoveState PlayerMoveState Field Value Type Description MoveState ProjectileValues Declaration public ProjectileValues ProjectileValues Field Value Type Description ProjectileValues RunSpeed Declaration public float RunSpeed Field Value Type Description Single StandingTile Declaration public TileBase StandingTile Field Value Type Description TileBase Properties CurrentSpeed Declaration public float CurrentSpeed { get; } Property Value Type Description Single Elevation Declaration public int Elevation { get; } Property Value Type Description Int32 Inventory Declaration public Inventory Inventory { get; } Property Value Type Description Inventory IsCaught Declaration public bool IsCaught { get; set; } Property Value Type Description Boolean IsLocalClient Declaration public bool IsLocalClient { get; } Property Value Type Description Boolean IsStun Declaration public bool IsStun { get; set; } Property Value Type Description Boolean PlayerControl Declaration public PlayerControlInput PlayerControl { get; } Property Value Type Description PlayerControlInput PlayerName Declaration public string PlayerName { get; } Property Value Type Description String StunDelayTime Declaration public WaitForSecondsRealtime StunDelayTime { get; set; } Property Value Type Description WaitForSecondsRealtime Methods CalculateObjectProjectileMotion(Vector3) Declaration public void CalculateObjectProjectileMotion(Vector3 endPosition) Parameters Type Name Description Vector3 endPosition CanCatch(Vector2) Checks if the player can catch another player with the given direction Declaration public bool CanCatch(Vector2 lookDir) Parameters Type Name Description Vector2 lookDir Returns Type Description Boolean can catch state CanThrow() Declaration public bool CanThrow() Returns Type Description Boolean Catch(Vector2) Declaration public void Catch(Vector2 lookDir) Parameters Type Name Description Vector2 lookDir LookAt(Vector2) Sets the player view direction with the given vector. This method is used to set the player sprite direction and the FOV light. Declaration public void LookAt(Vector2 lookPoint) Parameters Type Name Description Vector2 lookPoint Move(Vector2, MoveState) Moves the player object with the given input vector and the movement state. This method will also set the player's movement state that will be used for changing the animation. Declaration public void Move(Vector2 inputVector, MoveState moveState) Parameters Type Name Description Vector2 inputVector MoveState moveState OnCaught(Vector2) Declaration public void OnCaught(Vector2 lookDir) Parameters Type Name Description Vector2 lookDir OnHit(ThrowableObject) Declaration public void OnHit(ThrowableObject throwableObject) Parameters Type Name Description ThrowableObject throwableObject OnPhotonSerializeView(PhotonStream, PhotonMessageInfo) Declaration public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info) Parameters Type Name Description PhotonStream stream PhotonMessageInfo info ReleaseProjectile() Declaration public void ReleaseProjectile() ResetSubject() Declaration public void ResetSubject() SelectItem(Int32) Declaration public void SelectItem(int index) Parameters Type Name Description Int32 index SetPlayerName(String) Declaration public void SetPlayerName(string name) Parameters Type Name Description String name SetTrajectoryActive(Boolean) Declaration public void SetTrajectoryActive(bool active) Parameters Type Name Description Boolean active SpawnProjectile() Declaration public void SpawnProjectile() ThrowObject() Throws a projectile in the inventory queue with the given power and direction. Declaration public void ThrowObject() UpdateCurrentTileInfo() Declaration public void UpdateCurrentTileInfo() Implements IHitable IPunObservable"
  },
  "api/Global.PlayerControlInput.html": {
    "href": "api/Global.PlayerControlInput.html",
    "title": "Class PlayerControlInput | Catch.io Dev Doc",
    "keywords": "Class PlayerControlInput Player controller abstraction component. Everything that relates to controlling the player should be part of this script. Inheritance Object PlayerControlInput Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PlayerControlInput : MonoBehaviour Fields CatchButtonSubject Declaration public Subject CatchButtonSubject Field Value Type Description ObserverPattern.Subject RotateJoystick Declaration public Joystick RotateJoystick Field Value Type Description Joystick ThrowMode Declaration public bool ThrowMode Field Value Type Description Boolean Properties CanCatch Declaration public bool CanCatch { get; } Property Value Type Description Boolean ControlTarget Declaration public Player ControlTarget { get; } Property Value Type Description Player Methods MobileCursorPosition() Declaration public Vector2 MobileCursorPosition() Returns Type Description Vector2"
  },
  "api/Global.Projectile.html": {
    "href": "api/Global.Projectile.html",
    "title": "Class Projectile | Catch.io Dev Doc",
    "keywords": "Class Projectile Inheritance Object Projectile BouncingToadProjectile StoneProjectile StunBombProjectile Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class Projectile : MonoBehaviour Methods Execute() Declaration public abstract void Execute() GetMovePoints(Vector2, Vector2) Declaration public abstract List<Vector3> GetMovePoints(Vector2 startPosition, Vector2 endPosition) Parameters Type Name Description Vector2 startPosition Vector2 endPosition Returns Type Description List < Vector3 > HandleDestroy() Declaration public abstract void HandleDestroy() HandleSpawn(Int32) Declaration public abstract void HandleSpawn(int elevation) Parameters Type Name Description Int32 elevation Initialize() Declaration public abstract void Initialize() OnGround() Declaration public abstract void OnGround() OnTriggerEnter2D(Collider2D) Declaration public abstract void OnTriggerEnter2D(Collider2D other) Parameters Type Name Description Collider2D other SetSpritePosition(Vector3) Declaration public abstract void SetSpritePosition(Vector3 position) Parameters Type Name Description Vector3 position"
  },
  "api/Global.ProjectileCollisionStrategy.html": {
    "href": "api/Global.ProjectileCollisionStrategy.html",
    "title": "Class ProjectileCollisionStrategy | Catch.io Dev Doc",
    "keywords": "Class ProjectileCollisionStrategy Inheritance Object ProjectileCollisionStrategy BouncingToadCollisionStrategy StoneCollisionStrategy Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class ProjectileCollisionStrategy : ScriptableObject Methods Execute(Boolean) Declaration public abstract void Execute(bool isGround) Parameters Type Name Description Boolean isGround Initialize(BoxCollider2D) Declaration public abstract void Initialize(BoxCollider2D collider2D) Parameters Type Name Description BoxCollider2D collider2D"
  },
  "api/Global.ProjectileCollisionStrategy.OffensiveValue.html": {
    "href": "api/Global.ProjectileCollisionStrategy.OffensiveValue.html",
    "title": "Struct ProjectileCollisionStrategy.OffensiveValue | Catch.io Dev Doc",
    "keywords": "Struct ProjectileCollisionStrategy.OffensiveValue Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public struct OffensiveValue Fields CanStun Declaration public bool CanStun Field Value Type Description Boolean Damage Declaration public float Damage Field Value Type Description Single"
  },
  "api/Global.ProjectileData.html": {
    "href": "api/Global.ProjectileData.html",
    "title": "Class ProjectileData | Catch.io Dev Doc",
    "keywords": "Class ProjectileData Inheritance Object ProjectileData Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class ProjectileData Properties Prefab Declaration public GameObject Prefab { get; } Property Value Type Description GameObject ThrowableType Declaration public ThrowableType ThrowableType { get; } Property Value Type Description ThrowableType"
  },
  "api/Global.ProjectileEffect.html": {
    "href": "api/Global.ProjectileEffect.html",
    "title": "Class ProjectileEffect | Catch.io Dev Doc",
    "keywords": "Class ProjectileEffect Inheritance Object ProjectileEffect SoundWaveEffect StunBombEffect Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ProjectileEffect : ScriptableObject Fields _poolManager Declaration protected PurePoolManager _poolManager Field Value Type Description PurePoolManager Methods Cancel() Declaration public virtual void Cancel() HandleDestroy(GameObject) Declaration public virtual void HandleDestroy(GameObject targetObject) Parameters Type Name Description GameObject targetObject Initialize() Declaration public virtual void Initialize() SpawnAtPoint(Transform, Int32) Declaration public virtual void SpawnAtPoint(Transform transform, int elevation) Parameters Type Name Description Transform transform Int32 elevation"
  },
  "api/Global.ProjectilePathGenerator.html": {
    "href": "api/Global.ProjectilePathGenerator.html",
    "title": "Class ProjectilePathGenerator | Catch.io Dev Doc",
    "keywords": "Class ProjectilePathGenerator Inheritance Object ProjectilePathGenerator Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ProjectilePathGenerator : ScriptableObject Fields ProjectileValues Declaration public ProjectileValues ProjectileValues Field Value Type Description ProjectileValues Methods CalculateBouncePoints(Vector2, Vector2, Int32) Declaration public List<Vector3> CalculateBouncePoints(Vector2 originPosition, Vector2 endPosition, int bounceCount = 3) Parameters Type Name Description Vector2 originPosition Vector2 endPosition Int32 bounceCount Returns Type Description List < Vector3 > CalculatePoints(Vector2, Vector2, Boolean) Declaration public void CalculatePoints(Vector2 originPosition, Vector2 endPosition, bool isBounce = false) Parameters Type Name Description Vector2 originPosition Vector2 endPosition Boolean isBounce GetMovePoints() Declaration public List<Vector3> GetMovePoints() Returns Type Description List < Vector3 > Initialize(BoxCollider2D) Declaration public void Initialize(BoxCollider2D boxCollider) Parameters Type Name Description BoxCollider2D boxCollider"
  },
  "api/Global.ProjectileScriptableObject.html": {
    "href": "api/Global.ProjectileScriptableObject.html",
    "title": "Class ProjectileScriptableObject | Catch.io Dev Doc",
    "keywords": "Class ProjectileScriptableObject Inheritance Object ProjectileScriptableObject Namespace : Global Assembly : cs.temp.dll.dll Syntax public class ProjectileScriptableObject : ScriptableObject Fields ProjectileDatas Declaration public List<ProjectileData> ProjectileDatas Field Value Type Description List < ProjectileData > Methods FindProjectileData(ThrowableType) Declaration public ProjectileData FindProjectileData(ThrowableType type) Parameters Type Name Description ThrowableType type Returns Type Description ProjectileData"
  },
  "api/Global.ProjectileValues.html": {
    "href": "api/Global.ProjectileValues.html",
    "title": "Struct ProjectileValues | Catch.io Dev Doc",
    "keywords": "Struct ProjectileValues Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public struct ProjectileValues Fields MaxRadius Declaration public float MaxRadius Field Value Type Description Single MoveSpeed Declaration public float MoveSpeed Field Value Type Description Single MultiplyXDistanceToIncreaseValue Declaration public float MultiplyXDistanceToIncreaseValue Field Value Type Description Single NumOfMovePoints Declaration public int NumOfMovePoints Field Value Type Description Int32 Properties MovePointDuration Declaration public float MovePointDuration { get; } Property Value Type Description Single"
  },
  "api/Global.PurePoolManager.html": {
    "href": "api/Global.PurePoolManager.html",
    "title": "Class PurePoolManager | Catch.io Dev Doc",
    "keywords": "Class PurePoolManager Inheritance Object PurePoolManager Namespace : Global Assembly : cs.temp.dll.dll Syntax public class PurePoolManager : MonoBehaviour Fields Instance Declaration public static PurePoolManager Instance Field Value Type Description PurePoolManager Methods AcquireEffect(EffectType, Vector3, Quaternion) Declaration public GameObject AcquireEffect(EffectType effectType, Vector3 position, Quaternion rotation) Parameters Type Name Description EffectType effectType Vector3 position Quaternion rotation Returns Type Description GameObject AcquireFootprint(Vector3, Quaternion) Declaration public GameObject AcquireFootprint(Vector3 position, Quaternion rotation) Parameters Type Name Description Vector3 position Quaternion rotation Returns Type Description GameObject AcquireProjectile(ThrowableObject, Vector3, Quaternion) Declaration public GameObject AcquireProjectile(ThrowableObject throwableObject, Vector3 position, Quaternion rotation) Parameters Type Name Description ThrowableObject throwableObject Vector3 position Quaternion rotation Returns Type Description GameObject ReleasePool(GameObject) Declaration public void ReleasePool(GameObject obj) Parameters Type Name Description GameObject obj"
  },
  "api/Global.RaycastOrigins.html": {
    "href": "api/Global.RaycastOrigins.html",
    "title": "Class RaycastOrigins | Catch.io Dev Doc",
    "keywords": "Class RaycastOrigins Inheritance Object RaycastOrigins Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class RaycastOrigins Fields centerDown Declaration public Vector2 centerDown Field Value Type Description Vector2 centerLeft Declaration public Vector2 centerLeft Field Value Type Description Vector2 downHitCount Declaration public int downHitCount Field Value Type Description Int32 isCheck Declaration public bool isCheck Field Value Type Description Boolean leftHitCount Declaration public int leftHitCount Field Value Type Description Int32 rayLength Declaration public float rayLength Field Value Type Description Single rightHitCount Declaration public int rightHitCount Field Value Type Description Int32 upHitCount Declaration public int upHitCount Field Value Type Description Int32 Methods CalculateBounceOffHitCount(RaySpace) Declaration public void CalculateBounceOffHitCount(RaySpace raySpace) Parameters Type Name Description RaySpace raySpace GetHitPoint() Declaration public HitPoint GetHitPoint() Returns Type Description HitPoint ResetHitCount() Declaration public void ResetHitCount() UpdateRaycastOrigins(BoxCollider2D) Declaration public RaycastOrigins UpdateRaycastOrigins(BoxCollider2D _collider2D) Parameters Type Name Description BoxCollider2D _collider2D Returns Type Description RaycastOrigins"
  },
  "api/Global.RaySpace.html": {
    "href": "api/Global.RaySpace.html",
    "title": "Class RaySpace | Catch.io Dev Doc",
    "keywords": "Class RaySpace Inheritance Object RaySpace Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RaySpace Constructors RaySpace() Declaration public RaySpace() Fields horizontalRayCount Declaration public int horizontalRayCount Field Value Type Description Int32 horizontalRaySpacing Declaration public float horizontalRaySpacing Field Value Type Description Single verticalRayCount Declaration public int verticalRayCount Field Value Type Description Int32 verticalRaySpacing Declaration public float verticalRaySpacing Field Value Type Description Single Methods CalculateRaySpacing(BoxCollider2D) Declaration public RaySpace CalculateRaySpacing(BoxCollider2D _collider2D) Parameters Type Name Description BoxCollider2D _collider2D Returns Type Description RaySpace"
  },
  "api/Global.RoomItemControl.html": {
    "href": "api/Global.RoomItemControl.html",
    "title": "Class RoomItemControl | Catch.io Dev Doc",
    "keywords": "Class RoomItemControl A GUI controller script for displaying Photon rooms Inheritance Object GuiBehavior RoomItemControl Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RoomItemControl : GuiBehavior Properties RoomName Declaration public string RoomName { get; } Property Value Type Description String Methods CreateRoomRender(RoomInfo) Declaration public void CreateRoomRender(RoomInfo room) Parameters Type Name Description RoomInfo room OnClick_JoinRoom() Declaration public void OnClick_JoinRoom()"
  },
  "api/Global.RotateJoystick.html": {
    "href": "api/Global.RotateJoystick.html",
    "title": "Class RotateJoystick | Catch.io Dev Doc",
    "keywords": "Class RotateJoystick Inheritance Object RotateJoystick Namespace : Global Assembly : cs.temp.dll.dll Syntax public class RotateJoystick : UnityStandardAssets.CrossPlatformInput.Joystick Methods Start() Declaration public override void Start()"
  },
  "api/Global.Singleton-1.html": {
    "href": "api/Global.Singleton-1.html",
    "title": "Class Singleton<T> | Catch.io Dev Doc",
    "keywords": "Class Singleton<T> Inheritance Object Singleton<T> Namespace : Global Assembly : cs.temp.dll.dll Syntax public class Singleton<T> where T : class Type Parameters Name Description T Properties Instance Declaration public static T Instance { get; } Property Value Type Description T"
  },
  "api/Global.SingletonMonoBehaviour-1.html": {
    "href": "api/Global.SingletonMonoBehaviour-1.html",
    "title": "Class SingletonMonoBehaviour<T> | Catch.io Dev Doc",
    "keywords": "Class SingletonMonoBehaviour<T> Inheritance Object SingletonMonoBehaviour<T> SoundManager Namespace : Global Assembly : cs.temp.dll.dll Syntax public abstract class SingletonMonoBehaviour<T> : MonoBehaviour where T : MonoBehaviour Type Parameters Name Description T Properties Instance Declaration public static T Instance { get; } Property Value Type Description T Methods OnApplicationQuit() When Unity quits, it destroys objects in a random order. In principle, a Singleton is only destroyed when application quits. If any script calls Instance after it have been destroyed, it will create a buggy ghost object that will stay on the Editor scene even after stopping playing the Application. Really bad! So, this was made to be sure we're not creating that buggy ghost object. Declaration protected virtual void OnApplicationQuit()"
  },
  "api/Global.SingletonReferences.html": {
    "href": "api/Global.SingletonReferences.html",
    "title": "Class SingletonReferences | Catch.io Dev Doc",
    "keywords": "Class SingletonReferences Inheritance Object SingletonReferences Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SingletonReferences : MonoBehaviour"
  },
  "api/Global.SoundManager.html": {
    "href": "api/Global.SoundManager.html",
    "title": "Class SoundManager | Catch.io Dev Doc",
    "keywords": "Class SoundManager Inheritance Object SingletonMonoBehaviour < SoundManager > SoundManager Inherited Members SingletonMonoBehaviour<SoundManager>.Instance SingletonMonoBehaviour<SoundManager>.OnApplicationQuit() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SoundManager : SingletonMonoBehaviour<SoundManager> Fields surfaceSound Declaration public string surfaceSound Field Value Type Description String Methods PlaySurfaceSFX(Transform, Surface.SurfaceType, Single) Declaration public void PlaySurfaceSFX(Transform origin, Surface.SurfaceType surfaceType, float volume = 1F) Parameters Type Name Description Transform origin Surface.SurfaceType surfaceType Single volume"
  },
  "api/Global.SoundWave.html": {
    "href": "api/Global.SoundWave.html",
    "title": "Class SoundWave | Catch.io Dev Doc",
    "keywords": "Class SoundWave Inheritance Object Effect SoundWave Inherited Members Effect.DestroyHandler Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SoundWave : Effect Fields Range Declaration public float Range Field Value Type Description Single Speed Declaration public float Speed Field Value Type Description Single Methods Initialize(Action<GameObject>) Declaration public override void Initialize(Action<GameObject> destroyAction) Parameters Type Name Description Action < GameObject > destroyAction Overrides Effect.Initialize(Action<GameObject>)"
  },
  "api/Global.SoundWaveEffect.html": {
    "href": "api/Global.SoundWaveEffect.html",
    "title": "Class SoundWaveEffect | Catch.io Dev Doc",
    "keywords": "Class SoundWaveEffect Inheritance Object ProjectileEffect SoundWaveEffect Inherited Members ProjectileEffect._poolManager Namespace : Global Assembly : cs.temp.dll.dll Syntax public class SoundWaveEffect : ProjectileEffect Methods Cancel() Declaration public override void Cancel() Overrides ProjectileEffect.Cancel() HandleDestroy(GameObject) Declaration public override void HandleDestroy(GameObject targetObject) Parameters Type Name Description GameObject targetObject Overrides ProjectileEffect.HandleDestroy(GameObject) Initialize() Declaration public override void Initialize() Overrides ProjectileEffect.Initialize() SpawnAtPoint(Transform, Int32) Declaration public override void SpawnAtPoint(Transform transform, int elevation) Parameters Type Name Description Transform transform Int32 elevation Overrides ProjectileEffect.SpawnAtPoint(Transform, Int32)"
  },
  "api/Global.StaminaBar.html": {
    "href": "api/Global.StaminaBar.html",
    "title": "Class StaminaBar | Catch.io Dev Doc",
    "keywords": "Class StaminaBar Inheritance Object StaminaBar Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StaminaBar : MonoBehaviour Fields healthBarCorrection Declaration public float healthBarCorrection Field Value Type Description Single staminaBar Declaration public Slider staminaBar Field Value Type Description Slider Methods LateUpdate() Declaration public void LateUpdate() Start() Declaration public void Start()"
  },
  "api/Global.StaminaMeter.html": {
    "href": "api/Global.StaminaMeter.html",
    "title": "Class StaminaMeter | Catch.io Dev Doc",
    "keywords": "Class StaminaMeter Inheritance Object StaminaMeter Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StaminaMeter : MonoBehaviour Fields maxStamina Declaration public float maxStamina Field Value Type Description Single stamina Declaration public float stamina Field Value Type Description Single timer Declaration public float timer Field Value Type Description Single"
  },
  "api/Global.StoneCollisionStrategy.html": {
    "href": "api/Global.StoneCollisionStrategy.html",
    "title": "Class StoneCollisionStrategy | Catch.io Dev Doc",
    "keywords": "Class StoneCollisionStrategy Inheritance Object ProjectileCollisionStrategy StoneCollisionStrategy Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StoneCollisionStrategy : ProjectileCollisionStrategy Methods Execute(Boolean) Declaration public override void Execute(bool isGround) Parameters Type Name Description Boolean isGround Overrides ProjectileCollisionStrategy.Execute(Boolean) Initialize(BoxCollider2D) Declaration public override void Initialize(BoxCollider2D collider2D) Parameters Type Name Description BoxCollider2D collider2D Overrides ProjectileCollisionStrategy.Initialize(BoxCollider2D)"
  },
  "api/Global.StoneProjectile.html": {
    "href": "api/Global.StoneProjectile.html",
    "title": "Class StoneProjectile | Catch.io Dev Doc",
    "keywords": "Class StoneProjectile Inheritance Object Projectile StoneProjectile Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StoneProjectile : Projectile Methods Execute() Declaration public override void Execute() Overrides Projectile.Execute() GetMovePoints(Vector2, Vector2) Declaration public override List<Vector3> GetMovePoints(Vector2 startPosition, Vector2 endPosition) Parameters Type Name Description Vector2 startPosition Vector2 endPosition Returns Type Description List < Vector3 > Overrides Projectile.GetMovePoints(Vector2, Vector2) HandleDestroy() Declaration public override void HandleDestroy() Overrides Projectile.HandleDestroy() HandleSpawn(Int32) Declaration public override void HandleSpawn(int elevation = 0) Parameters Type Name Description Int32 elevation Overrides Projectile.HandleSpawn(Int32) Initialize() Declaration public override void Initialize() Overrides Projectile.Initialize() OnGround() Declaration public override void OnGround() Overrides Projectile.OnGround() OnTriggerEnter2D(Collider2D) Declaration public override void OnTriggerEnter2D(Collider2D other) Parameters Type Name Description Collider2D other Overrides Projectile.OnTriggerEnter2D(Collider2D) SetSpritePosition(Vector3) Declaration public override void SetSpritePosition(Vector3 position) Parameters Type Name Description Vector3 position Overrides Projectile.SetSpritePosition(Vector3)"
  },
  "api/Global.StunBombEffect.html": {
    "href": "api/Global.StunBombEffect.html",
    "title": "Class StunBombEffect | Catch.io Dev Doc",
    "keywords": "Class StunBombEffect Inheritance Object ProjectileEffect StunBombEffect Inherited Members ProjectileEffect._poolManager ProjectileEffect.Initialize() Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StunBombEffect : ProjectileEffect Methods Cancel() Declaration public override void Cancel() Overrides ProjectileEffect.Cancel() HandleDestroy(GameObject) Declaration public override void HandleDestroy(GameObject targetObject) Parameters Type Name Description GameObject targetObject Overrides ProjectileEffect.HandleDestroy(GameObject) SetRadius(Single) Declaration public void SetRadius(float radius) Parameters Type Name Description Single radius SpawnAtPoint(Transform, Int32) Declaration public override void SpawnAtPoint(Transform transform, int elevation) Parameters Type Name Description Transform transform Int32 elevation Overrides ProjectileEffect.SpawnAtPoint(Transform, Int32)"
  },
  "api/Global.StunBombExplosion.html": {
    "href": "api/Global.StunBombExplosion.html",
    "title": "Class StunBombExplosion | Catch.io Dev Doc",
    "keywords": "Class StunBombExplosion Inheritance Object Effect StunBombExplosion Inherited Members Effect.DestroyHandler Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StunBombExplosion : Effect Methods Initialize(Action<GameObject>) Declaration public override void Initialize(Action<GameObject> destroyAction) Parameters Type Name Description Action < GameObject > destroyAction Overrides Effect.Initialize(Action<GameObject>) SetRadius(Single) Declaration public void SetRadius(float radius) Parameters Type Name Description Single radius"
  },
  "api/Global.StunBombProjectile.html": {
    "href": "api/Global.StunBombProjectile.html",
    "title": "Class StunBombProjectile | Catch.io Dev Doc",
    "keywords": "Class StunBombProjectile Inheritance Object Projectile StunBombProjectile Namespace : Global Assembly : cs.temp.dll.dll Syntax public class StunBombProjectile : Projectile Fields ExplosionRadius Declaration public float ExplosionRadius Field Value Type Description Single Methods Execute() Declaration public override void Execute() Overrides Projectile.Execute() GetMovePoints(Vector2, Vector2) Declaration public override List<Vector3> GetMovePoints(Vector2 startPosition, Vector2 endPosition) Parameters Type Name Description Vector2 startPosition Vector2 endPosition Returns Type Description List < Vector3 > Overrides Projectile.GetMovePoints(Vector2, Vector2) HandleDestroy() Declaration public override void HandleDestroy() Overrides Projectile.HandleDestroy() HandleSpawn(Int32) Declaration public override void HandleSpawn(int elevation) Parameters Type Name Description Int32 elevation Overrides Projectile.HandleSpawn(Int32) Initialize() Declaration public override void Initialize() Overrides Projectile.Initialize() OnGround() Declaration public override void OnGround() Overrides Projectile.OnGround() OnTriggerEnter2D(Collider2D) Declaration public override void OnTriggerEnter2D(Collider2D other) Parameters Type Name Description Collider2D other Overrides Projectile.OnTriggerEnter2D(Collider2D) SetSpritePosition(Vector3) Declaration public override void SetSpritePosition(Vector3 position) Parameters Type Name Description Vector3 position Overrides Projectile.SetSpritePosition(Vector3)"
  },
  "api/Global.SurfaceDictionary.html": {
    "href": "api/Global.SurfaceDictionary.html",
    "title": "Class SurfaceDictionary | Catch.io Dev Doc",
    "keywords": "Class SurfaceDictionary Inheritance Object SurfaceDictionary Namespace : Global Assembly : cs.temp.dll.dll Syntax public static class SurfaceDictionary Fields surfaceTypes Declaration public static Dictionary<string, int> surfaceTypes Field Value Type Description Dictionary < String , Int32 >"
  },
  "api/Global.ThrowableObject.html": {
    "href": "api/Global.ThrowableObject.html",
    "title": "Class ThrowableObject | Catch.io Dev Doc",
    "keywords": "Class ThrowableObject Inheritance Object ThrowableObject Namespace : Global Assembly : cs.temp.dll.dll Syntax [Serializable] public class ThrowableObject Constructors ThrowableObject(ThrowableType, ProjectileScriptableObject) Declaration public ThrowableObject(ThrowableType type, ProjectileScriptableObject projectileScriptableObject) Parameters Type Name Description ThrowableType type ProjectileScriptableObject projectileScriptableObject Fields Image Declaration public Sprite Image Field Value Type Description Sprite Type Declaration public ThrowableType Type Field Value Type Description ThrowableType Properties Data Declaration public ProjectileData Data { get; } Property Value Type Description ProjectileData"
  },
  "api/Global.ThrowableType.html": {
    "href": "api/Global.ThrowableType.html",
    "title": "Enum ThrowableType | Catch.io Dev Doc",
    "keywords": "Enum ThrowableType Namespace : Global Assembly : cs.temp.dll.dll Syntax public enum ThrowableType Fields Name Description BouncingToads Error SlimeBall Stone StunBomb TeleportRune Torches TrapRune"
  },
  "api/Global.TileInfo.html": {
    "href": "api/Global.TileInfo.html",
    "title": "Class TileInfo | Catch.io Dev Doc",
    "keywords": "Class TileInfo Inheritance Object TileInfo Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TileInfo Properties ParantTilemap Declaration public Tilemap ParantTilemap { get; set; } Property Value Type Description Tilemap TilemapObject Declaration public GameObject TilemapObject { get; set; } Property Value Type Description GameObject TilemapSortLayer Declaration public string TilemapSortLayer { get; } Property Value Type Description String TilemapSortOrder Declaration public int TilemapSortOrder { get; } Property Value Type Description Int32 TileRenderer Declaration public TilemapRenderer TileRenderer { get; set; } Property Value Type Description TilemapRenderer"
  },
  "api/Global.TilemapContainer.html": {
    "href": "api/Global.TilemapContainer.html",
    "title": "Class TilemapContainer | Catch.io Dev Doc",
    "keywords": "Class TilemapContainer Inheritance Object TilemapContainer Namespace : Global Assembly : cs.temp.dll.dll Syntax public class TilemapContainer : MonoBehaviour Methods GetTileMaps() Declaration public List<TileInfo> GetTileMaps() Returns Type Description List < TileInfo >"
  },
  "index.html": {
    "href": "index.html",
    "title": "Project Developer Manual | Catch.io Dev Doc",
    "keywords": "Project Developer Manual Introduction This is the project manual for Catch.io and a repository for tracking issues and tasks related to the development of Catch.io. The actual source code for the project will be managed in a separate private repository while the instructions, standards and other project development-related documentations will be stored in here. If you are part of development team, feel free to add new tasks or comment on existing ones. Every information that is required for developing with the Project Catch.io team will be documented here. Such information includes: Project folder structure Coding styles and guidelines Project contribution format (semantic version for this project, Pull Request format, etc.) Milestones and progress reporting methods Team roles Documentation format and more... You can think of this as a general guideline and a starting point for joining the team or unifying how our works should be prevented in order for them to be considered 'finished'. To keep things organized, project members should document their work and tell everyone how you want others to handle your work. Please keep in mind that you are not expected to read all the docs, but you are expected to understand the parts that is related to your task. Project Resources All resources and documents related to the development of project Catch.io is split amongst various repositories, sites and services. We will list all of them here and explain what their purposes are. Some of the links listed here will not be accessible by the public while some are. Please change the list content if we decide to make adjustments to the team management structure. Catch.io Project Repository: The repository for the source code of project Catch.io. This repository is made private, and we only allow access to project developers. However, contents like code documentation or on-going test builds will be made available to the public with the power of Github CI. Catch.io docs repository : The source code for project developer references are kept in this repository. Currently, this repo contains two different document pages. Project Development Manual : Hosted via Github Pages, this page contains the auto generated scripting reference for this project. The content of this page will change with every updates made to the Catch.io source code. It is convenient, but hard to migrate to other pages as this does not use Markdown for API references (only code manuals are in Markdown). Google Drive Shared Folder : Internal documents, weekly meeting records, brainstorming records, project expenses, art/music assets for the project and other information that are meant to be stored for a long time and only meant for team members will be stored here. Non-programmers will mostly interact with Google Drive. Itch.io page : Itch.io is used for sharing quick prototype builds of the game (in WebGL for most cases) both inside and outside of the team. Generally, this page is used for quick internal testing, but we may consider releasing the game here at some point. Trello Project Board : Still experimental, but this is where the development progress regarding Catch.io will be tracked. Catch.io GDD : Hosted by Gitbook, this page contains everything about the project such as the game mechanics, expected features, rough timeline, expected release platforms, general marketing strategy, pivot strategies, and more. Abbreviations & Definitions To increase the efficiency of communications between members, it is good to use abbreviations. If there are any abbreviations (and the definition of that word) you are using that is foreign to other new members, please add it here. PR: Pull Request (when merging a branch or a fork to the master repository) Repo: Repository (Git repository) doc: Documentation (Projects documentation like this one will be referred to as docs) WIP: Working In Progress impl: short for implement or implementation LGTM: Looks Good to Me (used when a PR does not have any issues and is good to merge) Scripts: Refers to the .cs code that contains game play logic, but are not directly used as part of a Unity game object Components: This is also a .cs code, but it is meant to be used as a component for Unity game objects How to Write Documents Project docs like this one must be written in Markdown. I recommend using stackedit.io to write a quick doc, or use the Markdown All in One extension for VS code. Documentations should be long and comprehensive so anyone can understand. As a general format, think of this README doc as a template to start from. Q: What should be a doc Anything that requires more than one people to work on either now or in the future. Or if you have any special requirements regarding your work or working style, write a doc to express that to other members. Q: Who can write a doc Anyone within the team. You will need other's permission to edit an existing doc (except for fixing typos or obvious problems), but creating a new one is completely up to you. Q: Any word requirements It should be comprehensive, but not boring. There are no strict word count but it should be long enough to let the reader understand what you want to say and short enough to not make the reader fall asleep."
  },
  "manual/artist-guidelines.html": {
    "href": "manual/artist-guidelines.html",
    "title": "Art Asset Structure | Catch.io Dev Doc",
    "keywords": "Art Asset Structure This section will describe how art assets for Catch.io should be structured. Directory Every art assets used in the game (excluding UI) is stored in Assets/Textures/ . This includes character sprites, environmental objects, throwable objects and map tile sets. Everything relating to the UI such as menu, title, inventory icon, etc will be stored in Assets/UI/ . Asset import settings When importing the assets to Unity engine, the file settings should be like the following: Texture Type: Sprite (2D and UI) Sprite Mode: Multiple or Single Pixels Per Unit: 32 Filter Mode: Point (no filter) Compression: None When slicing animated sprites, it is recommended to use the Grid by Cell Count method. Submitting Assets For artists who are submitting their work, it is recommended to upload the work to Google Drive Team STEP/Projects/Project Catch.io/Sprites/ folder with the appropriate name of the sprite that is being added. Because Google Drive does not send responsive notifications for uploading images, the artist will have to notify the developer that their work has been uploaded via Slack. Folder Structure Animated character sprites will be placed in the Characters/ folder with the name of the character as the root directory. Inside this folder, there should be a subdirectory that describes the action (ex: Characters/Shade/Walking/ , Characters/Shade/Running/ , Characters/Shade/Crouching/ , etc.). The actual image file will be saved within those folders. Completely optional, but it is recommended to create source folder as well that stores the original work file in any format as a backup solution (ex: Characters/Shade/source/running.aseprite ). Image Format It is recommend that the final asset is saved as .png , but Unity supports a vast number of image formats, so as long as the file can save alpha channel data or layer data (if required), the artist can save it as any format as they want. For any animated sprites, it is recommend to separate the sprite asset into animation sheets like the following sample image. Character sprites should be separated into each directions where a single image contains all the frames for that direction. The asset file name should be prefixed with the action and suffixed with the direction that the character is facing with a space in between the two. The direction should be named as the cardinal direction (ex: Run NE.png , Walk S.png , etc.). To summarize all of this, character assets should have the format of Characters/{Character Name}/{Action}/{Action Direction}.png . Theses are some of the examples: Characters/Shade/Walking/Walking NW.png Characters/Shade/Running/Running N.png Characters/Shade/Throwing/Throwing SW.png Throwables/Torch/Torch1.png Throwables/Frog/Red Frog/Back.png Asset Color Palette Both characters and props must follow the following color palette to keep a consistent feeling for the visual assets. A single component of an asset (such as metal, gold, cloth, etc.) should be within 2 variations of light to dark palettes/color. Feel free to add more but the main idea is that for artists to make an object e.g a wooden barrel it should use the same wood colors as the trees in the environment."
  },
  "manual/github-guide.html": {
    "href": "manual/github-guide.html",
    "title": "Git Guide | Catch.io Dev Doc",
    "keywords": "Git Guide Branches and Forks The basic idea of branches and PRs is, when implementing a new feature for most projects, you would create a branch that is only for that feature. When the development is done you would open a pull request and merge it with the master. We will elaborate on this idea and create a single standard as game development involves many moving parts that rely on each other and it is important for everyone to be on the same page with this. There will be mainly four types of branches. fix branch: a branch name that is used for commits for patches or fixes that address a bug that came from the feature branch. This does not add anything new in terms of features, but only refactors them. Ex) fix/throw-object . feature branch: branches that adds something new to the game which may break the game or not. Because of how game development works, commits in this branch will inadvertently act similar as the fix branch (and it is fine to do that as long as you record it!), but one key difference is that feature branch must add something new. Ex) feature/ai-sensors . development branch: these are the branches that are in active development. They have a very strict rule. First, the name must be the semantic version name. Second, every feature and fix branches must be derived from this branch and merge back to it when finished (no branch should derive from other branches). Lastly, after merging the development branch with the master branch, the development branch should not be touched at all. Ex) development/v-0.0.1b document branch: this is a special branch that is used exclusivly for PR that adds documentation to the repo In short, branches with the name development must be derived from the master while the fix and feature branches derive from the latest development branch. Only development branches are allowed to merge with master . However, you can only merge when there are no fix or feature branches, and once you merge you can only create a new development branch, no direct commits to master unless the situation calls for it . Merging a development branch to the master branch will be part of a Milestone . Forking works similar to the fix and feature branch. You can freely fork a development branch and merge back to it. But you should never fork and commit to a fix / feature branch unless you made a new one or you have to! Versioning Scheme By default, projects will use the Semantic Versioning as the base for the versioning scheme. Versions are generally used in three different places. Github tag/dev branch names In-engine version In-game graphical version display In-engine version and the In-game graphical version display will be linked together, allowing the developer to only focus on working with the in-engine version numbering. Those will have to be changed manually. Github version names will be taking the form of development branch names like development/v0.1.3a and will also be the name of Github's Projects feature and Milestones feature. The naming scheme for branch names will be like the following, development/v[major].[minor].[patch][alpha/beta] . The major number is when we add a huge feature that may change the game as a whole. One example would include a multiplayer mode for a singleplayer only game. Adding on to this, minor versions are additional feature that does not affect the game play flow to a huge degree, but does add something new to the existing game. For example, a new character model or new items. Patch numbers are generally when a game changes its backend code that the end-users does not notice right away and updates that does not add something visible to the game. Like bug fixes and gameplay balancing. Using Git Projects and Progress Tracking For tracking the development process, we will be using Git Projects. Git Projects is a simple automated Kanban for understanding what tasks should be done, what is in progress and what is finished. For this project we will be using the automated Kanban, meaning that issues will be automatically added to the Projects Kanban. Project names should be the development version that the project will have. If all the items in the Project are considered to be finished, you can open a new milestone and merge that version with the master branch. After that you would create a new Project with a new version name. For adding items to the Kanban, please create a new Issue with the appropriate label. When adding a new feature to the game, create a new branch with the prefix feature/[feature-name] and open a new issue with the label enhancement . For fixing bugs or other patches, create a new branch with the prefix fix/[patch-name] and open a new issue with the label fix . When you open a new issue, that item will be automatically added to the Project Kanban. GitHub Projects is just a simple method to check the overall progress of the working project and to understand what the developers should be doing. As long as the developer understands to open an issue and creating a new branch before making any changes, there should be no problem. Opening Issues As mentioned above, the project's development progress and assigning tasks will be done via opening issues on the repository. Because of this, it is important to understand the format for opening one in a consistent way. Issue Title: The title of the feature/fix that the assigned developer will make. Description: The detailed description of what this task will be adding. It is best to add a list of things that will be done. Assignees: This shows the developers who will be taking on the task that the issue describes. Labels: The category of the issue. Mostly it will be either enhancement or fix . Projects: The project that this issue will be committing to. This should always be the latest working development build before it is committed to the master branch. Milestone: This shows which development build this issue belongs to. Issue Templates Feature Issue ## Feature Subtasks - [ ] {task 1} - [ ] {task 2} - [ ] ... ## Description {write description of what the feature should be} ## Difficulty {how hard this task is in a scale of 1~10} ## Estimated Implementation Time - Optimistic - {how long this will take to finish all the subtasks at the very least} - Normal - {how long this will take to finish all the subtasks on average work time} - Pessimistic - {how long this will take to finish all the subtasks at most} ## Work Start Date {when will the implementation will start} Bug Report Issue ## Describe the bug {A clear and concise description of what the bug is.} ## To Reproduce Steps to reproduce the behavior: 1. Go to '...' 2. Click on '....' 3. Scroll down to '....' 4. See error ## Expected behavior {A clear and concise description of what you expected to happen.} ## Screenshots {If applicable, add screenshots to help explain your problem.} **Desktop (please complete the following information):** - OS: [e.g. iOS] - Browser [e.g. chrome, safari] - Version [e.g. 22] **Smartphone (please complete the following information):** - Device: [e.g. iPhone6] - OS: [e.g. iOS8.1] - Browser [e.g. stock browser, safari] - Version [e.g. 22] ## Additional context {Add any other context about the problem here.} General Playtester Survey ## Played build {The game version that the tester has played} ## Playtime {How long the tester has been playing the game} ## Played Platform {Which platform the tester had played} ## Quantitative Survey 1. What do you think of the visuals of the game? (0 ~ 10) 2. What do you think of the controls of the game? (0 ~ 10) 3. How was the balance of the game? (0 ~ 10) 4. What do you think of the overall game mechanics? (0 ~ 10) 5. What do you think of the overall map design of the game? (0 ~ 10) 6. What do you think of the overall experience of the game? (0 ~ 10) ## Qualitative Questionnaire 1. What was the most frustrating moment or aspect of this game? 2. What was your favorite moment or aspect of this game? 3. What did you think of the controls of the game? 4. Did you have troubles navigating through the menus? 5. Was there anything you wanted to do that that the game didn't allow you to do or couldn't do for any reason? 6. Was there a game mechanic or item that you particularly liked? 7. Was there any performance issue for errors within the game? 8. What are some of the mechanics or features that you would remove from the game? 9. What did you find yourself do repeatedly within the game if any? 10. How would you describe this game to your friends and family? ### Other notes about the experience (optional) Preventing Merge Conflicts When using Git for version controlling game projects, the team will definitely encounter several critical conflicts. This generally stems from the following reasons: Too much noise - most heavy game engines will create a lot of meta files for various reasons. This is always automatically generated by the engine, which makes it hard to predict how it is going to change. Furthermore, this will clog up the changed file list for each commit and pulls which makes reviewing hard. Too many different file types - most engines will use their custom file types for managing game objects or settings. Sometimes this will result in files being treated as binaries rather than code. Most cases these are just markup languages with a special file extension, but this still makes it hard for developers to review other's code. Large files - not completely related to merge conflicts, but using large media files like .wav or .png makes syncing and merge a time consuming process. So how can we prevent merge conflicts when working with a huge number of team? There is no single solution for this, but we can come up with commit standards to ensure that we can avoid critical errors. The following guide will be based on using Unity with Github Work on a new scene - if you are adding a new feature or item, create a new scene or duplicate one of the existing scenes and only work on that. This ensures that no scene conflicts will ever happen. Only focus on your feature - not limited to game development, but for any collaborative working environment, it is best to only stick on your feature and not try to work on something that is not related to it. Create/override prefabs - always make a prefab for game objects that will be used throughout multiple scenes. Furthermore, before committing to the repo, do not forget to update your prefab."
  },
  "manual/project-code-structure.html": {
    "href": "manual/project-code-structure.html",
    "title": "Project Code Structure | Catch.io Dev Doc",
    "keywords": "Project Code Structure This chapter will discuss about the file structure of this project and how the project should be organized. Because of how game development works, this chapter will change depending on what type of assets we add to the game. In such situation, please update this doc to the corresponding changes so no one is confused to where things are stored. Core Folder Types This project will have the following core folder types: Audio - contains every assets that is in a audio format like background music, in-game sound effects, UI sound effects, background sound, etc. Editor - C# scripts that are specifically made for the Unity Editor to support development. Game-affecting logic does not belong in this folder. Gizmos - Similar to the Editor folder, this folder will contain all visual assets that are used for the editor, like inspector icons or other visual indicators. Materials - Contains all material assets (in the format of .mat ) that are used in the game. Plugins - Third-party libraries from the Unity Asset Store or helper scripts that does not change frequently and is compatible with other Unity projects should be stored in this folder. Resources - contains all game object resources like object prefabs, rule tiles, scritable objects, etc. Scenes - games scene will be in this folder Scripts - every script that is directly made for the project belongs in this folder. Shaders - shader files will be in this folder. Textures - every 2D image files will be in this folder. This include tile map, character sprite, UI elements, etc. TilePalettes - tile map palettes are stored in the folder Structuring Code General Structure It is recommended that all scripts are Duck-typed (use logical naming and inheritance for all scripts that requires future expandability) and use inheritance to neatly wrap the function of each component. This means that scripts with similar functionality should be wrapped with a parent class that inherits from MonoBehaviour (or another class that inherits from it like MonoBehaviourPun ). The same logic will apply to folder structuring as well. Interacting with the UI In Unity, scene elements and the code are kept separate, as they only communicate through an event callback. So scenes that requires user interaction through UI elements must have a scene manager or a UI handler object of sort. To increase code scalability, the HUD or menu UI objects should be kept separated from the backend logic that handles the data for UI to display. Instead, allow the UI controller script to interact with the scene objects and relay the user input into a handler script. This can resemble a simplified version of the MVC pattern. In this model, the UI behavior script and the scene manager script should be in the same game object so that the manager script can access the UI behavior script via .GetComponent<T>(); . Folder Structure Because the project source code is expected to grow and change with every new feature added to the game, it won't be practical trying to limit the number of code sub-folders in the game. Instead, this section will define the categories of the source code that we expect to be bundled in a folder. A single category can be split into multiple folders, or sub-folders when needed. It is good to keep the actual name of the folder should be descriptive enough for people to understand, but this document will not try to come up with any as we want the developers to change the name or add more when they have to. Folders should be kept flexible and descriptive. Furthermore, developers should keep all components and data types on a separate script and try to group all similar codes into a folder. If a component behavior script becomes hard to categorize into a single folder even though they share similar characteristics, let it inherent from a parent class that implements those behaviors and place the child script into their own folders that best describes them. Because all game-related .cs files are expected to be stored inside the Assets/Scripts/ folder, the code category listed below will describe the general folder structure inside the Scripts/ folder and no where else. This means the following definitions will not be applicable to codes inside Editor/ or Plugins/ folder. Core classes - The core types and components that are used to build other game components. Everything in this category are not expected to be used directly in the game. Instead, they should be the template for creating new components. This will also include custom types that does not inherit from anything. UI controller classes - Components specifically for controlling the UI or in-game HUD. Most, if not all of them should have using UnityEngine.UI; in one way or another. Interfaces/Enums/Struct - It is best to keep all the interface, enum, data structure code into a separate folder, as it allows the team to understand what interfaces are written by us and which ones are from a 3rd party library. Utility classes - These classes are static functions that is only used to prevent writing the same method inside a component over and over again. Scripts in this category are expected to be used throughout different components without any dependency issue. Map prop classes - All components that are used for environmental objects but is not directly controlled by the player should be kept in the same folder. For example, a script for opening a door. Sound manager classes - Sound (music and SFX) is a crucial game play aspect for Catch.io, so we can expect many separate scripts that handles this logic. Controllable object classes - All scripts and components that are meant to be directly controlled by the client (aka, the player components) should be kept in the same folder. These should not be confused with the UI controller classes, as those are independent from the player object. Game manager classes - Components that are meant to handle the backend processing of a scene will be organized into its own folder."
  },
  "manual/project-naming-scheme.html": {
    "href": "manual/project-naming-scheme.html",
    "title": "Project Naming Schemes | Catch.io Dev Doc",
    "keywords": "Project Naming Schemes This section will discuss about the naming convention of code, files, github branches, etc. If you find any files with inconsistent naming, please fix them accordingly. C# Naming Conventions Because Unity uses C# as its preferred language, the standard C# naming conventions will be used within this project. This scheme will apply to C# script names as well. For further details regarding C# coding conventions, please refer to this document . Everything else will mostly be kept consistent with Unity/C# conventions, but for this project, we will not be having the m_ prefix for component variables in Unity. Namespaces All C# scripts that are inside the Assets/Scripts folder must have a namespace to it. The namespace should be CatchIo.<folder name> , where the <folder name> is replaced with the folder that the script is in. Unity Asset Names Every assets used within the Unity engine will use the Upper Camel Case (ex: MainCharacter.prefab or GrassLandTileSet.png ). These assets include everything from tile maps, sprites, object prefabs, shaders, etc. Scene names should be in Camel Case as well as well as items within the scenes too. It's discouraged to uses spaces for game object names, but not mandatory as there are some generated objects that does include a space in the name (ex: Main Camera )."
  }
}
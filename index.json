{
  "api/CatchIo.Camera.CameraTargetMovement.html": {
    "href": "api/CatchIo.Camera.CameraTargetMovement.html",
    "title": "Class CameraTargetMovement | Catch.io Developer Reference",
    "keywords": "Class CameraTargetMovement Camera movement logic to make view transition smooth. This object should be a child of the main camera object. Inheritance Object CameraTargetMovement Namespace : CatchIo.Camera Assembly : cs.temp.dll.dll Syntax public class CameraTargetMovement : MonoBehaviour Fields ClampXDistance Clamp X distance for the smooth effect Declaration public float ClampXDistance Field Value Type Description Single ClampYDistance Clamp Y distance of the smooth effect Declaration public float ClampYDistance Field Value Type Description Single Methods Move(UnityEngine.Camera, GameObject) Smoothly move the given game camera object's view based on the player's direction input. Declaration public void Move(UnityEngine.Camera mainCamera, GameObject objectToFollow) Parameters Type Name Description UnityEngine.Camera mainCamera GameObject objectToFollow"
  },
  "api/CatchIo.Camera.GameCamera.html": {
    "href": "api/CatchIo.Camera.GameCamera.html",
    "title": "Class GameCamera | Catch.io Developer Reference",
    "keywords": "Class GameCamera The main camera class for in-game camera movements. By passing the player object as its member, this object will initialize all the camera setup and follow the provided player. There should only be one instance of this object per scene. Inheritance Object GameCamera Namespace : CatchIo.Camera Assembly : cs.temp.dll.dll Syntax public class GameCamera : MonoBehaviour Properties Camera Declaration public UnityEngine.Camera Camera { get; } Property Value Type Description UnityEngine.Camera Methods SetFollowingTarget(GameObject) Declaration public void SetFollowingTarget(GameObject followingTarget) Parameters Type Name Description GameObject followingTarget SetUp() Declaration public void SetUp()"
  },
  "api/CatchIo.Camera.html": {
    "href": "api/CatchIo.Camera.html",
    "title": "Namespace CatchIo.Camera | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.Camera Classes CameraTargetMovement Camera movement logic to make view transition smooth. This object should be a child of the main camera object. GameCamera The main camera class for in-game camera movements. By passing the player object as its member, this object will initialize all the camera setup and follow the provided player. There should only be one instance of this object per scene. LobbyCamera"
  },
  "api/CatchIo.Camera.LobbyCamera.html": {
    "href": "api/CatchIo.Camera.LobbyCamera.html",
    "title": "Class LobbyCamera | Catch.io Developer Reference",
    "keywords": "Class LobbyCamera Inheritance Object LobbyCamera Namespace : CatchIo.Camera Assembly : cs.temp.dll.dll Syntax public class LobbyCamera : MonoBehaviour Properties Camera Declaration public UnityEngine.Camera Camera { get; } Property Value Type Description UnityEngine.Camera Methods SetupCamera() Basically this SetupCamera function is simmilar with the GameCamera.cs Declaration public void SetupCamera()"
  },
  "api/CatchIo.CharacterBuff.Buff.html": {
    "href": "api/CatchIo.CharacterBuff.Buff.html",
    "title": "Class Buff | Catch.io Developer Reference",
    "keywords": "Class Buff Inheritance Object Buff HealthBuff StaminaBuff Namespace : CatchIo.CharacterBuff Assembly : cs.temp.dll.dll Syntax public abstract class Buff : ScriptableObject Methods Assign(CharacterStatus) Declaration public abstract void Assign(CharacterStatus status) Parameters Type Name Description CharacterStatus status"
  },
  "api/CatchIo.CharacterBuff.HealthBuff.html": {
    "href": "api/CatchIo.CharacterBuff.HealthBuff.html",
    "title": "Class HealthBuff | Catch.io Developer Reference",
    "keywords": "Class HealthBuff Inheritance Object Buff HealthBuff Namespace : CatchIo.CharacterBuff Assembly : cs.temp.dll.dll Syntax public class HealthBuff : Buff Fields HealthAmount Declaration public float HealthAmount Field Value Type Description Single Methods Assign(CharacterStatus) Declaration public override void Assign(CharacterStatus status) Parameters Type Name Description CharacterStatus status Overrides Buff.Assign(CharacterStatus)"
  },
  "api/CatchIo.CharacterBuff.html": {
    "href": "api/CatchIo.CharacterBuff.html",
    "title": "Namespace CatchIo.CharacterBuff | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.CharacterBuff Classes Buff HealthBuff StaminaBuff"
  },
  "api/CatchIo.CharacterBuff.StaminaBuff.html": {
    "href": "api/CatchIo.CharacterBuff.StaminaBuff.html",
    "title": "Class StaminaBuff | Catch.io Developer Reference",
    "keywords": "Class StaminaBuff Inheritance Object Buff StaminaBuff Namespace : CatchIo.CharacterBuff Assembly : cs.temp.dll.dll Syntax public class StaminaBuff : Buff Fields StaminaAmount Declaration public float StaminaAmount Field Value Type Description Single Methods Assign(CharacterStatus) Declaration public override void Assign(CharacterStatus status) Parameters Type Name Description CharacterStatus status Overrides Buff.Assign(CharacterStatus)"
  },
  "api/CatchIo.Core.GuiBehavior.html": {
    "href": "api/CatchIo.Core.GuiBehavior.html",
    "title": "Class GuiBehavior | Catch.io Developer Reference",
    "keywords": "Class GuiBehavior Base class used for components that has to work with scene UI elements and their behaviors. Inheritance Object GuiBehavior Namespace : CatchIo.Core Assembly : cs.temp.dll.dll Syntax public abstract class GuiBehavior : MonoBehaviour"
  },
  "api/CatchIo.Core.html": {
    "href": "api/CatchIo.Core.html",
    "title": "Namespace CatchIo.Core | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.Core Classes GuiBehavior Base class used for components that has to work with scene UI elements and their behaviors. NetworkCallback Base class for manager scripts that works with PUN callbacks. This script is not meant to be used as a component, rather, other game managers are expected to inherit from this class."
  },
  "api/CatchIo.Core.NetworkCallback.html": {
    "href": "api/CatchIo.Core.NetworkCallback.html",
    "title": "Class NetworkCallback | Catch.io Developer Reference",
    "keywords": "Class NetworkCallback Base class for manager scripts that works with PUN callbacks. This script is not meant to be used as a component, rather, other game managers are expected to inherit from this class. Inheritance Object NetworkCallback Namespace : CatchIo.Core Assembly : cs.temp.dll.dll Syntax public class NetworkCallback : MonoBehaviourPunCallbacks Fields GameVersion This client's version number. Users are separated from each other by gameVersion (which allows you to make breaking changes). Declaration public string GameVersion Field Value Type Description String Methods OnCreateRoomFailed(Int16, String) Declaration public override void OnCreateRoomFailed(short returnCode, string message) Parameters Type Name Description Int16 returnCode String message OnDisconnected(DisconnectCause) Declaration public override void OnDisconnected(DisconnectCause cause) Parameters Type Name Description DisconnectCause cause OnJoinRoomFailed(Int16, String) Declaration public override void OnJoinRoomFailed(short returnCode, string message) Parameters Type Name Description Int16 returnCode String message"
  },
  "api/CatchIo.Deployable.html": {
    "href": "api/CatchIo.Deployable.html",
    "title": "Namespace CatchIo.Deployable | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.Deployable Classes TrapObject This class implements the behavior for the TrapObject. It stores HP for the TrapObject and allows it to be destroyed by player attacks. It also sets parameters in the Animation Controller."
  },
  "api/CatchIo.Deployable.TrapObject.html": {
    "href": "api/CatchIo.Deployable.TrapObject.html",
    "title": "Class TrapObject | Catch.io Developer Reference",
    "keywords": "Class TrapObject This class implements the behavior for the TrapObject. It stores HP for the TrapObject and allows it to be destroyed by player attacks. It also sets parameters in the Animation Controller. Inheritance Object TrapObject Implements IHitable Namespace : CatchIo.Deployable Assembly : cs.temp.dll.dll Syntax public class TrapObject : MonoBehaviourPun Fields OverlapCircleOffset Declaration public Vector2 OverlapCircleOffset Field Value Type Description Vector2 OverlapCircleRadius Declaration public float OverlapCircleRadius Field Value Type Description Single Owner Declaration public Character Owner Field Value Type Description Character TargetLayerMask Declaration public LayerMask TargetLayerMask Field Value Type Description LayerMask Properties HealthVal Declaration public float HealthVal { get; } Property Value Type Description Single Methods OnHit(Character, Single) Declaration public void OnHit(Character attacker, float damage) Parameters Type Name Description Character attacker Single damage RPC_SetOwner(Int32) Declaration public void RPC_SetOwner(int viewId) Parameters Type Name Description Int32 viewId RPC_TakeDamage(Single) Declaration public void RPC_TakeDamage(float damage) Parameters Type Name Description Single damage TakeDamage(Single) Declaration public void TakeDamage(float damage) Parameters Type Name Description Single damage Implements IHitable"
  },
  "api/CatchIo.DevUtil.html": {
    "href": "api/CatchIo.DevUtil.html",
    "title": "Namespace CatchIo.DevUtil | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.DevUtil Classes RoomConsoleCommands This class stores custom console commands that can be run within a room. (not in the launcher or menus)"
  },
  "api/CatchIo.DevUtil.RoomConsoleCommands.html": {
    "href": "api/CatchIo.DevUtil.RoomConsoleCommands.html",
    "title": "Class RoomConsoleCommands | Catch.io Developer Reference",
    "keywords": "Class RoomConsoleCommands This class stores custom console commands that can be run within a room. (not in the launcher or menus) Inheritance Object RoomConsoleCommands Namespace : CatchIo.DevUtil Assembly : cs.temp.dll.dll Syntax public class RoomConsoleCommands : MonoBehaviourPun"
  },
  "api/CatchIo.Effects.DisappearEffect.html": {
    "href": "api/CatchIo.Effects.DisappearEffect.html",
    "title": "Class DisappearEffect | Catch.io Developer Reference",
    "keywords": "Class DisappearEffect Inheritance Object EffectBase DisappearEffect Implements ISerializationCallbackReceiver Inherited Members EffectBase.EffectSource EffectBase.Duration EffectBase.EffectPlayable EffectBase.TargetRenderer Namespace : CatchIo.Effects Assembly : cs.temp.dll.dll Syntax public class DisappearEffect : EffectBase Properties Faded Declaration public bool Faded { get; } Property Value Type Description Boolean IsPlaying Declaration public bool IsPlaying { get; } Property Value Type Description Boolean Methods Cancel() Declaration public void Cancel() EffectExecutor() Declaration public override IEnumerator EffectExecutor() Returns Type Description IEnumerator Overrides EffectBase.EffectExecutor() EffectReverser() Declaration public override IEnumerator EffectReverser() Returns Type Description IEnumerator Overrides EffectBase.EffectReverser() OnAfterDeserialize() Declaration public void OnAfterDeserialize() OnBeforeSerialize() Declaration public void OnBeforeSerialize() Play(IEffectPlayable, Renderer) Declaration public override void Play(IEffectPlayable effectPlayable, Renderer renderer) Parameters Type Name Description IEffectPlayable effectPlayable Renderer renderer Overrides EffectBase.Play(IEffectPlayable, Renderer) PlayImmediately() Declaration public void PlayImmediately() Reset() Declaration public void Reset() Reverse(IEffectPlayable, Renderer) Declaration public override void Reverse(IEffectPlayable effectPlayable, Renderer renderer) Parameters Type Name Description IEffectPlayable effectPlayable Renderer renderer Overrides EffectBase.Reverse(IEffectPlayable, Renderer) Implements ISerializationCallbackReceiver"
  },
  "api/CatchIo.Effects.DissolveEffect.html": {
    "href": "api/CatchIo.Effects.DissolveEffect.html",
    "title": "Class DissolveEffect | Catch.io Developer Reference",
    "keywords": "Class DissolveEffect Inheritance Object EffectBase DissolveEffect Inherited Members EffectBase.EffectSource EffectBase.Duration EffectBase.EffectPlayable EffectBase.TargetRenderer EffectBase.Reverse(IEffectPlayable, Renderer) Namespace : CatchIo.Effects Assembly : cs.temp.dll.dll Syntax public class DissolveEffect : EffectBase Methods EffectExecutor() Declaration public override IEnumerator EffectExecutor() Returns Type Description IEnumerator Overrides EffectBase.EffectExecutor() EffectReverser() Declaration public override IEnumerator EffectReverser() Returns Type Description IEnumerator Overrides EffectBase.EffectReverser() Play(IEffectPlayable, Renderer) Declaration public override void Play(IEffectPlayable effectPlayable, Renderer renderer) Parameters Type Name Description IEffectPlayable effectPlayable Renderer renderer Overrides EffectBase.Play(IEffectPlayable, Renderer)"
  },
  "api/CatchIo.Effects.EffectBase.html": {
    "href": "api/CatchIo.Effects.EffectBase.html",
    "title": "Class EffectBase | Catch.io Developer Reference",
    "keywords": "Class EffectBase Base scriptable object related to effect materials. Inheritance Object EffectBase DisappearEffect DissolveEffect Namespace : CatchIo.Effects Assembly : cs.temp.dll.dll Syntax public abstract class EffectBase : ScriptableObject Fields Duration Declaration public float Duration Field Value Type Description Single EffectPlayable Declaration protected IEffectPlayable EffectPlayable Field Value Type Description IEffectPlayable EffectSource Declaration public Material EffectSource Field Value Type Description Material TargetRenderer Declaration protected Renderer TargetRenderer Field Value Type Description Renderer Methods EffectExecutor() Declaration public abstract IEnumerator EffectExecutor() Returns Type Description IEnumerator EffectReverser() Declaration public abstract IEnumerator EffectReverser() Returns Type Description IEnumerator Play(IEffectPlayable, Renderer) Declaration public virtual void Play(IEffectPlayable effectPlayable, Renderer renderer) Parameters Type Name Description IEffectPlayable effectPlayable Renderer renderer Reverse(IEffectPlayable, Renderer) Declaration public virtual void Reverse(IEffectPlayable effectPlayable, Renderer renderer) Parameters Type Name Description IEffectPlayable effectPlayable Renderer renderer"
  },
  "api/CatchIo.Effects.html": {
    "href": "api/CatchIo.Effects.html",
    "title": "Namespace CatchIo.Effects | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.Effects Classes DisappearEffect DissolveEffect EffectBase Base scriptable object related to effect materials. SoundWaveEffect Interfaces IEffectPlayable Interface inherited by objects that contains a playable effect."
  },
  "api/CatchIo.Effects.IEffectPlayable.html": {
    "href": "api/CatchIo.Effects.IEffectPlayable.html",
    "title": "Interface IEffectPlayable | Catch.io Developer Reference",
    "keywords": "Interface IEffectPlayable Interface inherited by objects that contains a playable effect. Namespace : CatchIo.Effects Assembly : cs.temp.dll.dll Syntax public interface IEffectPlayable Methods EffectSequence(EffectBase) Declaration IEnumerator EffectSequence(EffectBase effect) Parameters Type Name Description EffectBase effect Returns Type Description IEnumerator ExecuteEffect(EffectBase) Declaration void ExecuteEffect(EffectBase effect) Parameters Type Name Description EffectBase effect OnEndEffect(EffectBase) Declaration void OnEndEffect(EffectBase effect) Parameters Type Name Description EffectBase effect ReverseEffect(EffectBase) Declaration void ReverseEffect(EffectBase effect) Parameters Type Name Description EffectBase effect"
  },
  "api/CatchIo.Effects.SoundWaveEffect.html": {
    "href": "api/CatchIo.Effects.SoundWaveEffect.html",
    "title": "Class SoundWaveEffect | Catch.io Developer Reference",
    "keywords": "Class SoundWaveEffect Inheritance Object SoundWaveEffect Namespace : CatchIo.Effects Assembly : cs.temp.dll.dll Syntax public class SoundWaveEffect : MonoBehaviour Methods CreateSoundWave(Vector3, Single) Declaration public static void CreateSoundWave(Vector3 createdPos, float duration) Parameters Type Name Description Vector3 createdPos Single duration"
  },
  "api/CatchIo.Enums.CharacterClassType.html": {
    "href": "api/CatchIo.Enums.CharacterClassType.html",
    "title": "Enum CharacterClassType | Catch.io Developer Reference",
    "keywords": "Enum CharacterClassType Namespace : CatchIo.Enums Assembly : cs.temp.dll.dll Syntax public enum CharacterClassType Fields Name Description Druid Last Pyro"
  },
  "api/CatchIo.Enums.GameModeType.html": {
    "href": "api/CatchIo.Enums.GameModeType.html",
    "title": "Enum GameModeType | Catch.io Developer Reference",
    "keywords": "Enum GameModeType Namespace : CatchIo.Enums Assembly : cs.temp.dll.dll Syntax public enum GameModeType Fields Name Description DeathMatch Sandbox"
  },
  "api/CatchIo.Enums.html": {
    "href": "api/CatchIo.Enums.html",
    "title": "Namespace CatchIo.Enums | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.Enums Enums CharacterClassType GameModeType MenuScenes"
  },
  "api/CatchIo.Enums.MenuScenes.html": {
    "href": "api/CatchIo.Enums.MenuScenes.html",
    "title": "Enum MenuScenes | Catch.io Developer Reference",
    "keywords": "Enum MenuScenes Namespace : CatchIo.Enums Assembly : cs.temp.dll.dll Syntax public enum MenuScenes Fields Name Description Launcher MenuLobby"
  },
  "api/CatchIo.Environment.CharacterSpawner.html": {
    "href": "api/CatchIo.Environment.CharacterSpawner.html",
    "title": "Class CharacterSpawner | Catch.io Developer Reference",
    "keywords": "Class CharacterSpawner Inheritance Object CharacterSpawner Implements IOnEventCallback Namespace : CatchIo.Environment Assembly : cs.temp.dll.dll Syntax public class CharacterSpawner : MonoBehaviourPunCallbacks Methods AddSpawnPoint(CharacterSpawner.SpawnPoint) Declaration public void AddSpawnPoint(CharacterSpawner.SpawnPoint point) Parameters Type Name Description CharacterSpawner.SpawnPoint point GetRandomSpawnPoint() Declaration public Vector3 GetRandomSpawnPoint() Returns Type Description Vector3 GetRandomSpawnPointInCircle() Declaration public Vector3 GetRandomSpawnPointInCircle() Returns Type Description Vector3 OnEvent(EventData) Declaration public void OnEvent(EventData photonEvent) Parameters Type Name Description EventData photonEvent Implements IOnEventCallback"
  },
  "api/CatchIo.Environment.CharacterSpawner.SpawnPoint.html": {
    "href": "api/CatchIo.Environment.CharacterSpawner.SpawnPoint.html",
    "title": "Class CharacterSpawner.SpawnPoint | Catch.io Developer Reference",
    "keywords": "Class CharacterSpawner.SpawnPoint Inheritance Object CharacterSpawner.SpawnPoint Namespace : CatchIo.Environment Assembly : cs.temp.dll.dll Syntax [Serializable] public class SpawnPoint Fields maxPlayerCount Declaration public int maxPlayerCount Field Value Type Description Int32 radius Declaration public float radius Field Value Type Description Single transform Declaration public Transform transform Field Value Type Description Transform usedCount Declaration public int usedCount Field Value Type Description Int32"
  },
  "api/CatchIo.Environment.HidingSpot.html": {
    "href": "api/CatchIo.Environment.HidingSpot.html",
    "title": "Class HidingSpot | Catch.io Developer Reference",
    "keywords": "Class HidingSpot Inheritance Object HidingSpot Namespace : CatchIo.Environment Assembly : cs.temp.dll.dll Syntax public class HidingSpot : MonoBehaviour Fields UseSpriteVertices Declaration public bool UseSpriteVertices Field Value Type Description Boolean Properties IsEnabled Declaration public bool IsEnabled { get; } Property Value Type Description Boolean PivotY Declaration public float PivotY { get; } Property Value Type Description Single Vertices Declaration public List<Vector2> Vertices { get; } Property Value Type Description List < Vector2 > Methods AddCharacter(Character) Declaration public void AddCharacter(Character character) Parameters Type Name Description Character character Disable() Declaration public void Disable() Enable() Declaration public void Enable() RemoveCharacter(Character) Declaration public void RemoveCharacter(Character character) Parameters Type Name Description Character character SetHidingSpot() Set hiding spot. ( add automatically sprite mask to child ) Declaration public void SetHidingSpot()"
  },
  "api/CatchIo.Environment.html": {
    "href": "api/CatchIo.Environment.html",
    "title": "Namespace CatchIo.Environment | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.Environment Classes CharacterSpawner CharacterSpawner.SpawnPoint HidingSpot ReadableTileSurface Structs TileSurface"
  },
  "api/CatchIo.Environment.ReadableTileSurface.html": {
    "href": "api/CatchIo.Environment.ReadableTileSurface.html",
    "title": "Class ReadableTileSurface | Catch.io Developer Reference",
    "keywords": "Class ReadableTileSurface Inheritance Object ReadableTileSurface Namespace : CatchIo.Environment Assembly : cs.temp.dll.dll Syntax public class ReadableTileSurface : MonoBehaviour Properties SurfaceData Declaration public TileSurface SurfaceData { get; } Property Value Type Description TileSurface Methods GetSurfaceData(Vector2) Declaration public TileSurface? GetSurfaceData(Vector2 pos) Parameters Type Name Description Vector2 pos Returns Type Description Nullable < TileSurface > SetSurfaceData(TileSurface) Declaration public void SetSurfaceData(TileSurface tileSurface) Parameters Type Name Description TileSurface tileSurface"
  },
  "api/CatchIo.Environment.TileSurface.html": {
    "href": "api/CatchIo.Environment.TileSurface.html",
    "title": "Struct TileSurface | Catch.io Developer Reference",
    "keywords": "Struct TileSurface Namespace : CatchIo.Environment Assembly : cs.temp.dll.dll Syntax [Serializable] public struct TileSurface Constructors TileSurface(String, Single, Boolean) Declaration public TileSurface(string terrain, float volume, bool leavesMark) Parameters Type Name Description String terrain Single volume Boolean leavesMark Fields LeavesMark Declaration public bool LeavesMark Field Value Type Description Boolean Terrain Declaration public string Terrain Field Value Type Description String Volume Declaration public float Volume Field Value Type Description Single"
  },
  "api/CatchIo.GameMode.CursedOneGameMode.html": {
    "href": "api/CatchIo.GameMode.CursedOneGameMode.html",
    "title": "Class CursedOneGameMode | Catch.io Developer Reference",
    "keywords": "Class CursedOneGameMode Inheritance Object GameMode CursedOneGameMode Inherited Members GameMode.Type GameMode.MaxPlayerCount GameMode.CharacterStatus GameMode.PreloadingTime GameMode.GameDuration GameMode.CanSpawnItem GameMode.CanRespawn GameMode.RespawnDelayTime GameMode._pointSystem GameMode._preloadTimer GameMode._gameModeTimer GameMode.GameModeCurrentTime GameMode.ViewIdToCharacterMap GameMode.PlayerBuffs GameMode.OnGameModeStart GameMode.OnGameModeStop GameMode.OnGameModeEnd GameMode.OnCharacterKilled GameMode.OnCharacterTrapped GameMode.OnCharacterDead GameMode.Initialize() GameMode.UpdateGameMode(Single) GameMode.RespawnCharacter(Int32) GameMode.OnGameModeStarted() GameMode.GetGameModeInstance(String) Namespace : CatchIo.GameMode Assembly : cs.temp.dll.dll Syntax public class CursedOneGameMode : GameMode Methods GetPointSystem() Declaration public override PointSystem GetPointSystem() Returns Type Description PointSystem Overrides GameMode.GetPointSystem() GetWinner() Declaration public override Character GetWinner() Returns Type Description Character Overrides GameMode.GetWinner() OnGameModeFinished() Declaration protected override void OnGameModeFinished() Overrides GameMode.OnGameModeFinished() OnGameModeStopped() Declaration protected override void OnGameModeStopped() Overrides GameMode.OnGameModeStopped()"
  },
  "api/CatchIo.GameMode.DeathMatchGameMode.html": {
    "href": "api/CatchIo.GameMode.DeathMatchGameMode.html",
    "title": "Class DeathMatchGameMode | Catch.io Developer Reference",
    "keywords": "Class DeathMatchGameMode Inheritance Object GameMode DeathMatchGameMode Inherited Members GameMode.Type GameMode.MaxPlayerCount GameMode.CharacterStatus GameMode.PreloadingTime GameMode.GameDuration GameMode.CanSpawnItem GameMode.CanRespawn GameMode.RespawnDelayTime GameMode._pointSystem GameMode._preloadTimer GameMode._gameModeTimer GameMode.GameModeCurrentTime GameMode.ViewIdToCharacterMap GameMode.PlayerBuffs GameMode.OnGameModeStart GameMode.OnGameModeStop GameMode.OnGameModeEnd GameMode.OnCharacterKilled GameMode.OnCharacterTrapped GameMode.OnCharacterDead GameMode.Initialize() GameMode.UpdateGameMode(Single) GameMode.RespawnCharacter(Int32) GameMode.OnGameModeStarted() GameMode.GetPointSystem() GameMode.GetGameModeInstance(String) Namespace : CatchIo.GameMode Assembly : cs.temp.dll.dll Syntax public class DeathMatchGameMode : GameMode Methods GetWinner() Declaration public override Character GetWinner() Returns Type Description Character Overrides GameMode.GetWinner() OnGameModeFinished() Declaration protected override void OnGameModeFinished() Overrides GameMode.OnGameModeFinished() OnGameModeStopped() Declaration protected override void OnGameModeStopped() Overrides GameMode.OnGameModeStopped()"
  },
  "api/CatchIo.GameMode.GameMode.html": {
    "href": "api/CatchIo.GameMode.GameMode.html",
    "title": "Class GameMode | Catch.io Developer Reference",
    "keywords": "Class GameMode Inheritance Object GameMode CursedOneGameMode DeathMatchGameMode SandboxGameMode Namespace : CatchIo.GameMode Assembly : cs.temp.dll.dll Syntax public abstract class GameMode : ScriptableObject Fields _gameModeTimer Declaration protected readonly Timer _gameModeTimer Field Value Type Description Timer _pointSystem Declaration protected PointSystem _pointSystem Field Value Type Description PointSystem _preloadTimer Declaration protected readonly Timer _preloadTimer Field Value Type Description Timer CanRespawn Declaration public bool CanRespawn Field Value Type Description Boolean CanSpawnItem Declaration public bool CanSpawnItem Field Value Type Description Boolean CharacterStatus Declaration public CharacterStatus CharacterStatus Field Value Type Description CharacterStatus GameDuration Declaration public float GameDuration Field Value Type Description Single MaxPlayerCount Declaration public int MaxPlayerCount Field Value Type Description Int32 OnCharacterDead Declaration public Action<int> OnCharacterDead Field Value Type Description Action < Int32 > OnCharacterKilled Declaration public Action<int> OnCharacterKilled Field Value Type Description Action < Int32 > OnCharacterTrapped Declaration public Action<int> OnCharacterTrapped Field Value Type Description Action < Int32 > OnGameModeEnd Declaration public Action OnGameModeEnd Field Value Type Description Action OnGameModeStart Declaration public Action OnGameModeStart Field Value Type Description Action OnGameModeStop Declaration public Action OnGameModeStop Field Value Type Description Action PlayerBuffs Declaration public List<Buff> PlayerBuffs Field Value Type Description List < Buff > PreloadingTime Declaration public float PreloadingTime Field Value Type Description Single RespawnDelayTime Declaration public float RespawnDelayTime Field Value Type Description Single Type Declaration public GameModeType Type Field Value Type Description GameModeType ViewIdToCharacterMap Declaration public Dictionary<int, Character> ViewIdToCharacterMap Field Value Type Description Dictionary < Int32 , Character > Properties GameModeCurrentTime Declaration public float GameModeCurrentTime { get; } Property Value Type Description Single Methods GetGameModeInstance(String) Declaration public static GameMode GetGameModeInstance(string modeName) Parameters Type Name Description String modeName Returns Type Description GameMode GetPointSystem() Declaration public virtual PointSystem GetPointSystem() Returns Type Description PointSystem GetWinner() Declaration public abstract Character GetWinner() Returns Type Description Character Initialize() Declaration public virtual void Initialize() OnGameModeFinished() Declaration protected virtual void OnGameModeFinished() OnGameModeStarted() Declaration protected virtual void OnGameModeStarted() OnGameModeStopped() Declaration protected abstract void OnGameModeStopped() RespawnCharacter(Int32) Declaration public void RespawnCharacter(int viewId) Parameters Type Name Description Int32 viewId UpdateGameMode(Single) Declaration public void UpdateGameMode(float deltaTime) Parameters Type Name Description Single deltaTime"
  },
  "api/CatchIo.GameMode.html": {
    "href": "api/CatchIo.GameMode.html",
    "title": "Namespace CatchIo.GameMode | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.GameMode Classes CursedOneGameMode DeathMatchGameMode GameMode PointSystem SandboxGameMode"
  },
  "api/CatchIo.GameMode.PointSystem.html": {
    "href": "api/CatchIo.GameMode.PointSystem.html",
    "title": "Class PointSystem | Catch.io Developer Reference",
    "keywords": "Class PointSystem Inheritance Object PointSystem Namespace : CatchIo.GameMode Assembly : cs.temp.dll.dll Syntax public class PointSystem : ScriptableObject Fields BeTrappedPoint Declaration public int BeTrappedPoint Field Value Type Description Int32 DeathPoint Declaration public int DeathPoint Field Value Type Description Int32 KillPoint Declaration public int KillPoint Field Value Type Description Int32 TrapPoint Declaration public int TrapPoint Field Value Type Description Int32 Methods CalculatePoint() Declaration public void CalculatePoint()"
  },
  "api/CatchIo.GameMode.SandboxGameMode.html": {
    "href": "api/CatchIo.GameMode.SandboxGameMode.html",
    "title": "Class SandboxGameMode | Catch.io Developer Reference",
    "keywords": "Class SandboxGameMode Inheritance Object GameMode SandboxGameMode Inherited Members GameMode.Type GameMode.MaxPlayerCount GameMode.CharacterStatus GameMode.PreloadingTime GameMode.GameDuration GameMode.CanSpawnItem GameMode.CanRespawn GameMode.RespawnDelayTime GameMode._pointSystem GameMode._preloadTimer GameMode._gameModeTimer GameMode.GameModeCurrentTime GameMode.ViewIdToCharacterMap GameMode.PlayerBuffs GameMode.OnGameModeStart GameMode.OnGameModeStop GameMode.OnGameModeEnd GameMode.OnCharacterKilled GameMode.OnCharacterTrapped GameMode.OnCharacterDead GameMode.Initialize() GameMode.UpdateGameMode(Single) GameMode.RespawnCharacter(Int32) GameMode.OnGameModeStarted() GameMode.GetPointSystem() GameMode.GetGameModeInstance(String) Namespace : CatchIo.GameMode Assembly : cs.temp.dll.dll Syntax public class SandboxGameMode : GameMode Methods GetWinner() Declaration public override Character GetWinner() Returns Type Description Character Overrides GameMode.GetWinner() OnGameModeFinished() Declaration protected override void OnGameModeFinished() Overrides GameMode.OnGameModeFinished() OnGameModeStopped() Declaration protected override void OnGameModeStopped() Overrides GameMode.OnGameModeStopped()"
  },
  "api/CatchIo.GeneralBehavior.html": {
    "href": "api/CatchIo.GeneralBehavior.html",
    "title": "Namespace CatchIo.GeneralBehavior | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.GeneralBehavior Classes NetworkDestroyTimer Network destroy the attached game object after X time requires the object to have a photonview"
  },
  "api/CatchIo.GeneralBehavior.NetworkDestroyTimer.html": {
    "href": "api/CatchIo.GeneralBehavior.NetworkDestroyTimer.html",
    "title": "Class NetworkDestroyTimer | Catch.io Developer Reference",
    "keywords": "Class NetworkDestroyTimer Network destroy the attached game object after X time requires the object to have a photonview Inheritance Object NetworkDestroyTimer Namespace : CatchIo.GeneralBehavior Assembly : cs.temp.dll.dll Syntax public class NetworkDestroyTimer : MonoBehaviourPun Fields timeUntilDestroy Declaration public float timeUntilDestroy Field Value Type Description Single"
  },
  "api/CatchIo.Helpers.AnimationParser.html": {
    "href": "api/CatchIo.Helpers.AnimationParser.html",
    "title": "Class AnimationParser | Catch.io Developer Reference",
    "keywords": "Class AnimationParser Inheritance Object AnimationParser Namespace : CatchIo.Helpers Assembly : cs.temp.dll.dll Syntax public static class AnimationParser Methods MapAnimationToActionState(IEnumerable<AnimationClip>) Declaration public static Dictionary<CharacterActionState, StateAnimation> MapAnimationToActionState(IEnumerable<AnimationClip> clips) Parameters Type Name Description IEnumerable < AnimationClip > clips Returns Type Description Dictionary < CharacterActionState , StateAnimation >"
  },
  "api/CatchIo.Helpers.GizmoHelper.DrawType.html": {
    "href": "api/CatchIo.Helpers.GizmoHelper.DrawType.html",
    "title": "Enum GizmoHelper.DrawType | Catch.io Developer Reference",
    "keywords": "Enum GizmoHelper.DrawType Namespace : CatchIo.Helpers Assembly : cs.temp.dll.dll Syntax public enum DrawType Fields Name Description Line Point"
  },
  "api/CatchIo.Helpers.GizmoHelper.GizmoItem.html": {
    "href": "api/CatchIo.Helpers.GizmoHelper.GizmoItem.html",
    "title": "Class GizmoHelper.GizmoItem | Catch.io Developer Reference",
    "keywords": "Class GizmoHelper.GizmoItem Inheritance Object GizmoHelper.GizmoItem Namespace : CatchIo.Helpers Assembly : cs.temp.dll.dll Syntax public class GizmoItem Fields Color Declaration public Color Color Field Value Type Description Color DrawedTime Declaration public float DrawedTime Field Value Type Description Single Duration Declaration public float Duration Field Value Type Description Single Points Declaration public List<Vector3> Points Field Value Type Description List < Vector3 > Type Declaration public GizmoHelper.DrawType Type Field Value Type Description GizmoHelper.DrawType"
  },
  "api/CatchIo.Helpers.GizmoHelper.html": {
    "href": "api/CatchIo.Helpers.GizmoHelper.html",
    "title": "Class GizmoHelper | Catch.io Developer Reference",
    "keywords": "Class GizmoHelper Inheritance Object GizmoHelper Namespace : CatchIo.Helpers Assembly : cs.temp.dll.dll Syntax public class GizmoHelper : MonoBehaviour Properties Instance Declaration public static GizmoHelper Instance { get; } Property Value Type Description GizmoHelper Methods Awake() Declaration public void Awake() DrawCircle(Vector3, Single, Color, Single) Declaration public void DrawCircle(Vector3 position, float radius, Color color, float duration = 0.5F) Parameters Type Name Description Vector3 position Single radius Color color Single duration DrawCircle(Vector3, Single, Quaternion, Color, Single) Declaration public void DrawCircle(Vector3 position, float radius, Quaternion rotation, Color color, float duration = 0.5F) Parameters Type Name Description Vector3 position Single radius Quaternion rotation Color color Single duration DrawCone(Vector3, Quaternion, Single, Single, Single) Declaration public void DrawCone(Vector3 start, Quaternion rotation, float length, float angle, float duration = 0.5F) Parameters Type Name Description Vector3 start Quaternion rotation Single length Single angle Single duration DrawLine(Vector3, Vector3, Color, Single) Draw Line Declaration public void DrawLine(Vector3 start, Vector3 end, Color color, float duration = 0.5F) Parameters Type Name Description Vector3 start Vector3 end Color color Single duration DrawRectangle(Vector3, Vector2, Single, Color, Single) Draw Rectangle Declaration public void DrawRectangle(Vector3 position, Vector2 half, float radian, Color color, float duration = 0.5F) Parameters Type Name Description Vector3 position Vector2 half Single radian Color color Single duration DrawSphere(Vector3, Single, Color, Single) Declaration public void DrawSphere(Vector3 position, float radius, Color color, float duration = 0.5F) Parameters Type Name Description Vector3 position Single radius Color color Single duration OnDrawGizmos() Declaration public void OnDrawGizmos() SetSingleton(GizmoHelper) Declaration public void SetSingleton(GizmoHelper t) Parameters Type Name Description GizmoHelper t"
  },
  "api/CatchIo.Helpers.html": {
    "href": "api/CatchIo.Helpers.html",
    "title": "Namespace CatchIo.Helpers | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.Helpers Classes AnimationParser GizmoHelper GizmoHelper.GizmoItem PolygonHelper UserInputHelper Structs StateAnimation Enums GizmoHelper.DrawType"
  },
  "api/CatchIo.Helpers.PolygonHelper.html": {
    "href": "api/CatchIo.Helpers.PolygonHelper.html",
    "title": "Class PolygonHelper | Catch.io Developer Reference",
    "keywords": "Class PolygonHelper Inheritance Object PolygonHelper Namespace : CatchIo.Helpers Assembly : cs.temp.dll.dll Syntax public static class PolygonHelper Methods CalculatePolygonArea(List<Vector2>) Declaration public static float CalculatePolygonArea(List<Vector2> vertices) Parameters Type Name Description List < Vector2 > vertices Returns Type Description Single DisplayPolygon(List<Vector2>, Color) Declaration public static void DisplayPolygon(List<Vector2> vertices, Color color) Parameters Type Name Description List < Vector2 > vertices Color color GetClippedPolygonResult(List<Vector2>, List<Vector2>) Declaration public static GreinerHormann.ClipPolygonResult GetClippedPolygonResult(List<Vector2> poly, List<Vector2> clipPoly) Parameters Type Name Description List < Vector2 > poly List < Vector2 > clipPoly Returns Type Description GreinerHormann.ClipPolygonResult GetPolygonVerticesAntiClockwise(List<Vector2>) Declaration public static List<Vector2> GetPolygonVerticesAntiClockwise(List<Vector2> vertices) Parameters Type Name Description List < Vector2 > vertices Returns Type Description List < Vector2 > GetPolygonVerticesClockwise(List<Vector2>) Declaration public static List<Vector2> GetPolygonVerticesClockwise(List<Vector2> vertices) Parameters Type Name Description List < Vector2 > vertices Returns Type Description List < Vector2 >"
  },
  "api/CatchIo.Helpers.StateAnimation.html": {
    "href": "api/CatchIo.Helpers.StateAnimation.html",
    "title": "Struct StateAnimation | Catch.io Developer Reference",
    "keywords": "Struct StateAnimation Namespace : CatchIo.Helpers Assembly : cs.temp.dll.dll Syntax public readonly struct StateAnimation Constructors StateAnimation(String, AnimationClip) Declaration public StateAnimation(string name, AnimationClip clip) Parameters Type Name Description String name AnimationClip clip Fields Clip Declaration public readonly AnimationClip Clip Field Value Type Description AnimationClip Name Declaration public readonly string Name Field Value Type Description String"
  },
  "api/CatchIo.Helpers.UserInputHelper.html": {
    "href": "api/CatchIo.Helpers.UserInputHelper.html",
    "title": "Class UserInputHelper | Catch.io Developer Reference",
    "keywords": "Class UserInputHelper Inheritance Object UserInputHelper Namespace : CatchIo.Helpers Assembly : cs.temp.dll.dll Syntax public static class UserInputHelper Methods GetAimModeButtonInput() Declaration public static bool GetAimModeButtonInput() Returns Type Description Boolean GetAttackInput() Declaration public static bool GetAttackInput() Returns Type Description Boolean GetCrouchingButtonInput() Declaration public static bool GetCrouchingButtonInput() Returns Type Description Boolean GetItemConsumeButton() Declaration public static bool GetItemConsumeButton() Returns Type Description Boolean GetItemSelectInput() Declaration public static int GetItemSelectInput() Returns Type Description Int32 GetItemThrowButton() Declaration public static bool GetItemThrowButton() Returns Type Description Boolean GetMousePosition() Declaration public static Vector2 GetMousePosition() Returns Type Description Vector2 GetMovementDirectionInput() Declaration public static Vector2 GetMovementDirectionInput() Returns Type Description Vector2 GetRunningButtonInput() Declaration public static bool GetRunningButtonInput() Returns Type Description Boolean"
  },
  "api/CatchIo.Inputs.html": {
    "href": "api/CatchIo.Inputs.html",
    "title": "Namespace CatchIo.Inputs | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.Inputs Classes InputReader"
  },
  "api/CatchIo.Inputs.InputReader.html": {
    "href": "api/CatchIo.Inputs.InputReader.html",
    "title": "Class InputReader | Catch.io Developer Reference",
    "keywords": "Class InputReader Inheritance Object InputReader Implements GameInput.IGameplayActions Namespace : CatchIo.Inputs Assembly : cs.temp.dll.dll Syntax public class InputReader : DescriptionBaseSO, GameInput.IGameplayActions Methods EnableGameplayInput() Declaration public void EnableGameplayInput() EnableMenusInput() Declaration public void EnableMenusInput() OnCrouch(InputAction.CallbackContext) Declaration public void OnCrouch(InputAction.CallbackContext context) Parameters Type Name Description InputAction.CallbackContext context Events CrouchCanceledEvent Declaration public event UnityAction CrouchCanceledEvent Event Type Type Description UnityAction CrouchEvent Declaration public event UnityAction CrouchEvent Event Type Type Description UnityAction Implements GameInput.IGameplayActions"
  },
  "api/CatchIo.Items.ConsumableItem.html": {
    "href": "api/CatchIo.Items.ConsumableItem.html",
    "title": "Class ConsumableItem | Catch.io Developer Reference",
    "keywords": "Class ConsumableItem Base class for consumable items. Inheritance Object Item ConsumableItem StaminaPotion Inherited Members Item.Owner Item.Sprite Item.Start() Item.OnPickup(Character) Item.OnDiscard() Item.CanPickup() Namespace : CatchIo.Items Assembly : cs.temp.dll.dll Syntax public abstract class ConsumableItem : Item Methods Consume() Declaration public abstract void Consume()"
  },
  "api/CatchIo.Items.DeployableThrowableItem.html": {
    "href": "api/CatchIo.Items.DeployableThrowableItem.html",
    "title": "Class DeployableThrowableItem | Catch.io Developer Reference",
    "keywords": "Class DeployableThrowableItem This class implements the Trap Rune functionality. It allows the trap rune to be thrown and spawns a TrapObject where it lands. Inheritance Object Item ThrowableItem EvasiveThrowableItem DeployableThrowableItem TrapRune Implements IThrowable Inherited Members ThrowableItem.IsOnFloor ThrowableItem.TrajectoryCurve ThrowableItem.TrajectoryPath ThrowableItem.Rigid2D ThrowableItem.CurrentTrajectoryArc ThrowableItem.HasLanded ThrowableItem.PassedPeak ThrowableItem.ThrewTime ThrowableItem.SpriteRenderer ThrowableItem.UpdateProjectilePath(Vector2, Vector2, Single) ThrowableItem.GetPeakHeight() Item.Owner Item.Sprite Namespace : CatchIo.Items Assembly : cs.temp.dll.dll Syntax public class DeployableThrowableItem : EvasiveThrowableItem Methods CanPickup() Declaration public override bool CanPickup() Returns Type Description Boolean Overrides Item.CanPickup() FixedUpdate() Declaration protected override void FixedUpdate() Overrides ThrowableItem.FixedUpdate() OnBeforeThrow(Vector2, Vector2) Declaration public override void OnBeforeThrow(Vector2 throwPos, Vector2 targetPos) Parameters Type Name Description Vector2 throwPos Vector2 targetPos Overrides ThrowableItem.OnBeforeThrow(Vector2, Vector2) OnDiscard() Declaration public override void OnDiscard() Overrides Item.OnDiscard() OnLanded() Declaration public override void OnLanded() Overrides ThrowableItem.OnLanded() OnPickup(Character) Declaration public override void OnPickup(Character owner) Parameters Type Name Description Character owner Overrides ThrowableItem.OnPickup(Character) OnThrow() Declaration public override void OnThrow() Overrides ThrowableItem.OnThrow() SpawnDeployableObject(Vector3) Declaration protected virtual void SpawnDeployableObject(Vector3 spawnPos) Parameters Type Name Description Vector3 spawnPos Start() Declaration protected override void Start() Overrides ThrowableItem.Start() Implements IThrowable"
  },
  "api/CatchIo.Items.EvasiveThrowableItem.html": {
    "href": "api/CatchIo.Items.EvasiveThrowableItem.html",
    "title": "Class EvasiveThrowableItem | Catch.io Developer Reference",
    "keywords": "Class EvasiveThrowableItem Base class for evasive throwable items. Inheritance Object Item ThrowableItem EvasiveThrowableItem DeployableThrowableItem TeleportRune Implements IThrowable Inherited Members ThrowableItem.IsOnFloor ThrowableItem.TrajectoryCurve ThrowableItem.TrajectoryPath ThrowableItem.Rigid2D ThrowableItem.CurrentTrajectoryArc ThrowableItem.HasLanded ThrowableItem.PassedPeak ThrowableItem.ThrewTime ThrowableItem.SpriteRenderer ThrowableItem.Start() ThrowableItem.FixedUpdate() ThrowableItem.OnBeforeThrow(Vector2, Vector2) ThrowableItem.UpdateProjectilePath(Vector2, Vector2, Single) ThrowableItem.OnLanded() ThrowableItem.OnThrow() ThrowableItem.OnPickup(Character) ThrowableItem.GetPeakHeight() Item.Owner Item.Sprite Item.OnDiscard() Item.CanPickup() Namespace : CatchIo.Items Assembly : cs.temp.dll.dll Syntax public abstract class EvasiveThrowableItem : ThrowableItem Implements IThrowable"
  },
  "api/CatchIo.Items.html": {
    "href": "api/CatchIo.Items.html",
    "title": "Namespace CatchIo.Items | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.Items Classes ConsumableItem Base class for consumable items. DeployableThrowableItem This class implements the Trap Rune functionality. It allows the trap rune to be thrown and spawns a TrapObject where it lands. EvasiveThrowableItem Base class for evasive throwable items. Item Base class for all items. OffensiveThrowableItem Base class for offensive throwable items. This class causes damage if the other player hitted. StaminaPotion This class recovers by HealVal the character when used by the player. Stone High-level implementation for the stone object. TeleportRune This class can teleport to item landed position with teleport dissolve effect. ThrowableItem Base class for all throwable items. If player throwed this object, it will be placed to mouse-position. TrapRune This class implements the Trap Rune functionality."
  },
  "api/CatchIo.Items.Item.html": {
    "href": "api/CatchIo.Items.Item.html",
    "title": "Class Item | Catch.io Developer Reference",
    "keywords": "Class Item Base class for all items. Inheritance Object Item ConsumableItem ThrowableItem Namespace : CatchIo.Items Assembly : cs.temp.dll.dll Syntax public abstract class Item : MonoBehaviour Properties Owner Declaration public Character Owner { get; } Property Value Type Description Character Sprite Declaration public Sprite Sprite { get; } Property Value Type Description Sprite Methods CanPickup() Declaration public virtual bool CanPickup() Returns Type Description Boolean OnDiscard() Declaration public virtual void OnDiscard() OnPickup(Character) Declaration public virtual void OnPickup(Character owner) Parameters Type Name Description Character owner Start() Declaration protected virtual void Start()"
  },
  "api/CatchIo.Items.OffensiveThrowableItem.html": {
    "href": "api/CatchIo.Items.OffensiveThrowableItem.html",
    "title": "Class OffensiveThrowableItem | Catch.io Developer Reference",
    "keywords": "Class OffensiveThrowableItem Base class for offensive throwable items. This class causes damage if the other player hitted. Inheritance Object Item ThrowableItem OffensiveThrowableItem Stone Implements IThrowable Inherited Members ThrowableItem.IsOnFloor ThrowableItem.TrajectoryCurve ThrowableItem.TrajectoryPath ThrowableItem.Rigid2D ThrowableItem.CurrentTrajectoryArc ThrowableItem.HasLanded ThrowableItem.PassedPeak ThrowableItem.ThrewTime ThrowableItem.SpriteRenderer ThrowableItem.Start() ThrowableItem.FixedUpdate() ThrowableItem.OnBeforeThrow(Vector2, Vector2) ThrowableItem.UpdateProjectilePath(Vector2, Vector2, Single) ThrowableItem.OnLanded() ThrowableItem.OnThrow() ThrowableItem.OnPickup(Character) ThrowableItem.GetPeakHeight() Item.Owner Item.Sprite Item.OnDiscard() Item.CanPickup() Namespace : CatchIo.Items Assembly : cs.temp.dll.dll Syntax public abstract class OffensiveThrowableItem : ThrowableItem Fields HitBufferTime Declaration protected readonly float HitBufferTime Field Value Type Description Single HitTime Declaration protected float HitTime Field Value Type Description Single IsHitEnemy Declaration protected bool IsHitEnemy Field Value Type Description Boolean ReboundHeight Declaration protected float ReboundHeight Field Value Type Description Single ReboundRadius Declaration protected float ReboundRadius Field Value Type Description Single Properties DamageVal Declaration protected abstract float DamageVal { get; } Property Value Type Description Single Methods OnHit(IHitable) Declaration public virtual void OnHit(IHitable other) Parameters Type Name Description IHitable other Implements IThrowable"
  },
  "api/CatchIo.Items.StaminaPotion.html": {
    "href": "api/CatchIo.Items.StaminaPotion.html",
    "title": "Class StaminaPotion | Catch.io Developer Reference",
    "keywords": "Class StaminaPotion This class recovers by HealVal the character when used by the player. Inheritance Object Item ConsumableItem StaminaPotion Inherited Members Item.Owner Item.Sprite Item.Start() Item.CanPickup() Namespace : CatchIo.Items Assembly : cs.temp.dll.dll Syntax public class StaminaPotion : ConsumableItem Properties HealVal Declaration public float HealVal { get; } Property Value Type Description Single Methods Consume() Declaration public override void Consume() Overrides ConsumableItem.Consume() OnDiscard() Declaration public override void OnDiscard() Overrides Item.OnDiscard() OnPickup(Character) Declaration public override void OnPickup(Character owner) Parameters Type Name Description Character owner Overrides Item.OnPickup(Character)"
  },
  "api/CatchIo.Items.Stone.html": {
    "href": "api/CatchIo.Items.Stone.html",
    "title": "Class Stone | Catch.io Developer Reference",
    "keywords": "Class Stone High-level implementation for the stone object. Inheritance Object Item ThrowableItem OffensiveThrowableItem Stone Implements IThrowable ISurfaceObservable Inherited Members OffensiveThrowableItem.IsHitEnemy OffensiveThrowableItem.HitTime OffensiveThrowableItem.HitBufferTime OffensiveThrowableItem.ReboundRadius OffensiveThrowableItem.ReboundHeight OffensiveThrowableItem.OnHit(IHitable) ThrowableItem.IsOnFloor ThrowableItem.TrajectoryCurve ThrowableItem.TrajectoryPath ThrowableItem.Rigid2D ThrowableItem.CurrentTrajectoryArc ThrowableItem.HasLanded ThrowableItem.PassedPeak ThrowableItem.ThrewTime ThrowableItem.SpriteRenderer ThrowableItem.GetPeakHeight() Item.Owner Item.Sprite Namespace : CatchIo.Items Assembly : cs.temp.dll.dll Syntax public class Stone : OffensiveThrowableItem Properties DamageVal Declaration protected override float DamageVal { get; } Property Value Type Description Single Overrides OffensiveThrowableItem.DamageVal Methods CanPickup() Declaration public override bool CanPickup() Returns Type Description Boolean Overrides Item.CanPickup() FixedUpdate() Declaration protected override void FixedUpdate() Overrides ThrowableItem.FixedUpdate() OnBeforeThrow(Vector2, Vector2) Declaration public override void OnBeforeThrow(Vector2 throwPos, Vector2 targetPos) Parameters Type Name Description Vector2 throwPos Vector2 targetPos Overrides ThrowableItem.OnBeforeThrow(Vector2, Vector2) OnDiscard() Declaration public override void OnDiscard() Overrides Item.OnDiscard() OnLanded() Declaration public override void OnLanded() Overrides ThrowableItem.OnLanded() OnPickup(Character) Declaration public override void OnPickup(Character owner) Parameters Type Name Description Character owner Overrides ThrowableItem.OnPickup(Character) OnSurfaceChanged(Nullable<TileSurface>) Declaration public void OnSurfaceChanged(TileSurface? newSurface) Parameters Type Name Description Nullable < TileSurface > newSurface OnThrow() Declaration public override void OnThrow() Overrides ThrowableItem.OnThrow() Start() Declaration protected override void Start() Overrides ThrowableItem.Start() UpdateProjectilePath(Vector2, Vector2, Single) Declaration public override void UpdateProjectilePath(Vector2 thrownPos, Vector2 targetPos, float throwRadius) Parameters Type Name Description Vector2 thrownPos Vector2 targetPos Single throwRadius Overrides ThrowableItem.UpdateProjectilePath(Vector2, Vector2, Single) Implements IThrowable ISurfaceObservable"
  },
  "api/CatchIo.Items.TeleportRune.html": {
    "href": "api/CatchIo.Items.TeleportRune.html",
    "title": "Class TeleportRune | Catch.io Developer Reference",
    "keywords": "Class TeleportRune This class can teleport to item landed position with teleport dissolve effect. Inheritance Object Item ThrowableItem EvasiveThrowableItem TeleportRune Implements IThrowable IEffectPlayable Inherited Members ThrowableItem.IsOnFloor ThrowableItem.TrajectoryCurve ThrowableItem.TrajectoryPath ThrowableItem.Rigid2D ThrowableItem.CurrentTrajectoryArc ThrowableItem.HasLanded ThrowableItem.PassedPeak ThrowableItem.ThrewTime ThrowableItem.SpriteRenderer ThrowableItem.GetPeakHeight() Item.Owner Item.Sprite Namespace : CatchIo.Items Assembly : cs.temp.dll.dll Syntax public class TeleportRune : EvasiveThrowableItem Fields TeleportDissolve Declaration public DissolveEffect TeleportDissolve Field Value Type Description DissolveEffect Methods CanPickup() Declaration public override bool CanPickup() Returns Type Description Boolean Overrides Item.CanPickup() EffectSequence(EffectBase) Declaration public IEnumerator EffectSequence(EffectBase effect) Parameters Type Name Description EffectBase effect Returns Type Description IEnumerator ExecuteEffect(EffectBase) Declaration public void ExecuteEffect(EffectBase effect) Parameters Type Name Description EffectBase effect FixedUpdate() Declaration protected override void FixedUpdate() Overrides ThrowableItem.FixedUpdate() OnBeforeThrow(Vector2, Vector2) Declaration public override void OnBeforeThrow(Vector2 throwPos, Vector2 targetPos) Parameters Type Name Description Vector2 throwPos Vector2 targetPos Overrides ThrowableItem.OnBeforeThrow(Vector2, Vector2) OnDiscard() Declaration public override void OnDiscard() Overrides Item.OnDiscard() OnEndEffect(EffectBase) Declaration public void OnEndEffect(EffectBase effect) Parameters Type Name Description EffectBase effect OnLanded() Declaration public override void OnLanded() Overrides ThrowableItem.OnLanded() OnPickup(Character) Declaration public override void OnPickup(Character owner) Parameters Type Name Description Character owner Overrides ThrowableItem.OnPickup(Character) OnThrow() Declaration public override void OnThrow() Overrides ThrowableItem.OnThrow() ReverseEffect(EffectBase) Declaration public void ReverseEffect(EffectBase effect) Parameters Type Name Description EffectBase effect Start() Declaration protected override void Start() Overrides ThrowableItem.Start() UpdateProjectilePath(Vector2, Vector2, Single) Declaration public override void UpdateProjectilePath(Vector2 thrownPos, Vector2 targetPos, float throwRadius) Parameters Type Name Description Vector2 thrownPos Vector2 targetPos Single throwRadius Overrides ThrowableItem.UpdateProjectilePath(Vector2, Vector2, Single) Implements IThrowable IEffectPlayable"
  },
  "api/CatchIo.Items.ThrowableItem.html": {
    "href": "api/CatchIo.Items.ThrowableItem.html",
    "title": "Class ThrowableItem | Catch.io Developer Reference",
    "keywords": "Class ThrowableItem Base class for all throwable items. If player throwed this object, it will be placed to mouse-position. Inheritance Object Item ThrowableItem EvasiveThrowableItem OffensiveThrowableItem Implements IThrowable Inherited Members Item.Owner Item.Sprite Item.OnDiscard() Item.CanPickup() Namespace : CatchIo.Items Assembly : cs.temp.dll.dll Syntax public abstract class ThrowableItem : Item Fields CurrentTrajectoryArc Declaration protected TrajectoryArc CurrentTrajectoryArc Field Value Type Description TrajectoryArc HasLanded Declaration protected bool HasLanded Field Value Type Description Boolean PassedPeak Declaration protected bool PassedPeak Field Value Type Description Boolean Rigid2D Declaration protected Rigidbody2D Rigid2D Field Value Type Description Rigidbody2D SpriteRenderer Declaration protected SpriteRenderer SpriteRenderer Field Value Type Description SpriteRenderer ThrewTime Declaration protected float ThrewTime Field Value Type Description Single TrajectoryCurve Declaration public AnimationCurve TrajectoryCurve Field Value Type Description AnimationCurve Properties IsOnFloor Declaration public bool IsOnFloor { get; } Property Value Type Description Boolean TrajectoryPath Declaration public Vector3[] TrajectoryPath { get; } Property Value Type Description Vector3 [] Methods FixedUpdate() Declaration protected virtual void FixedUpdate() GetPeakHeight() Declaration protected float GetPeakHeight() Returns Type Description Single OnBeforeThrow(Vector2, Vector2) Declaration public virtual void OnBeforeThrow(Vector2 throwPos, Vector2 targetPos) Parameters Type Name Description Vector2 throwPos Vector2 targetPos OnLanded() Declaration public virtual void OnLanded() OnPickup(Character) Declaration public override void OnPickup(Character owner) Parameters Type Name Description Character owner Overrides Item.OnPickup(Character) OnThrow() Declaration public virtual void OnThrow() Start() Declaration protected override void Start() Overrides Item.Start() UpdateProjectilePath(Vector2, Vector2, Single) Declaration public virtual void UpdateProjectilePath(Vector2 thrownPos, Vector2 targetPos, float throwRadius) Parameters Type Name Description Vector2 thrownPos Vector2 targetPos Single throwRadius Implements IThrowable"
  },
  "api/CatchIo.Items.TrapRune.html": {
    "href": "api/CatchIo.Items.TrapRune.html",
    "title": "Class TrapRune | Catch.io Developer Reference",
    "keywords": "Class TrapRune This class implements the Trap Rune functionality. Inheritance Object Item ThrowableItem EvasiveThrowableItem DeployableThrowableItem TrapRune Implements IThrowable Inherited Members DeployableThrowableItem.Start() DeployableThrowableItem.FixedUpdate() DeployableThrowableItem.CanPickup() DeployableThrowableItem.OnPickup(Character) DeployableThrowableItem.OnDiscard() DeployableThrowableItem.OnLanded() DeployableThrowableItem.OnThrow() DeployableThrowableItem.OnBeforeThrow(Vector2, Vector2) ThrowableItem.IsOnFloor ThrowableItem.TrajectoryCurve ThrowableItem.TrajectoryPath ThrowableItem.Rigid2D ThrowableItem.CurrentTrajectoryArc ThrowableItem.HasLanded ThrowableItem.PassedPeak ThrowableItem.ThrewTime ThrowableItem.SpriteRenderer ThrowableItem.UpdateProjectilePath(Vector2, Vector2, Single) ThrowableItem.GetPeakHeight() Item.Owner Item.Sprite Namespace : CatchIo.Items Assembly : cs.temp.dll.dll Syntax public class TrapRune : DeployableThrowableItem Methods SpawnDeployableObject(Vector3) Declaration protected override void SpawnDeployableObject(Vector3 spawnPos) Parameters Type Name Description Vector3 spawnPos Overrides DeployableThrowableItem.SpawnDeployableObject(Vector3) Implements IThrowable"
  },
  "api/CatchIo.Managers.GameManager.html": {
    "href": "api/CatchIo.Managers.GameManager.html",
    "title": "Class GameManager | Catch.io Developer Reference",
    "keywords": "Class GameManager Inheritance Object GameManager Namespace : CatchIo.Managers Assembly : cs.temp.dll.dll Syntax public class GameManager : MonoBehaviourPunCallbacks Properties Instance Declaration public static GameManager Instance { get; } Property Value Type Description GameManager Methods IsDirectSession() Declaration public static bool IsDirectSession() Returns Type Description Boolean"
  },
  "api/CatchIo.Managers.html": {
    "href": "api/CatchIo.Managers.html",
    "title": "Namespace CatchIo.Managers | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.Managers Classes GameManager LobbyManager MenuUIManager"
  },
  "api/CatchIo.Managers.LobbyManager.html": {
    "href": "api/CatchIo.Managers.LobbyManager.html",
    "title": "Class LobbyManager | Catch.io Developer Reference",
    "keywords": "Class LobbyManager Inheritance Object LobbyManager Namespace : CatchIo.Managers Assembly : cs.temp.dll.dll Syntax public class LobbyManager : MonoBehaviour"
  },
  "api/CatchIo.Managers.MenuUIManager.html": {
    "href": "api/CatchIo.Managers.MenuUIManager.html",
    "title": "Class MenuUIManager | Catch.io Developer Reference",
    "keywords": "Class MenuUIManager Inheritance Object MenuUIManager Namespace : CatchIo.Managers Assembly : cs.temp.dll.dll Syntax public class MenuUIManager : MonoBehaviour Properties Instance Declaration public static MenuUIManager Instance { get; } Property Value Type Description MenuUIManager MenuArrowSet Declaration public GameObject MenuArrowSet { get; } Property Value Type Description GameObject MenuUIContext Declaration public MenuUIContext MenuUIContext { get; } Property Value Type Description MenuUIContext UICamera Declaration public UnityEngine.Camera UICamera { get; } Property Value Type Description UnityEngine.Camera UINavigation Declaration public UINavigation<UIMenuViewType> UINavigation { get; } Property Value Type Description UINavigation < UIMenuViewType > Methods MakeUIMenuViewTypeFile() Declaration public void MakeUIMenuViewTypeFile() OnEnable() Declaration public void OnEnable()"
  },
  "api/CatchIo.Network.html": {
    "href": "api/CatchIo.Network.html",
    "title": "Namespace CatchIo.Network | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.Network Classes NetworkManager PlayerExtension PlayerProperties PropertyHelper RoomExtension Player Extension to wrap up access to player's Custom properties Extension for PhotonPlayer class to wrap up access to the player's custom properties. RoomProperties SendEventType Timer Structs RoomData Enums NetworkManager.PlayerState NetworkManager.RoomState"
  },
  "api/CatchIo.Network.NetworkManager.html": {
    "href": "api/CatchIo.Network.NetworkManager.html",
    "title": "Class NetworkManager | Catch.io Developer Reference",
    "keywords": "Class NetworkManager Inheritance Object NetworkManager Namespace : CatchIo.Network Assembly : cs.temp.dll.dll Syntax public class NetworkManager : NetworkCallback Fields EnteredGameSession Declaration protected bool EnteredGameSession Field Value Type Description Boolean IsLoading Declaration public bool IsLoading Field Value Type Description Boolean IsLog Declaration public bool IsLog Field Value Type Description Boolean IsQuitting Declaration protected bool IsQuitting Field Value Type Description Boolean RoomNameToRoomDataMap Declaration public static readonly Dictionary<string, RoomData> RoomNameToRoomDataMap Field Value Type Description Dictionary < String , RoomData > s_onConnectedToMaster Declaration public static Action s_onConnectedToMaster Field Value Type Description Action s_onConnectingToMaster Declaration public static Action s_onConnectingToMaster Field Value Type Description Action s_onConnectionError Declaration public static Action<DisconnectCause> s_onConnectionError Field Value Type Description Action < DisconnectCause > s_onCreatedRoom Declaration public static Action s_onCreatedRoom Field Value Type Description Action s_onCreateRoomFailed Declaration public static Action<string> s_onCreateRoomFailed Field Value Type Description Action < String > s_onCreatingRoom Declaration public static Action s_onCreatingRoom Field Value Type Description Action s_onCustomRoomPropertiesChanged Declaration public static Action<Hashtable> s_onCustomRoomPropertiesChanged Field Value Type Description Action < Hashtable > s_onDisconnected Declaration public static Action s_onDisconnected Field Value Type Description Action s_onJoinedLobby Declaration public static Action s_onJoinedLobby Field Value Type Description Action s_onJoinedRoom Declaration public static Action s_onJoinedRoom Field Value Type Description Action s_onJoiningLobby Declaration public static Action s_onJoiningLobby Field Value Type Description Action s_onJoiningRoom Declaration public static Action s_onJoiningRoom Field Value Type Description Action s_onJoinRandomFailed Declaration public static Action<string> s_onJoinRandomFailed Field Value Type Description Action < String > s_onJoinRoomFailed Declaration public static Action<string> s_onJoinRoomFailed Field Value Type Description Action < String > s_onLeavingLobby Declaration public static Action s_onLeavingLobby Field Value Type Description Action s_onLeavingRoom Declaration public static Action s_onLeavingRoom Field Value Type Description Action s_onLeftLobby Declaration public static Action s_onLeftLobby Field Value Type Description Action s_onLeftRoom Declaration public static Action s_onLeftRoom Field Value Type Description Action s_onLoadedGameScene Declaration public static Action s_onLoadedGameScene Field Value Type Description Action s_onLoadingGameScene Declaration public static Action s_onLoadingGameScene Field Value Type Description Action s_onMasterClientSwitched Declaration public static Action<Player> s_onMasterClientSwitched Field Value Type Description Action < Player > s_onPlayerConnected Declaration public static Action<Player> s_onPlayerConnected Field Value Type Description Action < Player > s_onPlayerDisconnected Declaration public static Action<Player> s_onPlayerDisconnected Field Value Type Description Action < Player > s_onPlayerPropertiesUpdate Declaration public static Action<Player, Hashtable> s_onPlayerPropertiesUpdate Field Value Type Description Action < Player , Hashtable > s_onQuitGameSession Declaration public static Action s_onQuitGameSession Field Value Type Description Action s_onReceivedChatMessage Declaration public static Action<string> s_onReceivedChatMessage Field Value Type Description Action < String > s_onReceivedRoomListUpdate Declaration public static Action<List<RoomData>> s_onReceivedRoomListUpdate Field Value Type Description Action < List < RoomData >> SEND_RATE Declaration public const int SEND_RATE = 20 Field Value Type Description Int32 UNIQUE_VIEW_ID Declaration public const int UNIQUE_VIEW_ID = 999 Field Value Type Description Int32 UpdateRoomPropertyInterval Declaration protected float UpdateRoomPropertyInterval Field Value Type Description Single Properties CurrentRoomName Declaration public string CurrentRoomName { get; } Property Value Type Description String Instance Declaration public static NetworkManager Instance { get; protected set; } Property Value Type Description NetworkManager PingValue Declaration public int PingValue { get; } Property Value Type Description Int32 SelectedGameMode Declaration public GameMode SelectedGameMode { get; } Property Value Type Description GameMode Methods Awake() Declaration public void Awake() CacheRoom(List<RoomInfo>) Declaration protected void CacheRoom(List<RoomInfo> rooms) Parameters Type Name Description List < RoomInfo > rooms CanAddRoom(RoomInfo, out RoomData) Declaration protected virtual bool CanAddRoom(RoomInfo room, out RoomData data) Parameters Type Name Description RoomInfo room RoomData data Returns Type Description Boolean ConnectToBestCloudServer() Declaration public virtual void ConnectToBestCloudServer() ConnectToMaster(String) Declaration public virtual void ConnectToMaster(string nickName) Parameters Type Name Description String nickName ConnectToRegion() Declaration public virtual void ConnectToRegion() CreateRoom(String, String, String) Declaration public void CreateRoom(string roomName, string mapName, string gameMode) Parameters Type Name Description String roomName String mapName String gameMode Disconnect() Declaration public virtual void Disconnect() GetCustomRoomPropertiesForLobby() Declaration protected virtual string[] GetCustomRoomPropertiesForLobby() Returns Type Description String [] GetReadyPlayerCount() Declaration public int GetReadyPlayerCount() Returns Type Description Int32 HideGameSceneLoadingScreen() Declaration public void HideGameSceneLoadingScreen() IsOpenRoom(String) Declaration public bool IsOpenRoom(string selectedRoomName) Parameters Type Name Description String selectedRoomName Returns Type Description Boolean JoinLobby() Declaration public virtual void JoinLobby() JoinRoom(String) Declaration public virtual void JoinRoom(string roomName) Parameters Type Name Description String roomName LeaveLobby() Declaration public virtual void LeaveLobby() LeaveRoom() Declaration public virtual void LeaveRoom() OnApplicationQuit() Declaration protected void OnApplicationQuit() OnConnectedToMaster() Declaration public override void OnConnectedToMaster() OnCreatedRoom() Declaration public override void OnCreatedRoom() OnCreateRoomFailed(Int16, String) Declaration public override void OnCreateRoomFailed(short returnCode, string message) Parameters Type Name Description Int16 returnCode String message OnDisconnected(DisconnectCause) Declaration public override void OnDisconnected(DisconnectCause cause) Parameters Type Name Description DisconnectCause cause OnJoinedLobby() Declaration public override void OnJoinedLobby() OnJoinedRoom() Declaration public override void OnJoinedRoom() OnJoinRandomFailed(Int16, String) Declaration public override void OnJoinRandomFailed(short returnCode, string message) Parameters Type Name Description Int16 returnCode String message OnJoinRoomFailed(Int16, String) Declaration public override void OnJoinRoomFailed(short returnCode, string message) Parameters Type Name Description Int16 returnCode String message OnLeftLobby() Declaration public override void OnLeftLobby() OnLeftRoom() Declaration public override void OnLeftRoom() OnMasterClientSwitched(Player) Declaration public override void OnMasterClientSwitched(Player newMasterClient) Parameters Type Name Description Player newMasterClient OnPlayerEnteredRoom(Player) Declaration public override void OnPlayerEnteredRoom(Player newPlayer) Parameters Type Name Description Player newPlayer OnPlayerLeftRoom(Player) Declaration public override void OnPlayerLeftRoom(Player otherPlayer) Parameters Type Name Description Player otherPlayer OnPlayerPropertiesUpdate(Player, Hashtable) Declaration public override void OnPlayerPropertiesUpdate(Player targetPlayer, Hashtable changedProps) Parameters Type Name Description Player targetPlayer Hashtable changedProps OnRoomListUpdate(List<RoomInfo>) Declaration public override void OnRoomListUpdate(List<RoomInfo> roomList) Parameters Type Name Description List < RoomInfo > roomList OnRoomPropertiesUpdate(Hashtable) Declaration public override void OnRoomPropertiesUpdate(Hashtable propertiesThatChanged) Parameters Type Name Description Hashtable propertiesThatChanged PlayOffline(String) Declaration public virtual void PlayOffline(string mapName) Parameters Type Name Description String mapName RespawnCharacterAfterDelay(Int32, Single) Declaration public void RespawnCharacterAfterDelay(int viewId, float delay) Parameters Type Name Description Int32 viewId Single delay RespawnPlayer(Int32) Declaration public void RespawnPlayer(int viewId) Parameters Type Name Description Int32 viewId RestartGame() Declaration public void RestartGame() RPC_HideGameSceneLoadingScreen() Declaration public void RPC_HideGameSceneLoadingScreen() RPC_SendChat(String) Declaration public void RPC_SendChat(string msg) Parameters Type Name Description String msg RPC_ShowGameSceneLoadingScreen() Declaration public void RPC_ShowGameSceneLoadingScreen() StartGame() Declaration public void StartGame() TogglePlayerState() Declaration public void TogglePlayerState()"
  },
  "api/CatchIo.Network.NetworkManager.PlayerState.html": {
    "href": "api/CatchIo.Network.NetworkManager.PlayerState.html",
    "title": "Enum NetworkManager.PlayerState | Catch.io Developer Reference",
    "keywords": "Enum NetworkManager.PlayerState Namespace : CatchIo.Network Assembly : cs.temp.dll.dll Syntax public enum PlayerState : byte Fields Name Description NotReady Ready"
  },
  "api/CatchIo.Network.NetworkManager.RoomState.html": {
    "href": "api/CatchIo.Network.NetworkManager.RoomState.html",
    "title": "Enum NetworkManager.RoomState | Catch.io Developer Reference",
    "keywords": "Enum NetworkManager.RoomState Namespace : CatchIo.Network Assembly : cs.temp.dll.dll Syntax public enum RoomState : byte Fields Name Description Loading Playing Waiting"
  },
  "api/CatchIo.Network.PlayerExtension.html": {
    "href": "api/CatchIo.Network.PlayerExtension.html",
    "title": "Class PlayerExtension | Catch.io Developer Reference",
    "keywords": "Class PlayerExtension Inheritance Object PlayerExtension Namespace : CatchIo.Network Assembly : cs.temp.dll.dll Syntax public static class PlayerExtension Methods AddBeTrappedCount(Player, Int32) Declaration public static void AddBeTrappedCount(this Player player, int value) Parameters Type Name Description Player player Int32 value AddDeath(Player, Int32) Declaration public static void AddDeath(this Player player, int value) Parameters Type Name Description Player player Int32 value AddKill(Player, Int32) Add Score to PLayer Properties. Declaration public static void AddKill(this Player player, int value) Parameters Type Name Description Player player Int32 value AddTrapCount(Player, Int32) Declaration public static void AddTrapCount(this Player player, int value) Parameters Type Name Description Player player Int32 value GetBeTrappedCount(Player) Declaration public static int GetBeTrappedCount(this Player player) Parameters Type Name Description Player player Returns Type Description Int32 GetClass(Player) Declaration public static string GetClass(this Player player) Parameters Type Name Description Player player Returns Type Description String GetDeaths(Player) Declaration public static int GetDeaths(this Player player) Parameters Type Name Description Player player Returns Type Description Int32 GetKills(Player) Get the current Player Score. Declaration public static int GetKills(this Player player) Parameters Type Name Description Player player Returns Type Description Int32 GetPoint(Player) Declaration public static int GetPoint(this Player player) Parameters Type Name Description Player player Returns Type Description Int32 GetSkinName(Player) Declaration public static string GetSkinName(this Player player) Parameters Type Name Description Player player Returns Type Description String GetTrapCount(Player) Declaration public static int GetTrapCount(this Player player) Parameters Type Name Description Player player Returns Type Description Int32 IsAlive(Player) Can be used to stored current Player state. e.g Player dies, set prop to false. Declaration public static bool IsAlive(this Player player) Parameters Type Name Description Player player Target Player Returns Type Description Boolean IsCharacterSpawned(Player) Declaration public static bool IsCharacterSpawned(this Player player) Parameters Type Name Description Player player Returns Type Description Boolean IsGameSceneLoaded(Player) Get PhotonPlayer Ready State, if null its not set. Declaration public static bool IsGameSceneLoaded(this Player player) Parameters Type Name Description Player player Returns Type Description Boolean IsReady(Player) Get PhotonPlayer Ready State, if null its not set. Declaration public static bool IsReady(this Player player) Parameters Type Name Description Player player Returns Type Description Boolean ResetProperties(Player) Deletes all Properties. Declaration public static void ResetProperties(this Player player) Parameters Type Name Description Player player Target Player SetAlive(Player, Boolean) Change current Players state. Declaration public static void SetAlive(this Player player, bool alive) Parameters Type Name Description Player player Target Player Boolean alive True/False == Alive/Dead SetBeTrappedCount(Player, Int32) Declaration public static void SetBeTrappedCount(this Player player, int value) Parameters Type Name Description Player player Int32 value SetCharacterSpawned(Player, Boolean) Declaration public static void SetCharacterSpawned(this Player player, bool value) Parameters Type Name Description Player player Boolean value SetClass(Player, String) Declaration public static void SetClass(this Player player, string value) Parameters Type Name Description Player player String value SetDeaths(Player, Int32) Declaration public static void SetDeaths(this Player player, int value) Parameters Type Name Description Player player Int32 value SetGameSceneLoaded(Player, Boolean) Change PhotonPlayer Ready State. Declaration public static void SetGameSceneLoaded(this Player player, bool value) Parameters Type Name Description Player player Boolean value SetKill(Player, Int32) Assign Score to Player Properties.Overrides the current Score. Declaration public static void SetKill(this Player player, int value) Parameters Type Name Description Player player Target Photon Player Int32 value Score SetPoint(Player, Int32) Declaration public static void SetPoint(this Player player, int value) Parameters Type Name Description Player player Int32 value SetReady(Player, Boolean) Change PhotonPlayer Ready State. Declaration public static void SetReady(this Player player, bool value) Parameters Type Name Description Player player Boolean value SetSkinName(Player, String) Declaration public static void SetSkinName(this Player player, string value) Parameters Type Name Description Player player String value SetTrapCount(Player, Int32) Declaration public static void SetTrapCount(this Player player, int value) Parameters Type Name Description Player player Int32 value"
  },
  "api/CatchIo.Network.PlayerProperties.html": {
    "href": "api/CatchIo.Network.PlayerProperties.html",
    "title": "Class PlayerProperties | Catch.io Developer Reference",
    "keywords": "Class PlayerProperties Inheritance Object PlayerProperties Namespace : CatchIo.Network Assembly : cs.temp.dll.dll Syntax public static class PlayerProperties Fields Alive Declaration public const string Alive = \"ale\" Field Value Type Description String BeTrappedCount Declaration public const string BeTrappedCount = \"btc\" Field Value Type Description String CharacterSpawned Declaration public const string CharacterSpawned = \"csp\" Field Value Type Description String Class Declaration public const string Class = \"cls\" Field Value Type Description String Deaths Declaration public const string Deaths = \"dth\" Field Value Type Description String GameSceneLoaded Declaration public const string GameSceneLoaded = \"gsl\" Field Value Type Description String Kills Declaration public const string Kills = \"kls\" Field Value Type Description String Point Declaration public const string Point = \"pnt\" Field Value Type Description String Ready Declaration public const string Ready = \"rdy\" Field Value Type Description String Skin Declaration public const string Skin = \"skn\" Field Value Type Description String TrapCount Declaration public const string TrapCount = \"tpc\" Field Value Type Description String"
  },
  "api/CatchIo.Network.PropertyHelper.html": {
    "href": "api/CatchIo.Network.PropertyHelper.html",
    "title": "Class PropertyHelper | Catch.io Developer Reference",
    "keywords": "Class PropertyHelper Inheritance Object PropertyHelper Namespace : CatchIo.Network Assembly : cs.temp.dll.dll Syntax public static class PropertyHelper Methods AddValueToProperty(Player, String, Int32) Check Player Properties for a Property Value, add given value to it. Declaration public static void AddValueToProperty(this Player player, string property, int value) Parameters Type Name Description Player player Photon Player String property Property as string Int32 value Value to set. AddValueToProperty(Room, String, Int32) Check Room Properties for a Property Value, add given value to it. Declaration public static void AddValueToProperty(this Room room, string property, int value) Parameters Type Name Description Room room Photon Room String property Property as string Int32 value Value to set. DeleteProperty(Player, String) Deletes Property if DeleteNullProperties is set to true in Room Options. Declaration public static void DeleteProperty(this Player player, string property) Parameters Type Name Description Player player Photon Player String property Property as string GetPropertyValue<T>(Player, String, T) Check Player Properties for a Property Value. Declaration public static T GetPropertyValue<T>(this Player player, string property, T defaultValue) Parameters Type Name Description Player player Photon Player String property Property as string T defaultValue Fallback Value. Returns Type Description T Property Value Type Parameters Name Description T Type GetPropertyValue<T>(Room, String, T) Check Room Properties for a Property Value. Declaration public static T GetPropertyValue<T>(this Room room, string property, T defaultValue) Parameters Type Name Description Room room Photon Room String property Property as string T defaultValue Fallback Value. Returns Type Description T Property Value Type Parameters Name Description T Type SetPropertyValue<T>(Player, String, T) Check Player Properties for a Property Value and set it. Declaration public static void SetPropertyValue<T>(this Player player, string property, T value) Parameters Type Name Description Player player Photon Player String property Property as string T value Value to set. Type Parameters Name Description T Type SetPropertyValue<T>(Room, String, T) Check Room Properties for a Property Value and set it. Declaration public static void SetPropertyValue<T>(this Room room, string property, T value) Parameters Type Name Description Room room Photon Room String property Property as string T value Value to set. Type Parameters Name Description T Type"
  },
  "api/CatchIo.Network.RoomData.html": {
    "href": "api/CatchIo.Network.RoomData.html",
    "title": "Struct RoomData | Catch.io Developer Reference",
    "keywords": "Struct RoomData Namespace : CatchIo.Network Assembly : cs.temp.dll.dll Syntax [Serializable] public struct RoomData Fields gameMode Declaration public string gameMode Field Value Type Description String map Declaration public string map Field Value Type Description String maxPlayerCount Declaration public int maxPlayerCount Field Value Type Description Int32 playerCount Declaration public int playerCount Field Value Type Description Int32 roomName Declaration public string roomName Field Value Type Description String state Declaration public NetworkManager.RoomState state Field Value Type Description NetworkManager.RoomState"
  },
  "api/CatchIo.Network.RoomExtension.html": {
    "href": "api/CatchIo.Network.RoomExtension.html",
    "title": "Class RoomExtension | Catch.io Developer Reference",
    "keywords": "Class RoomExtension Player Extension to wrap up access to player's Custom properties Extension for PhotonPlayer class to wrap up access to the player's custom properties. Inheritance Object RoomExtension Namespace : CatchIo.Network Assembly : cs.temp.dll.dll Syntax public static class RoomExtension Methods GetGameModeName(Room) Checks Room Properties for stored string. Creates a instance and returns it as GameMode. Declaration public static string GetGameModeName(this Room room) Parameters Type Name Description Room room Stored Mode instance casted into GameMode Returns Type Description String GetGameModeTime(Room) Declaration public static float GetGameModeTime(this Room room) Parameters Type Name Description Room room Returns Type Description Single GetMap(Room) Get Map Name from Room Properties. Declaration public static string GetMap(this Room room) Parameters Type Name Description Room room Returns Type Description String GetPing(Room) Get Ping from Room Propertiess Declaration public static int GetPing(this Room room) Parameters Type Name Description Room room Returns Type Description Int32 GetRoomState(Room) Checks Room Properties for stored string. Creates a instance and returns it as GameMode. Declaration public static NetworkManager.RoomState GetRoomState(this Room room) Parameters Type Name Description Room room Stored Mode instance casted into GameMode Returns Type Description NetworkManager.RoomState SetGameModeName(Room, String) Store GameMode in Room Properties. Should be set by Room creation. Declaration public static void SetGameModeName(this Room room, string name) Parameters Type Name Description Room room String name SetGameModeTime(Room, Single) Declaration public static void SetGameModeTime(this Room room, float value) Parameters Type Name Description Room room Single value SetMap(Room, String) Store picked Map in Room Properties. Declaration public static void SetMap(this Room room, string mapName) Parameters Type Name Description Room room String mapName SetPing(Room, Int32) Store Ping in Room Properties. Declaration public static void SetPing(this Room room, int value) Parameters Type Name Description Room room Int32 value SetRoomState(Room, NetworkManager.RoomState) Declaration public static void SetRoomState(this Room room, NetworkManager.RoomState state) Parameters Type Name Description Room room NetworkManager.RoomState state"
  },
  "api/CatchIo.Network.RoomProperties.html": {
    "href": "api/CatchIo.Network.RoomProperties.html",
    "title": "Class RoomProperties | Catch.io Developer Reference",
    "keywords": "Class RoomProperties Inheritance Object RoomProperties Namespace : CatchIo.Network Assembly : cs.temp.dll.dll Syntax public static class RoomProperties Fields GameMode Declaration public const string GameMode = \"gm\" Field Value Type Description String GameModeTime Declaration public const string GameModeTime = \"tm\" Field Value Type Description String Map Declaration public const string Map = \"map\" Field Value Type Description String Ping Declaration public const string Ping = \"pg\" Field Value Type Description String RoomState Declaration public const string RoomState = \"rs\" Field Value Type Description String"
  },
  "api/CatchIo.Network.SendEventType.html": {
    "href": "api/CatchIo.Network.SendEventType.html",
    "title": "Class SendEventType | Catch.io Developer Reference",
    "keywords": "Class SendEventType Inheritance Object SendEventType Namespace : CatchIo.Network Assembly : cs.temp.dll.dll Syntax public class SendEventType Fields CharacterDead Declaration public const byte CharacterDead = 3 Field Value Type Description Byte CharacterRespawn Declaration public const byte CharacterRespawn = 2 Field Value Type Description Byte CharacterSpawn Declaration public const byte CharacterSpawn = 1 Field Value Type Description Byte EnteredHidingStateEvent Declaration public const byte EnteredHidingStateEvent = 10 Field Value Type Description Byte ExitedHidingStateEvent Declaration public const byte ExitedHidingStateEvent = 11 Field Value Type Description Byte GameEndEvent Declaration public const byte GameEndEvent = 21 Field Value Type Description Byte GameStartEvent Declaration public const byte GameStartEvent = 20 Field Value Type Description Byte GameStopEvent Declaration public const byte GameStopEvent = 22 Field Value Type Description Byte"
  },
  "api/CatchIo.Network.Timer.html": {
    "href": "api/CatchIo.Network.Timer.html",
    "title": "Class Timer | Catch.io Developer Reference",
    "keywords": "Class Timer Inheritance Object Timer Namespace : CatchIo.Network Assembly : cs.temp.dll.dll Syntax public class Timer : IOnEventCallback Fields OnFinished Declaration public Action OnFinished Field Value Type Description Action Methods GetTime() Declaration public float GetTime() Returns Type Description Single Initialize(String) Declaration public void Initialize(string key) Parameters Type Name Description String key OnEvent(EventData) Declaration public void OnEvent(EventData photonEvent) Parameters Type Name Description EventData photonEvent Release() Declaration public void Release() Reset() Declaration public void Reset() Start(Single) Declaration public void Start(float newTime) Parameters Type Name Description Single newTime Stop() Declaration public void Stop() Update(Single) Declaration public void Update(float delta) Parameters Type Name Description Single delta"
  },
  "api/CatchIo.ObjectPool.Footprint.html": {
    "href": "api/CatchIo.ObjectPool.Footprint.html",
    "title": "Class Footprint | Catch.io Developer Reference",
    "keywords": "Class Footprint The footprint component for the footprint game object. Inheritance Object Footprint Namespace : CatchIo.ObjectPool Assembly : cs.temp.dll.dll Syntax public class Footprint : MonoBehaviourPun Methods CreateFootprint(String, Vector3, Vector3, Boolean) Declaration public static void CreateFootprint(string prefabPath, Vector3 generatePos, Vector3 pointDirection, bool flipX) Parameters Type Name Description String prefabPath Vector3 generatePos Vector3 pointDirection Boolean flipX"
  },
  "api/CatchIo.ObjectPool.html": {
    "href": "api/CatchIo.ObjectPool.html",
    "title": "Namespace CatchIo.ObjectPool | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.ObjectPool Classes Footprint The footprint component for the footprint game object."
  },
  "api/CatchIo.PlayerCharacter.Character.html": {
    "href": "api/CatchIo.PlayerCharacter.Character.html",
    "title": "Class Character | Catch.io Developer Reference",
    "keywords": "Class Character Base class for all character data control. Inheritance Object Character TestCharacter Implements IPunObservable IPunInstantiateMagicCallback Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class Character : MonoBehaviourPun Fields AddItemToInventoryAction Declaration public Action<Item> AddItemToInventoryAction Field Value Type Description Action < Item > HeadUpOffset Declaration public readonly Vector3 HeadUpOffset Field Value Type Description Vector3 OnCharacterStatusChanged Declaration public Action OnCharacterStatusChanged Field Value Type Description Action OnDeath Declaration public Action OnDeath Field Value Type Description Action OnRespawn Declaration public Action<Vector3> OnRespawn Field Value Type Description Action < Vector3 > RemoveHoldingItemAction Declaration public Action RemoveHoldingItemAction Field Value Type Description Action Properties CanControl Declaration public bool CanControl { get; } Property Value Type Description Boolean CharacterRenderer Declaration public CharacterRenderer CharacterRenderer { get; } Property Value Type Description CharacterRenderer CharacterStatus Declaration public CharacterStatus CharacterStatus { get; set; } Property Value Type Description CharacterStatus HoldingItem Declaration public Item HoldingItem { get; set; } Property Value Type Description Item Methods Awake() Declaration protected virtual void Awake() ChangeToSpectatorState() Declaration public void ChangeToSpectatorState() ConsumeItem(ConsumableItem) Declaration public void ConsumeItem(ConsumableItem item) Parameters Type Name Description ConsumableItem item DiscardHoldingItem() Declaration public void DiscardHoldingItem() Drag(Single) Declaration public void Drag(float amount) Parameters Type Name Description Single amount Draw() Declaration public void Draw() GenerateFootprint(Vector3, Boolean) Declaration public void GenerateFootprint(Vector3 generatePos, bool flipX) Parameters Type Name Description Vector3 generatePos Boolean flipX GetClosestTransform<T>(Vector3, List<T>, Boolean) Returns the transform from others that is closest to the origin transform. The generic specifies the type of the list of 'other' objects. It is also the return type. Declaration public T GetClosestTransform<T>(Vector3 originPos, List<T> others, bool requireLineOfSight = true) where T : Component Parameters Type Name Description Vector3 originPos List <T> others Boolean requireLineOfSight If true, then transforms with a cliff between them are disregarded. Returns Type Description T Type Parameters Name Description T GetVelocity() Declaration public Vector2 GetVelocity() Returns Type Description Vector2 HealHealth(Single) Declaration public void HealHealth(float healVal) Parameters Type Name Description Single healVal HealStamina(Single) Declaration public void HealStamina(float staminaVal) Parameters Type Name Description Single staminaVal Look(Vector2) Declaration public void Look(Vector2 lookDir) Parameters Type Name Description Vector2 lookDir Move(Vector2) Declaration public void Move(Vector2 moveVelocity) Parameters Type Name Description Vector2 moveVelocity OnPhotonInstantiate(PhotonMessageInfo) Declaration public void OnPhotonInstantiate(PhotonMessageInfo info) Parameters Type Name Description PhotonMessageInfo info OnPhotonSerializeView(PhotonStream, PhotonMessageInfo) Declaration public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info) Parameters Type Name Description PhotonStream stream PhotonMessageInfo info PickupItem(Item) Declaration public void PickupItem(Item item) Parameters Type Name Description Item item ResetActionState() Declaration public void ResetActionState() RPC_GenerateSoundWave(Vector3, Single) Declaration public void RPC_GenerateSoundWave(Vector3 generatePos, float duration) Parameters Type Name Description Vector3 generatePos Single duration RPC_PickupItem(Int32) Declaration public void RPC_PickupItem(int itemViewID) Parameters Type Name Description Int32 itemViewID RPC_TakeDamage(Single) Declaration public void RPC_TakeDamage(float damage) Parameters Type Name Description Single damage RPC_ThrowItem(Int32, Vector2, Vector2) Declaration public void RPC_ThrowItem(int itemViewID, Vector2 originPosWorld, Vector2 targetPosWorld) Parameters Type Name Description Int32 itemViewID Vector2 originPosWorld Vector2 targetPosWorld SetCharacterNickName(String) Declaration public void SetCharacterNickName(string objName) Parameters Type Name Description String objName SetCharacterSkin(String, String) Declaration public void SetCharacterSkin(string characterClassName, string characterSkinName = \"Default\") Parameters Type Name Description String characterClassName String characterSkinName SetMoveState(Vector2, Boolean, Boolean) Declaration public void SetMoveState(Vector2 currentCharacterMoveInput, bool isCrouching, bool isRunning) Parameters Type Name Description Vector2 currentCharacterMoveInput Boolean isCrouching Boolean isRunning TakeDamage(Single) Declaration public void TakeDamage(float damage) Parameters Type Name Description Single damage ThrowItem(ThrowableItem, Vector2) Declaration public void ThrowItem(ThrowableItem item, Vector2 targetPos) Parameters Type Name Description ThrowableItem item Vector2 targetPos Update() Declaration protected virtual void Update() Implements IPunObservable IPunInstantiateMagicCallback"
  },
  "api/CatchIo.PlayerCharacter.CharacterActionState.html": {
    "href": "api/CatchIo.PlayerCharacter.CharacterActionState.html",
    "title": "Enum CharacterActionState | Catch.io Developer Reference",
    "keywords": "Enum CharacterActionState Enum for character action states. Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public enum CharacterActionState Fields Name Description Attack Death End None Spectate Throw"
  },
  "api/CatchIo.PlayerCharacter.CharacterAnimation.html": {
    "href": "api/CatchIo.PlayerCharacter.CharacterAnimation.html",
    "title": "Class CharacterAnimation | Catch.io Developer Reference",
    "keywords": "Class CharacterAnimation This class plays player animations in animator. TODO : Make this an element of CharacterRenderer. Inheritance Object CharacterAnimation Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class CharacterAnimation : MonoBehaviour Methods PlayFootstepEvents() Play footstep events when the character animation clip event called. Declaration public void PlayFootstepEvents()"
  },
  "api/CatchIo.PlayerCharacter.CharacterAttack.html": {
    "href": "api/CatchIo.PlayerCharacter.CharacterAttack.html",
    "title": "Class CharacterAttack | Catch.io Developer Reference",
    "keywords": "Class CharacterAttack Inheritance Object CharacterAttack Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class CharacterAttack : MonoBehaviour Fields BackstabDamageMultiplier Declaration public float BackstabDamageMultiplier Field Value Type Description Single MeleeDamage Declaration public float MeleeDamage Field Value Type Description Single Methods Attack(Character) Declaration public void Attack(Character character) Parameters Type Name Description Character character GetMeleeDamage(CharacterDirectionState, CharacterDirectionState) Declaration public float GetMeleeDamage(CharacterDirectionState myCharacterDir, CharacterDirectionState targetCharacterDir) Parameters Type Name Description CharacterDirectionState myCharacterDir CharacterDirectionState targetCharacterDir Returns Type Description Single"
  },
  "api/CatchIo.PlayerCharacter.CharacterController.html": {
    "href": "api/CatchIo.PlayerCharacter.CharacterController.html",
    "title": "Class CharacterController | Catch.io Developer Reference",
    "keywords": "Class CharacterController Base class for character control by player inputs. Inheritance Object CharacterController Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class CharacterController : MonoBehaviour"
  },
  "api/CatchIo.PlayerCharacter.CharacterDirectionState.html": {
    "href": "api/CatchIo.PlayerCharacter.CharacterDirectionState.html",
    "title": "Enum CharacterDirectionState | Catch.io Developer Reference",
    "keywords": "Enum CharacterDirectionState Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public enum CharacterDirectionState Fields Name Description E N NE NW S SE SW W"
  },
  "api/CatchIo.PlayerCharacter.CharacterFOV.html": {
    "href": "api/CatchIo.PlayerCharacter.CharacterFOV.html",
    "title": "Class CharacterFOV | Catch.io Developer Reference",
    "keywords": "Class CharacterFOV This class implements the FOV light effect behavior that is controlled by the player character's view. Inheritance Object CharacterFOV Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class CharacterFOV : MonoBehaviour Methods DisableFOVLight() Declaration public void DisableFOVLight() EnableFOVLight() Declaration public void EnableFOVLight()"
  },
  "api/CatchIo.PlayerCharacter.CharacterHide.html": {
    "href": "api/CatchIo.PlayerCharacter.CharacterHide.html",
    "title": "Class CharacterHide | Catch.io Developer Reference",
    "keywords": "Class CharacterHide Inheritance Object CharacterHide Implements IOnEventCallback Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class CharacterHide : MonoBehaviour Fields PercentageBeingOverlapped Declaration public float PercentageBeingOverlapped Field Value Type Description Single Properties IsHiding Declaration public bool IsHiding { get; } Property Value Type Description Boolean Renderer Declaration public CharacterRenderer Renderer { get; } Property Value Type Description CharacterRenderer Methods OnEvent(EventData) Declaration public void OnEvent(EventData photonEvent) Parameters Type Name Description EventData photonEvent Implements IOnEventCallback"
  },
  "api/CatchIo.PlayerCharacter.CharacterHitbox.html": {
    "href": "api/CatchIo.PlayerCharacter.CharacterHitbox.html",
    "title": "Class CharacterHitbox | Catch.io Developer Reference",
    "keywords": "Class CharacterHitbox This class performs to character collider. Inheritance Object CharacterHitbox Implements IHitable Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class CharacterHitbox : MonoBehaviour, IHitable Properties Owner Declaration public Character Owner { get; } Property Value Type Description Character Methods OnHit(Character, Single) Declaration public void OnHit(Character attacker, float damage) Parameters Type Name Description Character attacker Single damage Implements IHitable"
  },
  "api/CatchIo.PlayerCharacter.CharacterItemCollector.html": {
    "href": "api/CatchIo.PlayerCharacter.CharacterItemCollector.html",
    "title": "Class CharacterItemCollector | Catch.io Developer Reference",
    "keywords": "Class CharacterItemCollector Inheritance Object CharacterItemCollector Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class CharacterItemCollector : MonoBehaviour"
  },
  "api/CatchIo.PlayerCharacter.CharacterMoveState.html": {
    "href": "api/CatchIo.PlayerCharacter.CharacterMoveState.html",
    "title": "Enum CharacterMoveState | Catch.io Developer Reference",
    "keywords": "Enum CharacterMoveState Enum for character move state. Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public enum CharacterMoveState Fields Name Description Last Run Sneak SneakStatic Static Walk"
  },
  "api/CatchIo.PlayerCharacter.CharacterRenderer.html": {
    "href": "api/CatchIo.PlayerCharacter.CharacterRenderer.html",
    "title": "Class CharacterRenderer | Catch.io Developer Reference",
    "keywords": "Class CharacterRenderer Inheritance Object CharacterRenderer Implements IEffectPlayable Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class CharacterRenderer : MonoBehaviour Fields OnSkinLoaded Declaration public UnityAction OnSkinLoaded Field Value Type Description UnityAction Properties CharacterRuntimeAnimatorController Declaration public RuntimeAnimatorController CharacterRuntimeAnimatorController { get; } Property Value Type Description RuntimeAnimatorController CharacterSkin Declaration public CharacterSkin CharacterSkin { get; } Property Value Type Description CharacterSkin CharacterSkinAnimator Declaration public Animator CharacterSkinAnimator { get; } Property Value Type Description Animator CharacterSkinRenderer Declaration public SpriteRenderer CharacterSkinRenderer { get; } Property Value Type Description SpriteRenderer Methods CancelHidingEffect() Declaration public void CancelHidingEffect() DisableMaskRenderer() Declaration public void DisableMaskRenderer() EffectSequence(EffectBase) Declaration public IEnumerator EffectSequence(EffectBase effect) Parameters Type Name Description EffectBase effect Returns Type Description IEnumerator EnableMaskRenderer() Declaration public void EnableMaskRenderer() EnterHidingEffect() Declaration public void EnterHidingEffect() ExecuteEffect(EffectBase) Declaration public void ExecuteEffect(EffectBase effect) Parameters Type Name Description EffectBase effect ExitHideEffect() Declaration public void ExitHideEffect() OnEndEffect(EffectBase) Declaration public void OnEndEffect(EffectBase effect) Parameters Type Name Description EffectBase effect PlayHidingEffectImmediately() Declaration public void PlayHidingEffectImmediately() ReverseEffect(EffectBase) Declaration public void ReverseEffect(EffectBase effect) Parameters Type Name Description EffectBase effect SetCharacterSkin(String, String) Declaration public void SetCharacterSkin(string characterClassName, string characterSkinName = \"Default\") Parameters Type Name Description String characterClassName String characterSkinName SetNormalMaterial() Declaration public void SetNormalMaterial() Implements IEffectPlayable"
  },
  "api/CatchIo.PlayerCharacter.CharacterSkin.html": {
    "href": "api/CatchIo.PlayerCharacter.CharacterSkin.html",
    "title": "Class CharacterSkin | Catch.io Developer Reference",
    "keywords": "Class CharacterSkin Base class for character skin. Inheritance Object CharacterSkin Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class CharacterSkin Constructors CharacterSkin(Animator, SpriteRenderer) Declaration public CharacterSkin(Animator characterAnimator, SpriteRenderer characterRenderer) Parameters Type Name Description Animator characterAnimator SpriteRenderer characterRenderer Properties CharacterAnimator Declaration public Animator CharacterAnimator { get; } Property Value Type Description Animator CharacterClassName Declaration public string CharacterClassName { get; } Property Value Type Description String CharacterRenderer Declaration public SpriteRenderer CharacterRenderer { get; } Property Value Type Description SpriteRenderer CharacterRuntimeAnimatorController Declaration public RuntimeAnimatorController CharacterRuntimeAnimatorController { get; } Property Value Type Description RuntimeAnimatorController CharacterSkinName Declaration public string CharacterSkinName { get; } Property Value Type Description String FootprintPrefabPath Declaration public string FootprintPrefabPath { get; } Property Value Type Description String Methods SetCharacterAnimatorController(String, String) Declaration public void SetCharacterAnimatorController(string characterClassName, string characterSkinName) Parameters Type Name Description String characterClassName String characterSkinName"
  },
  "api/CatchIo.PlayerCharacter.CharacterStatus.html": {
    "href": "api/CatchIo.PlayerCharacter.CharacterStatus.html",
    "title": "Class CharacterStatus | Catch.io Developer Reference",
    "keywords": "Class CharacterStatus Inheritance Object CharacterStatus Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class CharacterStatus : ScriptableObject Fields Acceleration Declaration public float Acceleration Field Value Type Description Single AccelPower Declaration public float AccelPower Field Value Type Description Single ActionState Declaration public CharacterActionState ActionState Field Value Type Description CharacterActionState AttackStamina Declaration public float AttackStamina Field Value Type Description Single BackstabDamageMultiplier Declaration public float BackstabDamageMultiplier Field Value Type Description Single Buffs Declaration public List<Buff> Buffs Field Value Type Description List < Buff > CurrentViewAngle Declaration public int CurrentViewAngle Field Value Type Description Int32 Deceleration Declaration public float Deceleration Field Value Type Description Single DecreaseStaminaPerSecWhenRunning Declaration public float DecreaseStaminaPerSecWhenRunning Field Value Type Description Single FrictionAmount Declaration public float FrictionAmount Field Value Type Description Single IsSpectator Declaration public bool IsSpectator Field Value Type Description Boolean MAX_THROW_HEIGHT Declaration public const float MAX_THROW_HEIGHT = 3F Field Value Type Description Single MaxHealth Declaration public float MaxHealth Field Value Type Description Single MaxStamina Declaration public float MaxStamina Field Value Type Description Single MeleeDamage Declaration public float MeleeDamage Field Value Type Description Single MIN_VIEW_SLICE Declaration public const float MIN_VIEW_SLICE = 45F Field Value Type Description Single MoveSpeed Declaration public float MoveSpeed Field Value Type Description Single MoveState Declaration public CharacterMoveState MoveState Field Value Type Description CharacterMoveState OnHealth01Changed Declaration public Action<float> OnHealth01Changed Field Value Type Description Action < Single > OnLookDirectionChanged Declaration public Action OnLookDirectionChanged Field Value Type Description Action OnStamina01Changed Declaration public Action<float> OnStamina01Changed Field Value Type Description Action < Single > RunSpeedMultiplier Declaration public float RunSpeedMultiplier Field Value Type Description Single SneakSpeedMultiplier Declaration public float SneakSpeedMultiplier Field Value Type Description Single StaminaRecoveryPerSec Declaration public float StaminaRecoveryPerSec Field Value Type Description Single StaminaRecoveryTime Declaration public float StaminaRecoveryTime Field Value Type Description Single StopPower Declaration public float StopPower Field Value Type Description Single THROW_DURATION Declaration public const float THROW_DURATION = 1F Field Value Type Description Single ThrowRadius Declaration public float ThrowRadius Field Value Type Description Single ThrowStamina Declaration public float ThrowStamina Field Value Type Description Single TurnPower Declaration public float TurnPower Field Value Type Description Single Properties CanAttack Declaration public bool CanAttack { get; } Property Value Type Description Boolean CanLook Declaration public bool CanLook { get; } Property Value Type Description Boolean CanMove Declaration public bool CanMove { get; } Property Value Type Description Boolean CanRecoverStamina Declaration public bool CanRecoverStamina { get; } Property Value Type Description Boolean CanRun Declaration public bool CanRun { get; } Property Value Type Description Boolean CanThrow Declaration public bool CanThrow { get; } Property Value Type Description Boolean Health Declaration public float Health { get; set; } Property Value Type Description Single IsDead Declaration public bool IsDead { get; } Property Value Type Description Boolean IsRunning Declaration public bool IsRunning { get; } Property Value Type Description Boolean IsStaying Declaration public bool IsStaying { get; } Property Value Type Description Boolean LookDirectionState Declaration public CharacterDirectionState LookDirectionState { get; set; } Property Value Type Description CharacterDirectionState Name Declaration public string Name { get; set; } Property Value Type Description String Stamina Declaration public float Stamina { get; set; } Property Value Type Description Single Methods DamageHealth(Single) Declaration public void DamageHealth(float damage) Parameters Type Name Description Single damage GetDragForce(Vector2) Declaration public Vector2 GetDragForce(Vector2 currentVelocity) Parameters Type Name Description Vector2 currentVelocity Returns Type Description Vector2 GetMeleeDamage(CharacterDirectionState) Declaration public float GetMeleeDamage(CharacterDirectionState targetCharacterDir) Parameters Type Name Description CharacterDirectionState targetCharacterDir Returns Type Description Single GetMovementVelocity(Single, Single, Single) Declaration public float GetMovementVelocity(float currentMovement, float targetMovement, float lerpAmount = 1F) Parameters Type Name Description Single currentMovement Single targetMovement Single lerpAmount Returns Type Description Single GetMoveSpeed() Declaration public float GetMoveSpeed() Returns Type Description Single HealHealth(Single) Declaration public void HealHealth(float healAmount) Parameters Type Name Description Single healAmount HealStamina(Single) Declaration public void HealStamina(float healAmount) Parameters Type Name Description Single healAmount RecoverStamina() Declaration public void RecoverStamina() Reset() Declaration public void Reset() SetMoveState(Vector2, Boolean, Boolean) Declaration public void SetMoveState(Vector2 moveInput, bool inputCrouch, bool inputRun) Parameters Type Name Description Vector2 moveInput Boolean inputCrouch Boolean inputRun SetViewAngle(Int32) Declaration public void SetViewAngle(int viewAngle) Parameters Type Name Description Int32 viewAngle UseStamina(Single) Declaration public void UseStamina(float stamina) Parameters Type Name Description Single stamina UseStaminaPerSec(Single) Declaration public void UseStaminaPerSec(float decreaseStaminaPerSec) Parameters Type Name Description Single decreaseStaminaPerSec"
  },
  "api/CatchIo.PlayerCharacter.DeadBody.html": {
    "href": "api/CatchIo.PlayerCharacter.DeadBody.html",
    "title": "Class DeadBody | Catch.io Developer Reference",
    "keywords": "Class DeadBody Inheritance Object DeadBody Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class DeadBody : MonoBehaviourPun Fields CharacterRenderer Declaration public CharacterRenderer CharacterRenderer Field Value Type Description CharacterRenderer Methods RPC_SetBodyNickName(String) Declaration public void RPC_SetBodyNickName(string nickName) Parameters Type Name Description String nickName RPC_SetBodySkin(String, String) Declaration public void RPC_SetBodySkin(string characterClassName, string characterSkinName) Parameters Type Name Description String characterClassName String characterSkinName"
  },
  "api/CatchIo.PlayerCharacter.DeathToSpectatorContorller.html": {
    "href": "api/CatchIo.PlayerCharacter.DeathToSpectatorContorller.html",
    "title": "Class DeathToSpectatorContorller | Catch.io Developer Reference",
    "keywords": "Class DeathToSpectatorContorller Inheritance Object DeathToSpectatorContorller Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class DeathToSpectatorContorller : MonoBehaviour Methods SpawnDeadBody() Declaration public void SpawnDeadBody()"
  },
  "api/CatchIo.PlayerCharacter.html": {
    "href": "api/CatchIo.PlayerCharacter.html",
    "title": "Namespace CatchIo.PlayerCharacter | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.PlayerCharacter Classes Character Base class for all character data control. CharacterAnimation This class plays player animations in animator. TODO : Make this an element of CharacterRenderer. CharacterAttack CharacterController Base class for character control by player inputs. CharacterFOV This class implements the FOV light effect behavior that is controlled by the player character's view. CharacterHide CharacterHitbox This class performs to character collider. CharacterItemCollector CharacterRenderer CharacterSkin Base class for character skin. CharacterStatus DeadBody DeathToSpectatorContorller Inventory This class is container for items. InventoryController This class controls what Inventory class related to. SurfaceDetector SurfaceEffectPlayer TestCharacter Interfaces IHitable Interface for objects that can take damage. Object taking damage must implement the OnDamage function, and objects that gives damage should call that function and pass the damage value. ISurfaceObservable Enums CharacterActionState Enum for character action states. CharacterDirectionState CharacterMoveState Enum for character move state."
  },
  "api/CatchIo.PlayerCharacter.IHitable.html": {
    "href": "api/CatchIo.PlayerCharacter.IHitable.html",
    "title": "Interface IHitable | Catch.io Developer Reference",
    "keywords": "Interface IHitable Interface for objects that can take damage. Object taking damage must implement the OnDamage function, and objects that gives damage should call that function and pass the damage value. Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public interface IHitable Methods OnHit(Character, Single) Declaration void OnHit(Character attacker, float damage) Parameters Type Name Description Character attacker Single damage"
  },
  "api/CatchIo.PlayerCharacter.Inventory.html": {
    "href": "api/CatchIo.PlayerCharacter.Inventory.html",
    "title": "Class Inventory | Catch.io Developer Reference",
    "keywords": "Class Inventory This class is container for items. Inheritance Object Inventory Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class Inventory Constructors Inventory(Int32) Declaration public Inventory(int maxInventorySize = 5) Parameters Type Name Description Int32 maxInventorySize Fields OnAddItem Declaration public Action<int, Item> OnAddItem Field Value Type Description Action < Int32 , Item > OnReleaseItem Declaration public Action<int> OnReleaseItem Field Value Type Description Action < Int32 > OnRemoveItem Declaration public Action<int> OnRemoveItem Field Value Type Description Action < Int32 > OnSelectItem Declaration public Action<int> OnSelectItem Field Value Type Description Action < Int32 > Methods AddItem(Item) Declaration public void AddItem(Item newItem) Parameters Type Name Description Item newItem Draw() Declaration public void Draw() GetCount() Declaration public int GetCount() Returns Type Description Int32 GetExistInventoryIndex() Declaration public int GetExistInventoryIndex() Returns Type Description Int32 GetItem(Int32) Declaration public Item GetItem(int slotNo) Parameters Type Name Description Int32 slotNo Returns Type Description Item IsEmpty() Declaration public bool IsEmpty() Returns Type Description Boolean IsFull() Declaration public bool IsFull() Returns Type Description Boolean RemoveItem() Declaration public void RemoveItem() RemoveItem(Int32) Declaration public void RemoveItem(int slotNo) Parameters Type Name Description Int32 slotNo SelectItem(Int32) Declaration public void SelectItem(int index) Parameters Type Name Description Int32 index ToArray() Declaration public Item[] ToArray() Returns Type Description Item []"
  },
  "api/CatchIo.PlayerCharacter.InventoryController.html": {
    "href": "api/CatchIo.PlayerCharacter.InventoryController.html",
    "title": "Class InventoryController | Catch.io Developer Reference",
    "keywords": "Class InventoryController This class controls what Inventory class related to. Inheritance Object InventoryController Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class InventoryController : MonoBehaviour Fields OnInventoryCreated Declaration public Action OnInventoryCreated Field Value Type Description Action Properties Inventory Declaration public Inventory Inventory { get; } Property Value Type Description Inventory Methods ClearInventory() Declaration public void ClearInventory() Draw() Declaration public void Draw() SelectItem(Int32) Declaration public void SelectItem(int inputInvIndex) Parameters Type Name Description Int32 inputInvIndex Start() Declaration public void Start() Update() Unity update function (runs every frame) Declaration public void Update()"
  },
  "api/CatchIo.PlayerCharacter.ISurfaceObservable.html": {
    "href": "api/CatchIo.PlayerCharacter.ISurfaceObservable.html",
    "title": "Interface ISurfaceObservable | Catch.io Developer Reference",
    "keywords": "Interface ISurfaceObservable Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public interface ISurfaceObservable Methods OnSurfaceChanged(Nullable<TileSurface>) Declaration void OnSurfaceChanged(TileSurface? newSurface) Parameters Type Name Description Nullable < TileSurface > newSurface"
  },
  "api/CatchIo.PlayerCharacter.SurfaceDetector.html": {
    "href": "api/CatchIo.PlayerCharacter.SurfaceDetector.html",
    "title": "Class SurfaceDetector | Catch.io Developer Reference",
    "keywords": "Class SurfaceDetector Inheritance Object SurfaceDetector Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class SurfaceDetector : MonoBehaviour Properties CurrentTileSurface Declaration public TileSurface? CurrentTileSurface { get; } Property Value Type Description Nullable < TileSurface > Methods UpdateCurrentSurface(ISurfaceObservable) Declaration public void UpdateCurrentSurface(ISurfaceObservable observer) Parameters Type Name Description ISurfaceObservable observer"
  },
  "api/CatchIo.PlayerCharacter.SurfaceEffectPlayer.html": {
    "href": "api/CatchIo.PlayerCharacter.SurfaceEffectPlayer.html",
    "title": "Class SurfaceEffectPlayer | Catch.io Developer Reference",
    "keywords": "Class SurfaceEffectPlayer Inheritance Object SurfaceEffectPlayer Implements ISurfaceObservable Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public class SurfaceEffectPlayer : MonoBehaviour, ISurfaceObservable Fields MIN_FOOTSTEP_EFFECT_TIME Declaration public const float MIN_FOOTSTEP_EFFECT_TIME = 0.1F Field Value Type Description Single Properties LastFootstepEffectTime Declaration public float LastFootstepEffectTime { get; set; } Property Value Type Description Single Methods CanGenerateFootprint() Declaration public bool CanGenerateFootprint() Returns Type Description Boolean CanPlayFootstepSfx() Declaration public bool CanPlayFootstepSfx() Returns Type Description Boolean GenerateFootprint() Generate footprint gameObject Declaration public void GenerateFootprint() OnSurfaceChanged(Nullable<TileSurface>) Declaration public void OnSurfaceChanged(TileSurface? newSurface) Parameters Type Name Description Nullable < TileSurface > newSurface PlayFootstepSfx() Generate SoundWave gameObject Declaration public void PlayFootstepSfx() Implements ISurfaceObservable"
  },
  "api/CatchIo.PlayerCharacter.TestCharacter.html": {
    "href": "api/CatchIo.PlayerCharacter.TestCharacter.html",
    "title": "Class TestCharacter | Catch.io Developer Reference",
    "keywords": "Class TestCharacter Inheritance Object Character TestCharacter Implements IPunObservable IPunInstantiateMagicCallback Inherited Members Character.CharacterRenderer Character.HoldingItem Character.CharacterStatus Character.CanControl Character.AddItemToInventoryAction Character.RemoveHoldingItemAction Character.OnDeath Character.OnRespawn Character.OnCharacterStatusChanged Character.HeadUpOffset Character.SetCharacterNickName(String) Character.SetCharacterSkin(String, String) Character.Drag(Single) Character.Move(Vector2) Character.Look(Vector2) Character.ThrowItem(ThrowableItem, Vector2) Character.ConsumeItem(ConsumableItem) Character.PickupItem(Item) Character.DiscardHoldingItem() Character.TakeDamage(Single) Character.HealHealth(Single) Character.HealStamina(Single) Character.SetMoveState(Vector2, Boolean, Boolean) Character.ResetActionState() Character.ChangeToSpectatorState() Character.GenerateFootprint(Vector3, Boolean) Character.Draw() Character.GetClosestTransform<T>(Vector3, List<T>, Boolean) Character.GetVelocity() Character.OnPhotonInstantiate(PhotonMessageInfo) Character.RPC_GenerateSoundWave(Vector3, Single) Character.RPC_TakeDamage(Single) Character.RPC_PickupItem(Int32) Character.RPC_ThrowItem(Int32, Vector2, Vector2) Character.OnPhotonSerializeView(PhotonStream, PhotonMessageInfo) Namespace : CatchIo.PlayerCharacter Assembly : cs.temp.dll.dll Syntax public sealed class TestCharacter : Character Fields ActionDelay Declaration public float ActionDelay Field Value Type Description Single IsPlayingOnEditor Declaration public bool IsPlayingOnEditor Field Value Type Description Boolean TestingAction Declaration public CharacterActionState TestingAction Field Value Type Description CharacterActionState Methods Awake() Declaration protected override void Awake() Overrides Character.Awake() Update() Declaration protected override void Update() Overrides Character.Update() Implements IPunObservable IPunInstantiateMagicCallback"
  },
  "api/CatchIo.ProjectileMotion.html": {
    "href": "api/CatchIo.ProjectileMotion.html",
    "title": "Namespace CatchIo.ProjectileMotion | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.ProjectileMotion Classes TrajectoryArc This class contains to projectile motion data. Interfaces IThrowable Interface for throwable items."
  },
  "api/CatchIo.ProjectileMotion.IThrowable.html": {
    "href": "api/CatchIo.ProjectileMotion.IThrowable.html",
    "title": "Interface IThrowable | Catch.io Developer Reference",
    "keywords": "Interface IThrowable Interface for throwable items. Namespace : CatchIo.ProjectileMotion Assembly : cs.temp.dll.dll Syntax public interface IThrowable Properties IsOnFloor Declaration bool IsOnFloor { get; } Property Value Type Description Boolean Methods OnBeforeThrow(Vector2, Vector2) Declaration void OnBeforeThrow(Vector2 throwPos, Vector2 targetPos) Parameters Type Name Description Vector2 throwPos Vector2 targetPos OnLanded() Declaration void OnLanded() UpdateProjectilePath(Vector2, Vector2, Single) Declaration void UpdateProjectilePath(Vector2 thrownPos, Vector2 targetPos, float throwRadius) Parameters Type Name Description Vector2 thrownPos Vector2 targetPos Single throwRadius"
  },
  "api/CatchIo.ProjectileMotion.TrajectoryArc.html": {
    "href": "api/CatchIo.ProjectileMotion.TrajectoryArc.html",
    "title": "Class TrajectoryArc | Catch.io Developer Reference",
    "keywords": "Class TrajectoryArc This class contains to projectile motion data. Inheritance Object TrajectoryArc Namespace : CatchIo.ProjectileMotion Assembly : cs.temp.dll.dll Syntax public class TrajectoryArc Constructors TrajectoryArc() Declaration public TrajectoryArc() TrajectoryArc(Single, Vector3[]) Declaration public TrajectoryArc(float timeToTarget, Vector3[] trajectoryPath) Parameters Type Name Description Single timeToTarget Vector3 [] trajectoryPath Fields NUM_OF_POINTS Declaration public const int NUM_OF_POINTS = 50 Field Value Type Description Int32 TimeToTarget Declaration public float TimeToTarget Field Value Type Description Single TrajectoryPath Declaration public Vector3[] TrajectoryPath Field Value Type Description Vector3 [] Methods GetFinalPosition() Declaration public Vector3 GetFinalPosition() Returns Type Description Vector3 GetStartPosition() Declaration public Vector3 GetStartPosition() Returns Type Description Vector3 UpdateTrajectoryArc(Single, Vector3[]) Declaration public void UpdateTrajectoryArc(float timeToTarget, Vector3[] trajectoryPath) Parameters Type Name Description Single timeToTarget Vector3 [] trajectoryPath"
  },
  "api/CatchIo.ScriptableObjects.DescriptionBaseSO.html": {
    "href": "api/CatchIo.ScriptableObjects.DescriptionBaseSO.html",
    "title": "Class DescriptionBaseSO | Catch.io Developer Reference",
    "keywords": "Class DescriptionBaseSO Base class for ScriptableObjects that need a public description field. Inheritance Object SerializableScriptableObject DescriptionBaseSO BoolEventChannelSO HidingSpotEventChannelSO VoidEventChannelSO BoolVariable FloatVariable Inherited Members SerializableScriptableObject.Guid Namespace : CatchIo.ScriptableObjects Assembly : cs.temp.dll.dll Syntax public class DescriptionBaseSO : SerializableScriptableObject Fields description Declaration public string description Field Value Type Description String"
  },
  "api/CatchIo.ScriptableObjects.Events.BoolEventChannelSO.html": {
    "href": "api/CatchIo.ScriptableObjects.Events.BoolEventChannelSO.html",
    "title": "Class BoolEventChannelSO | Catch.io Developer Reference",
    "keywords": "Class BoolEventChannelSO Inheritance Object SerializableScriptableObject DescriptionBaseSO BoolEventChannelSO Inherited Members DescriptionBaseSO.description SerializableScriptableObject.Guid Namespace : CatchIo.ScriptableObjects.Events Assembly : cs.temp.dll.dll Syntax public class BoolEventChannelSO : DescriptionBaseSO Methods AddListener(UnityAction<Boolean>) Declaration public void AddListener(UnityAction<bool> listener) Parameters Type Name Description UnityAction < Boolean > listener RaiseEvent(Boolean) Declaration public void RaiseEvent(bool value) Parameters Type Name Description Boolean value RemoveListener(UnityAction<Boolean>) Declaration public void RemoveListener(UnityAction<bool> listener) Parameters Type Name Description UnityAction < Boolean > listener"
  },
  "api/CatchIo.ScriptableObjects.Events.HidingSpotEventChannelSO.html": {
    "href": "api/CatchIo.ScriptableObjects.Events.HidingSpotEventChannelSO.html",
    "title": "Class HidingSpotEventChannelSO | Catch.io Developer Reference",
    "keywords": "Class HidingSpotEventChannelSO Inheritance Object SerializableScriptableObject DescriptionBaseSO HidingSpotEventChannelSO Inherited Members DescriptionBaseSO.description SerializableScriptableObject.Guid Namespace : CatchIo.ScriptableObjects.Events Assembly : cs.temp.dll.dll Syntax public class HidingSpotEventChannelSO : DescriptionBaseSO Methods AddListener(UnityAction<HidingSpot>) Declaration public void AddListener(UnityAction<HidingSpot> listener) Parameters Type Name Description UnityAction < HidingSpot > listener RaiseEvent(HidingSpot) Declaration public void RaiseEvent(HidingSpot hidingSpot) Parameters Type Name Description HidingSpot hidingSpot RemoveListener(UnityAction<HidingSpot>) Declaration public void RemoveListener(UnityAction<HidingSpot> listener) Parameters Type Name Description UnityAction < HidingSpot > listener"
  },
  "api/CatchIo.ScriptableObjects.Events.html": {
    "href": "api/CatchIo.ScriptableObjects.Events.html",
    "title": "Namespace CatchIo.ScriptableObjects.Events | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.ScriptableObjects.Events Classes BoolEventChannelSO HidingSpotEventChannelSO VoidEventChannelSO"
  },
  "api/CatchIo.ScriptableObjects.Events.VoidEventChannelSO.html": {
    "href": "api/CatchIo.ScriptableObjects.Events.VoidEventChannelSO.html",
    "title": "Class VoidEventChannelSO | Catch.io Developer Reference",
    "keywords": "Class VoidEventChannelSO Inheritance Object SerializableScriptableObject DescriptionBaseSO VoidEventChannelSO Inherited Members DescriptionBaseSO.description SerializableScriptableObject.Guid Namespace : CatchIo.ScriptableObjects.Events Assembly : cs.temp.dll.dll Syntax public class VoidEventChannelSO : DescriptionBaseSO Methods AddListener(UnityAction) Declaration public void AddListener(UnityAction listener) Parameters Type Name Description UnityAction listener RaiseEvent() Declaration public void RaiseEvent() RemoveListener(UnityAction) Declaration public void RemoveListener(UnityAction listener) Parameters Type Name Description UnityAction listener"
  },
  "api/CatchIo.ScriptableObjects.html": {
    "href": "api/CatchIo.ScriptableObjects.html",
    "title": "Namespace CatchIo.ScriptableObjects | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.ScriptableObjects Classes DescriptionBaseSO Base class for ScriptableObjects that need a public description field. SerializableScriptableObject"
  },
  "api/CatchIo.ScriptableObjects.SerializableScriptableObject.html": {
    "href": "api/CatchIo.ScriptableObjects.SerializableScriptableObject.html",
    "title": "Class SerializableScriptableObject | Catch.io Developer Reference",
    "keywords": "Class SerializableScriptableObject Inheritance Object SerializableScriptableObject DescriptionBaseSO Namespace : CatchIo.ScriptableObjects Assembly : cs.temp.dll.dll Syntax public class SerializableScriptableObject : ScriptableObject Properties Guid Declaration public string Guid { get; } Property Value Type Description String"
  },
  "api/CatchIo.ScriptableObjects.Variables.BoolReference.html": {
    "href": "api/CatchIo.ScriptableObjects.Variables.BoolReference.html",
    "title": "Class BoolReference | Catch.io Developer Reference",
    "keywords": "Class BoolReference Inheritance Object BoolReference Namespace : CatchIo.ScriptableObjects.Variables Assembly : cs.temp.dll.dll Syntax [Serializable] public class BoolReference Fields Variable Declaration public BoolVariable Variable Field Value Type Description BoolVariable Properties Value Declaration public bool Value { get; } Property Value Type Description Boolean"
  },
  "api/CatchIo.ScriptableObjects.Variables.BoolVariable.html": {
    "href": "api/CatchIo.ScriptableObjects.Variables.BoolVariable.html",
    "title": "Class BoolVariable | Catch.io Developer Reference",
    "keywords": "Class BoolVariable Inheritance Object SerializableScriptableObject DescriptionBaseSO BoolVariable Implements ISerializationCallbackReceiver Inherited Members DescriptionBaseSO.description SerializableScriptableObject.Guid Namespace : CatchIo.ScriptableObjects.Variables Assembly : cs.temp.dll.dll Syntax public class BoolVariable : DescriptionBaseSO Fields RuntimeValue Declaration public bool RuntimeValue Field Value Type Description Boolean Methods OnAfterDeserialize() Declaration public void OnAfterDeserialize() OnBeforeSerialize() Declaration public void OnBeforeSerialize() Implements ISerializationCallbackReceiver"
  },
  "api/CatchIo.ScriptableObjects.Variables.FloatReference.html": {
    "href": "api/CatchIo.ScriptableObjects.Variables.FloatReference.html",
    "title": "Class FloatReference | Catch.io Developer Reference",
    "keywords": "Class FloatReference Inheritance Object FloatReference Namespace : CatchIo.ScriptableObjects.Variables Assembly : cs.temp.dll.dll Syntax [Serializable] public class FloatReference Properties Value Declaration public float Value { get; } Property Value Type Description Single"
  },
  "api/CatchIo.ScriptableObjects.Variables.FloatVariable.html": {
    "href": "api/CatchIo.ScriptableObjects.Variables.FloatVariable.html",
    "title": "Class FloatVariable | Catch.io Developer Reference",
    "keywords": "Class FloatVariable Inheritance Object SerializableScriptableObject DescriptionBaseSO FloatVariable Inherited Members DescriptionBaseSO.description SerializableScriptableObject.Guid Namespace : CatchIo.ScriptableObjects.Variables Assembly : cs.temp.dll.dll Syntax public class FloatVariable : DescriptionBaseSO Fields Value Declaration public float Value Field Value Type Description Single"
  },
  "api/CatchIo.ScriptableObjects.Variables.html": {
    "href": "api/CatchIo.ScriptableObjects.Variables.html",
    "title": "Namespace CatchIo.ScriptableObjects.Variables | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.ScriptableObjects.Variables Classes BoolReference BoolVariable FloatReference FloatVariable"
  },
  "api/CatchIo.Sound.CharacterActionSfx.html": {
    "href": "api/CatchIo.Sound.CharacterActionSfx.html",
    "title": "Class CharacterActionSfx | Catch.io Developer Reference",
    "keywords": "Class CharacterActionSfx Inheritance Object Sfx CharacterActionSfx Inherited Members Sfx.EventInstance Namespace : CatchIo.Sound Assembly : cs.temp.dll.dll Syntax public class CharacterActionSfx : Sfx Constructors CharacterActionSfx() Declaration public CharacterActionSfx() Methods Play(Vector3, String, Single) Declaration public override void Play(Vector3 generatePos, string characterActionType, float volume = 1F) Parameters Type Name Description Vector3 generatePos String characterActionType Single volume Overrides Sfx.Play(Vector3, String, Single)"
  },
  "api/CatchIo.Sound.FootstepSfx.html": {
    "href": "api/CatchIo.Sound.FootstepSfx.html",
    "title": "Class FootstepSfx | Catch.io Developer Reference",
    "keywords": "Class FootstepSfx Inheritance Object Sfx TerrainSfx FootstepSfx Inherited Members Sfx.EventInstance Namespace : CatchIo.Sound Assembly : cs.temp.dll.dll Syntax public class FootstepSfx : TerrainSfx Constructors FootstepSfx() Declaration public FootstepSfx() Methods Play(Vector3, String, Single) Declaration public override void Play(Vector3 generatePos, string terrainName, float terrainVolume = 1F) Parameters Type Name Description Vector3 generatePos String terrainName Single terrainVolume Overrides TerrainSfx.Play(Vector3, String, Single)"
  },
  "api/CatchIo.Sound.html": {
    "href": "api/CatchIo.Sound.html",
    "title": "Namespace CatchIo.Sound | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.Sound Classes CharacterActionSfx FootstepSfx ItemSfx Sfx SoundManager TerrainSfx"
  },
  "api/CatchIo.Sound.ItemSfx.html": {
    "href": "api/CatchIo.Sound.ItemSfx.html",
    "title": "Class ItemSfx | Catch.io Developer Reference",
    "keywords": "Class ItemSfx Inheritance Object Sfx ItemSfx Inherited Members Sfx.EventInstance Namespace : CatchIo.Sound Assembly : cs.temp.dll.dll Syntax public class ItemSfx : Sfx Constructors ItemSfx() Declaration public ItemSfx() Methods Play(Vector3, String, Single) Declaration public override void Play(Vector3 generatePos, string itemType, float volume = 1F) Parameters Type Name Description Vector3 generatePos String itemType Single volume Overrides Sfx.Play(Vector3, String, Single)"
  },
  "api/CatchIo.Sound.Sfx.html": {
    "href": "api/CatchIo.Sound.Sfx.html",
    "title": "Class Sfx | Catch.io Developer Reference",
    "keywords": "Class Sfx Inheritance Object Sfx CharacterActionSfx ItemSfx TerrainSfx Namespace : CatchIo.Sound Assembly : cs.temp.dll.dll Syntax public abstract class Sfx Fields EventInstance Declaration protected EventInstance EventInstance Field Value Type Description EventInstance Methods Play(Vector3, String, Single) Declaration public abstract void Play(Vector3 generatePos, string labelName, float volume = 1F) Parameters Type Name Description Vector3 generatePos String labelName Single volume"
  },
  "api/CatchIo.Sound.SoundManager.html": {
    "href": "api/CatchIo.Sound.SoundManager.html",
    "title": "Class SoundManager | Catch.io Developer Reference",
    "keywords": "Class SoundManager Inheritance Object SoundManager Namespace : CatchIo.Sound Assembly : cs.temp.dll.dll Syntax public class SoundManager : MonoBehaviourPun Properties Instance Declaration public static SoundManager Instance { get; protected set; } Property Value Type Description SoundManager Methods PlayCharacterActionSfx(Vector3, String) Declaration public void PlayCharacterActionSfx(Vector3 generatePos, string actionType) Parameters Type Name Description Vector3 generatePos String actionType PlayFootstepSfx(Vector3, String, CharacterMoveState) Declaration public void PlayFootstepSfx(Vector3 generatePos, string terrainName, CharacterMoveState moveState) Parameters Type Name Description Vector3 generatePos String terrainName CharacterMoveState moveState PlayItemSfx(Vector3, String, Single) Declaration public void PlayItemSfx(Vector3 generatePos, string itemType, float volume) Parameters Type Name Description Vector3 generatePos String itemType Single volume PlayTerrainSfx(Vector3, String) Declaration public void PlayTerrainSfx(Vector3 generatePos, string terrainName) Parameters Type Name Description Vector3 generatePos String terrainName RPC_PlayCharacterActionSfx(Vector3, String) Declaration public void RPC_PlayCharacterActionSfx(Vector3 generatePos, string actionType) Parameters Type Name Description Vector3 generatePos String actionType RPC_PlayFootstepSfx(Vector3, String, Single) Declaration public void RPC_PlayFootstepSfx(Vector3 generatePos, string terrainName, float volume) Parameters Type Name Description Vector3 generatePos String terrainName Single volume RPC_PlayItemSfx(Vector3, String, Single) Declaration public void RPC_PlayItemSfx(Vector3 generatePos, string itemType, float volume) Parameters Type Name Description Vector3 generatePos String itemType Single volume RPC_PlayTerrainSfx(Vector3, String) Declaration public void RPC_PlayTerrainSfx(Vector3 generatePos, string terrainName) Parameters Type Name Description Vector3 generatePos String terrainName"
  },
  "api/CatchIo.Sound.TerrainSfx.html": {
    "href": "api/CatchIo.Sound.TerrainSfx.html",
    "title": "Class TerrainSfx | Catch.io Developer Reference",
    "keywords": "Class TerrainSfx Inheritance Object Sfx TerrainSfx FootstepSfx Inherited Members Sfx.EventInstance Namespace : CatchIo.Sound Assembly : cs.temp.dll.dll Syntax public class TerrainSfx : Sfx Constructors TerrainSfx() Declaration public TerrainSfx() Methods Play(Vector3, String, Single) Declaration public override void Play(Vector3 generatePos, string terrainName, float terrainVolume = 1F) Parameters Type Name Description Vector3 generatePos String terrainName Single terrainVolume Overrides Sfx.Play(Vector3, String, Single)"
  },
  "api/CatchIo.UI.CharacterClassContext.html": {
    "href": "api/CatchIo.UI.CharacterClassContext.html",
    "title": "Class CharacterClassContext | Catch.io Developer Reference",
    "keywords": "Class CharacterClassContext Inheritance Object CharacterClassContext Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class CharacterClassContext : Context Constructors CharacterClassContext(CharacterClassType) Declaration public CharacterClassContext(CharacterClassType classCharacterClassType) Parameters Type Name Description CharacterClassType classCharacterClassType Fields CharacterSpritePath Declaration public string CharacterSpritePath Field Value Type Description String Properties ClassName Declaration public string ClassName { get; set; } Property Value Type Description String ClassSprite Declaration public Sprite ClassSprite { get; set; } Property Value Type Description Sprite Methods SelectCharacterClass() Declaration public void SelectCharacterClass()"
  },
  "api/CatchIo.UI.CollectionTextWriter.html": {
    "href": "api/CatchIo.UI.CollectionTextWriter.html",
    "title": "Class CollectionTextWriter | Catch.io Developer Reference",
    "keywords": "Class CollectionTextWriter Inheritance Object CollectionTextWriter Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public abstract class CollectionTextWriter : MonoBehaviour Methods CollectionItemAdded(Object) Declaration protected abstract void CollectionItemAdded(object item) Parameters Type Name Description Object item CollectionItemRemoved(Object) Declaration protected abstract void CollectionItemRemoved(object item) Parameters Type Name Description Object item CollectionOnClearedItems(IEnumerable<Object>) Declaration protected abstract void CollectionOnClearedItems(IEnumerable<object> items) Parameters Type Name Description IEnumerable < Object > items"
  },
  "api/CatchIo.UI.ErrorMessageContext.html": {
    "href": "api/CatchIo.UI.ErrorMessageContext.html",
    "title": "Class ErrorMessageContext | Catch.io Developer Reference",
    "keywords": "Class ErrorMessageContext Inheritance Object UINavigationContext < UIMenuViewType > ErrorMessageContext Inherited Members UINavigationContext<UIMenuViewType>.UINavigation Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class ErrorMessageContext : UINavigationContext<UIMenuViewType> Constructors ErrorMessageContext(UINavigation<UIMenuViewType>) Declaration public ErrorMessageContext(UINavigation<UIMenuViewType> nav) Parameters Type Name Description UINavigation < UIMenuViewType > nav Properties ErrorMsg Declaration public string ErrorMsg { get; set; } Property Value Type Description String Methods Hide() Declaration public void Hide()"
  },
  "api/CatchIo.UI.FpsAndPingUI.html": {
    "href": "api/CatchIo.UI.FpsAndPingUI.html",
    "title": "Class FpsAndPingUI | Catch.io Developer Reference",
    "keywords": "Class FpsAndPingUI Inheritance Object FpsAndPingUI Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class FpsAndPingUI : MonoBehaviour Methods OnValueChanged(String, Boolean) Declaration public void OnValueChanged(string amount, bool isPing) Parameters Type Name Description String amount Boolean isPing"
  },
  "api/CatchIo.UI.GameHudContext.html": {
    "href": "api/CatchIo.UI.GameHudContext.html",
    "title": "Class GameHudContext | Catch.io Developer Reference",
    "keywords": "Class GameHudContext Inheritance Object UINavigationContext < UIGameViewType > GameHudContext Inherited Members UINavigationContext<UIGameViewType>.UINavigation Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class GameHudContext : UINavigationContext<UIGameViewType> Constructors GameHudContext(UINavigation<UIGameViewType>) Declaration public GameHudContext(UINavigation<UIGameViewType> uiNavigation) Parameters Type Name Description UINavigation < UIGameViewType > uiNavigation"
  },
  "api/CatchIo.UI.GameLoadingContext.html": {
    "href": "api/CatchIo.UI.GameLoadingContext.html",
    "title": "Class GameLoadingContext | Catch.io Developer Reference",
    "keywords": "Class GameLoadingContext Inheritance Object UINavigationContext < UIGameViewType > GameLoadingContext Inherited Members UINavigationContext<UIGameViewType>.UINavigation Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class GameLoadingContext : UINavigationContext<UIGameViewType> Constructors GameLoadingContext(UINavigation<UIGameViewType>) Declaration public GameLoadingContext(UINavigation<UIGameViewType> nav) Parameters Type Name Description UINavigation < UIGameViewType > nav Properties LoadingCauseText Declaration public string LoadingCauseText { get; set; } Property Value Type Description String"
  },
  "api/CatchIo.UI.GameUIContext.html": {
    "href": "api/CatchIo.UI.GameUIContext.html",
    "title": "Class GameUIContext | Catch.io Developer Reference",
    "keywords": "Class GameUIContext Inheritance Object GameUIContext Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class GameUIContext : Context Constructors GameUIContext() Declaration public GameUIContext() Properties GameHudContext Declaration public GameHudContext GameHudContext { get; set; } Property Value Type Description GameHudContext GameLoadingContext Declaration public GameLoadingContext GameLoadingContext { get; set; } Property Value Type Description GameLoadingContext Methods OnBackToMainMenu() Declaration public void OnBackToMainMenu() OnRespawn() Declaration public void OnRespawn()"
  },
  "api/CatchIo.UI.GameUIManager.html": {
    "href": "api/CatchIo.UI.GameUIManager.html",
    "title": "Class GameUIManager | Catch.io Developer Reference",
    "keywords": "Class GameUIManager Inheritance Object GameUIManager Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class GameUIManager : MonoBehaviour Fields DeathMatchInfoText Declaration public TMPro.TextMeshProUGUI DeathMatchInfoText Field Value Type Description TMPro.TextMeshProUGUI DeathMatchUIPanel Declaration public GameObject DeathMatchUIPanel Field Value Type Description GameObject FpsText Declaration public TMPro.TextMeshProUGUI FpsText Field Value Type Description TMPro.TextMeshProUGUI GameOver Declaration public GameObject GameOver Field Value Type Description GameObject GameTimer Declaration public TMPro.TextMeshProUGUI GameTimer Field Value Type Description TMPro.TextMeshProUGUI MainCanvas Declaration public GameObject MainCanvas Field Value Type Description GameObject PingText Declaration public TMPro.TextMeshProUGUI PingText Field Value Type Description TMPro.TextMeshProUGUI PointText Declaration public TMPro.TextMeshProUGUI PointText Field Value Type Description TMPro.TextMeshProUGUI ShowFpsAndPing Declaration public bool ShowFpsAndPing Field Value Type Description Boolean Properties GameUIContext Declaration public GameUIContext GameUIContext { get; } Property Value Type Description GameUIContext HealthMeter Declaration public HudMeter HealthMeter { get; } Property Value Type Description HudMeter Instance Declaration public static GameUIManager Instance { get; } Property Value Type Description GameUIManager StaminaMeter Declaration public HudMeter StaminaMeter { get; } Property Value Type Description HudMeter UICamera Declaration public UnityEngine.Camera UICamera { get; } Property Value Type Description UnityEngine.Camera UINavigation Declaration public UINavigation<UIMenuViewType> UINavigation { get; } Property Value Type Description UINavigation < UIMenuViewType > Methods GameOverView() Declaration public void GameOverView() MakeUIGameViewTypeFile() Declaration public void MakeUIGameViewTypeFile() RestartView() Declaration public void RestartView()"
  },
  "api/CatchIo.UI.HidingIndicator.html": {
    "href": "api/CatchIo.UI.HidingIndicator.html",
    "title": "Class HidingIndicator | Catch.io Developer Reference",
    "keywords": "Class HidingIndicator Inheritance Object HidingIndicator Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class HidingIndicator : MonoBehaviour Methods DisableImage() Declaration public void DisableImage() PlayEyeClosingAnim() Declaration public void PlayEyeClosingAnim() PlayEyeOpeningAnim() Declaration public void PlayEyeOpeningAnim() TranslatePosition(Vector3) Declaration public void TranslatePosition(Vector3 characterScreenPos) Parameters Type Name Description Vector3 characterScreenPos"
  },
  "api/CatchIo.UI.html": {
    "href": "api/CatchIo.UI.html",
    "title": "Namespace CatchIo.UI | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.UI Classes CharacterClassContext CollectionTextWriter ErrorMessageContext FpsAndPingUI GameHudContext GameLoadingContext GameUIContext GameUIManager HidingIndicator HudMeter InventoryHUD InventorySlot LoadingContext LoadingPlayerProgress LobbyContext MainMenuContext MenuUIContext PointText RoomContext RoomInfoContext TextSetting This implements the behavior for the \"TextSetting\" UI Object, which allows users to click on adjacent arrows to switch the selected text within the provided text list. TitleContext ToggleText A subclass of Unity UI's Toggle with additional settings for Text to change by SelectionState. UIChatSender UINavigation<T> UINavigationContext<T> UIWindowFormat Enums UIGameViewType UIMenuViewType"
  },
  "api/CatchIo.UI.HudMeter.html": {
    "href": "api/CatchIo.UI.HudMeter.html",
    "title": "Class HudMeter | Catch.io Developer Reference",
    "keywords": "Class HudMeter Inheritance Object HudMeter Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class HudMeter : MonoBehaviour Methods OnValueChanged(Single) Declaration public void OnValueChanged(float newValue) Parameters Type Name Description Single newValue"
  },
  "api/CatchIo.UI.InventoryHUD.html": {
    "href": "api/CatchIo.UI.InventoryHUD.html",
    "title": "Class InventoryHUD | Catch.io Developer Reference",
    "keywords": "Class InventoryHUD Inheritance Object InventoryHUD Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class InventoryHUD : MonoBehaviour Fields SelectSlotSize Declaration public int SelectSlotSize Field Value Type Description Int32 Slots Declaration public Transform Slots Field Value Type Description Transform Methods AddItem(Int32, Item) Declaration public void AddItem(int index, Item newItem) Parameters Type Name Description Int32 index Item newItem InitInventoryHUD(Inventory) Declaration public void InitInventoryHUD(Inventory inventory) Parameters Type Name Description Inventory inventory ReleaseItem(Int32) Declaration public void ReleaseItem(int index) Parameters Type Name Description Int32 index RemoveItem(Int32) Declaration public void RemoveItem(int index) Parameters Type Name Description Int32 index SelectItem(Int32) Declaration public void SelectItem(int index) Parameters Type Name Description Int32 index"
  },
  "api/CatchIo.UI.InventorySlot.html": {
    "href": "api/CatchIo.UI.InventorySlot.html",
    "title": "Class InventorySlot | Catch.io Developer Reference",
    "keywords": "Class InventorySlot Inheritance Object InventorySlot Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class InventorySlot : MonoBehaviour Properties IsSelected Declaration public bool IsSelected { get; } Property Value Type Description Boolean Methods ReleaseSlot() Declaration public void ReleaseSlot() SelectSlot(Int32) Declaration public void SelectSlot(int size) Parameters Type Name Description Int32 size SetSprite(Sprite) Declaration public void SetSprite(Sprite itemSprite) Parameters Type Name Description Sprite itemSprite"
  },
  "api/CatchIo.UI.LoadingContext.html": {
    "href": "api/CatchIo.UI.LoadingContext.html",
    "title": "Class LoadingContext | Catch.io Developer Reference",
    "keywords": "Class LoadingContext Inheritance Object UINavigationContext < UIMenuViewType > LoadingContext Inherited Members UINavigationContext<UIMenuViewType>.UINavigation Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class LoadingContext : UINavigationContext<UIMenuViewType> Constructors LoadingContext(UINavigation<UIMenuViewType>) Declaration public LoadingContext(UINavigation<UIMenuViewType> nav) Parameters Type Name Description UINavigation < UIMenuViewType > nav Properties LoadingCauseText Declaration public string LoadingCauseText { get; set; } Property Value Type Description String"
  },
  "api/CatchIo.UI.LoadingPlayerProgress.html": {
    "href": "api/CatchIo.UI.LoadingPlayerProgress.html",
    "title": "Class LoadingPlayerProgress | Catch.io Developer Reference",
    "keywords": "Class LoadingPlayerProgress Inheritance Object LoadingPlayerProgress Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class LoadingPlayerProgress : MonoBehaviour"
  },
  "api/CatchIo.UI.LobbyContext.html": {
    "href": "api/CatchIo.UI.LobbyContext.html",
    "title": "Class LobbyContext | Catch.io Developer Reference",
    "keywords": "Class LobbyContext Inheritance Object UINavigationContext < UIMenuViewType > LobbyContext Inherited Members UINavigationContext<UIMenuViewType>.UINavigation Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class LobbyContext : UINavigationContext<UIMenuViewType> Constructors LobbyContext(UINavigation<UIMenuViewType>) Declaration public LobbyContext(UINavigation<UIMenuViewType> nav) Parameters Type Name Description UINavigation < UIMenuViewType > nav Fields SelectedRoomName Declaration public string SelectedRoomName Field Value Type Description String Properties RoomInfos Declaration public Collection<RoomInfoContext> RoomInfos { get; set; } Property Value Type Description Collection < RoomInfoContext > Methods OnBack() Declaration public void OnBack() OnJoinRoom() Declaration public void OnJoinRoom()"
  },
  "api/CatchIo.UI.MainMenuContext.html": {
    "href": "api/CatchIo.UI.MainMenuContext.html",
    "title": "Class MainMenuContext | Catch.io Developer Reference",
    "keywords": "Class MainMenuContext Inheritance Object UINavigationContext < UIMenuViewType > MainMenuContext Inherited Members UINavigationContext<UIMenuViewType>.UINavigation Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class MainMenuContext : UINavigationContext<UIMenuViewType> Constructors MainMenuContext(UINavigation<UIMenuViewType>) Declaration public MainMenuContext(UINavigation<UIMenuViewType> nav) Parameters Type Name Description UINavigation < UIMenuViewType > nav Properties GameMode Declaration public string GameMode { get; set; } Property Value Type Description String MapName Declaration public string MapName { get; set; } Property Value Type Description String RoomName Declaration public string RoomName { get; set; } Property Value Type Description String Methods CloseCreateSession() Declaration public void CloseCreateSession() Disconnect() Declaration public void Disconnect() OnCreateRoom() Declaration public void OnCreateRoom() OnJoinSession() Declaration public void OnJoinSession() OnSettings() Declaration public void OnSettings() OpenCreateSession() Declaration public void OpenCreateSession()"
  },
  "api/CatchIo.UI.MenuUIContext.html": {
    "href": "api/CatchIo.UI.MenuUIContext.html",
    "title": "Class MenuUIContext | Catch.io Developer Reference",
    "keywords": "Class MenuUIContext Inheritance Object MenuUIContext Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class MenuUIContext : Context Constructors MenuUIContext() Declaration public MenuUIContext() Properties ErrorMessageContext Declaration public ErrorMessageContext ErrorMessageContext { get; set; } Property Value Type Description ErrorMessageContext LoadingContext Declaration public LoadingContext LoadingContext { get; set; } Property Value Type Description LoadingContext LobbyContext Declaration public LobbyContext LobbyContext { get; set; } Property Value Type Description LobbyContext MainMenuContext Declaration public MainMenuContext MainMenuContext { get; set; } Property Value Type Description MainMenuContext RoomContext Declaration public RoomContext RoomContext { get; set; } Property Value Type Description RoomContext TitleContext Declaration public TitleContext TitleContext { get; set; } Property Value Type Description TitleContext"
  },
  "api/CatchIo.UI.PointText.html": {
    "href": "api/CatchIo.UI.PointText.html",
    "title": "Class PointText | Catch.io Developer Reference",
    "keywords": "Class PointText Inheritance Object PointText Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class PointText : MonoBehaviour"
  },
  "api/CatchIo.UI.RoomContext.html": {
    "href": "api/CatchIo.UI.RoomContext.html",
    "title": "Class RoomContext | Catch.io Developer Reference",
    "keywords": "Class RoomContext Inheritance Object UINavigationContext < UIMenuViewType > RoomContext Inherited Members UINavigationContext<UIMenuViewType>.UINavigation Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class RoomContext : UINavigationContext<UIMenuViewType> Constructors RoomContext(UINavigation<UIMenuViewType>) Declaration public RoomContext(UINavigation<UIMenuViewType> nav) Parameters Type Name Description UINavigation < UIMenuViewType > nav Fields OnUpdatePlayerProperties Declaration public Action OnUpdatePlayerProperties Field Value Type Description Action Properties ButtonText Declaration public string ButtonText { get; set; } Property Value Type Description String CharacterClasses Declaration public Collection<CharacterClassContext> CharacterClasses { get; set; } Property Value Type Description Collection < CharacterClassContext > GameMode Declaration public string GameMode { get; set; } Property Value Type Description String HostPlayerID Declaration public int HostPlayerID { get; } Property Value Type Description Int32 PlayerNames Declaration public string PlayerNames { get; set; } Property Value Type Description String PlayerStates Declaration public string PlayerStates { get; set; } Property Value Type Description String RoomChatLogs Declaration public string RoomChatLogs { get; set; } Property Value Type Description String RoomName Declaration public string RoomName { get; set; } Property Value Type Description String SelectedCharacterClass Declaration public string SelectedCharacterClass { get; set; } Property Value Type Description String SelectedClassSprite Declaration public Sprite SelectedClassSprite { get; set; } Property Value Type Description Sprite Methods OnBack() Declaration public void OnBack() OnClickChatLogDown() Declaration public void OnClickChatLogDown() OnClickChatLogUp() Declaration public void OnClickChatLogUp() OnClickPlayerListDown() Declaration public void OnClickPlayerListDown() OnClickPlayerListUp() Declaration public void OnClickPlayerListUp() OnStartOrReady() Declaration public void OnStartOrReady() SetCharacterClassSprite(Sprite) Declaration public void SetCharacterClassSprite(Sprite sprite) Parameters Type Name Description Sprite sprite UpdateUIRoomData() Declaration public void UpdateUIRoomData()"
  },
  "api/CatchIo.UI.RoomInfoContext.html": {
    "href": "api/CatchIo.UI.RoomInfoContext.html",
    "title": "Class RoomInfoContext | Catch.io Developer Reference",
    "keywords": "Class RoomInfoContext Inheritance Object RoomInfoContext Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class RoomInfoContext : Context Constructors RoomInfoContext(RoomData) Declaration public RoomInfoContext(RoomData data) Parameters Type Name Description RoomData data Properties GameMode Declaration public string GameMode { get; set; } Property Value Type Description String MapName Declaration public string MapName { get; set; } Property Value Type Description String MaxPlayer Declaration public string MaxPlayer { get; set; } Property Value Type Description String RoomName Declaration public string RoomName { get; set; } Property Value Type Description String Updated Declaration public bool Updated { get; set; } Property Value Type Description Boolean Methods OnSelectRoom() Declaration public void OnSelectRoom() UpdateRoomInfo(RoomData) Declaration public void UpdateRoomInfo(RoomData data) Parameters Type Name Description RoomData data"
  },
  "api/CatchIo.UI.TextSetting.html": {
    "href": "api/CatchIo.UI.TextSetting.html",
    "title": "Class TextSetting | Catch.io Developer Reference",
    "keywords": "Class TextSetting This implements the behavior for the \"TextSetting\" UI Object, which allows users to click on adjacent arrows to switch the selected text within the provided text list. Inheritance Object TextSetting Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class TextSetting : MonoBehaviour Properties SelectedTextOption Declaration public string SelectedTextOption { get; } Property Value Type Description String Methods OnChangeButtonPushed(Boolean) Sets the selectedTextOption to the next textOption based on the input direction. This is similar to a circular array. Declaration public void OnChangeButtonPushed(bool isLeft) Parameters Type Name Description Boolean isLeft If false, then 'isRight' is assumed."
  },
  "api/CatchIo.UI.TitleContext.html": {
    "href": "api/CatchIo.UI.TitleContext.html",
    "title": "Class TitleContext | Catch.io Developer Reference",
    "keywords": "Class TitleContext Inheritance Object UINavigationContext < UIMenuViewType > TitleContext Inherited Members UINavigationContext<UIMenuViewType>.UINavigation Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class TitleContext : UINavigationContext<UIMenuViewType> Constructors TitleContext(UINavigation<UIMenuViewType>) Declaration public TitleContext(UINavigation<UIMenuViewType> navigation) Parameters Type Name Description UINavigation < UIMenuViewType > navigation Properties NickName Declaration public string NickName { get; set; } Property Value Type Description String Methods OnBack() Declaration public void OnBack() OnConnectToBestCloudServer() Declaration public void OnConnectToBestCloudServer() OnLogin() Declaration public void OnLogin() OnQuit() Declaration public void OnQuit()"
  },
  "api/CatchIo.UI.ToggleText.html": {
    "href": "api/CatchIo.UI.ToggleText.html",
    "title": "Class ToggleText | Catch.io Developer Reference",
    "keywords": "Class ToggleText A subclass of Unity UI's Toggle with additional settings for Text to change by SelectionState. Inheritance Object ToggleText Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class ToggleText : UnityEngine.UI.Toggle Methods DoStateTransition(SelectionState, Boolean) Declaration protected override void DoStateTransition(SelectionState state, bool instant) Parameters Type Name Description SelectionState state Boolean instant"
  },
  "api/CatchIo.UI.UIChatSender.html": {
    "href": "api/CatchIo.UI.UIChatSender.html",
    "title": "Class UIChatSender | Catch.io Developer Reference",
    "keywords": "Class UIChatSender Inheritance Object UIChatSender Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class UIChatSender : MonoBehaviour Methods OnClickSend() Declaration public void OnClickSend()"
  },
  "api/CatchIo.UI.UIGameViewType.html": {
    "href": "api/CatchIo.UI.UIGameViewType.html",
    "title": "Enum UIGameViewType | Catch.io Developer Reference",
    "keywords": "Enum UIGameViewType Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public enum UIGameViewType Fields Name Description Game GameOver Hud Loading"
  },
  "api/CatchIo.UI.UIMenuViewType.html": {
    "href": "api/CatchIo.UI.UIMenuViewType.html",
    "title": "Enum UIMenuViewType | Catch.io Developer Reference",
    "keywords": "Enum UIMenuViewType Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public enum UIMenuViewType Fields Name Description CreateSession ErrorMessage Loading Lobby Login MainMenu Room Title"
  },
  "api/CatchIo.UI.UINavigation-1.html": {
    "href": "api/CatchIo.UI.UINavigation-1.html",
    "title": "Class UINavigation<T> | Catch.io Developer Reference",
    "keywords": "Class UINavigation<T> Inheritance Object UINavigation<T> Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class UINavigation<T> where T : struct, Enum Type Parameters Name Description T Constructors UINavigation() Declaration public UINavigation() Properties UIViews Declaration public Dictionary<T, UIView> UIViews { get; } Property Value Type Description Dictionary <T, UIView > Methods ComparePeakUIView(T) Declaration public bool ComparePeakUIView(T type) Parameters Type Name Description T type Returns Type Description Boolean LoadUiViews(String) Declaration public void LoadUiViews(string categoryName) Parameters Type Name Description String categoryName Peak() Declaration public UIView Peak() Returns Type Description UIView Pop() Declaration public UIView Pop() Returns Type Description UIView PopAll() Declaration public void PopAll() PopTo(T) Declaration public void PopTo(T uIViewType) Parameters Type Name Description T uIViewType Push(T) Declaration public void Push(T uiViewType) Parameters Type Name Description T uiViewType"
  },
  "api/CatchIo.UI.UINavigationContext-1.html": {
    "href": "api/CatchIo.UI.UINavigationContext-1.html",
    "title": "Class UINavigationContext<T> | Catch.io Developer Reference",
    "keywords": "Class UINavigationContext<T> Inheritance Object UINavigationContext<T> ErrorMessageContext GameHudContext GameLoadingContext LoadingContext LobbyContext MainMenuContext RoomContext TitleContext Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class UINavigationContext<T> : Context where T : struct, Enum Type Parameters Name Description T Constructors UINavigationContext(UINavigation<T>) Declaration public UINavigationContext(UINavigation<T> uiNavigation) Parameters Type Name Description UINavigation <T> uiNavigation Fields UINavigation Declaration protected UINavigation<T> UINavigation Field Value Type Description UINavigation <T>"
  },
  "api/CatchIo.UI.UIWindowFormat.html": {
    "href": "api/CatchIo.UI.UIWindowFormat.html",
    "title": "Class UIWindowFormat | Catch.io Developer Reference",
    "keywords": "Class UIWindowFormat Inheritance Object UIWindowFormat Namespace : CatchIo.UI Assembly : cs.temp.dll.dll Syntax public class UIWindowFormat Fields UIWindowEnumFormat Declaration public static string UIWindowEnumFormat Field Value Type Description String UIWindowTypeFileFormat Declaration public static string UIWindowTypeFileFormat Field Value Type Description String"
  },
  "api/CatchIo.Util.CastTo-1.html": {
    "href": "api/CatchIo.Util.CastTo-1.html",
    "title": "Class CastTo<T> | Catch.io Developer Reference",
    "keywords": "Class CastTo<T> Inheritance Object CastTo<T> Namespace : CatchIo.Util Assembly : cs.temp.dll.dll Syntax public static class CastTo<T> Type Parameters Name Description T Methods From<S>(S) Declaration public static T From<S>(S s) Parameters Type Name Description S s Returns Type Description T Type Parameters Name Description S"
  },
  "api/CatchIo.Util.EditorGameLoader.html": {
    "href": "api/CatchIo.Util.EditorGameLoader.html",
    "title": "Class EditorGameLoader | Catch.io Developer Reference",
    "keywords": "Class EditorGameLoader One-time utility component that adds the manager scene and the UI scene to the current game scene and destroys itself. Inheritance Object EditorGameLoader Namespace : CatchIo.Util Assembly : cs.temp.dll.dll Syntax public class EditorGameLoader : MonoBehaviour"
  },
  "api/CatchIo.Util.ExtensionMethods.html": {
    "href": "api/CatchIo.Util.ExtensionMethods.html",
    "title": "Class ExtensionMethods | Catch.io Developer Reference",
    "keywords": "Class ExtensionMethods Inheritance Object ExtensionMethods Namespace : CatchIo.Util Assembly : cs.temp.dll.dll Syntax public static class ExtensionMethods Methods toVector2(Vector3) Declaration public static Vector2 toVector2(this Vector3 vec3) Parameters Type Name Description Vector3 vec3 Returns Type Description Vector2 ToVector2Int(Vector2) Declaration public static Vector2Int ToVector2Int(this Vector2 vector2) Parameters Type Name Description Vector2 vector2 Returns Type Description Vector2Int toVector3(Vector2) Declaration public static Vector3 toVector3(this Vector2 vec2) Parameters Type Name Description Vector2 vec2 Returns Type Description Vector3 ToVector3Int(Vector2) Declaration public static Vector3Int ToVector3Int(this Vector2 vector2) Parameters Type Name Description Vector2 vector2 Returns Type Description Vector3Int"
  },
  "api/CatchIo.Util.html": {
    "href": "api/CatchIo.Util.html",
    "title": "Namespace CatchIo.Util | Catch.io Developer Reference",
    "keywords": "Namespace CatchIo.Util Classes CastTo<T> EditorGameLoader One-time utility component that adds the manager scene and the UI scene to the current game scene and destroys itself. ExtensionMethods Math NotifyBooleanPropertyChanged This class has events called when the boolean value is changed compared to the previous value. SceneControl Singleton<T> SingletonMonoBehaviour<T>"
  },
  "api/CatchIo.Util.Math.html": {
    "href": "api/CatchIo.Util.Math.html",
    "title": "Class Math | Catch.io Developer Reference",
    "keywords": "Class Math Inheritance Object Math Namespace : CatchIo.Util Assembly : cs.temp.dll.dll Syntax public static class Math Methods ClampListIndex(Int32, Int32) Declaration public static int ClampListIndex(int index, int listSize) Parameters Type Name Description Int32 index Int32 listSize Returns Type Description Int32 GetAngle(Single) Declaration public static float GetAngle(float angle) Parameters Type Name Description Single angle Returns Type Description Single GetIntAngle(Int32) Declaration public static int GetIntAngle(int angle) Parameters Type Name Description Int32 angle Returns Type Description Int32 GetIntAngle(Single) Declaration public static int GetIntAngle(float angle) Parameters Type Name Description Single angle Returns Type Description Int32 IsNaNVector(Vector2) Declaration public static bool IsNaNVector(Vector2 vector2) Parameters Type Name Description Vector2 vector2 Returns Type Description Boolean"
  },
  "api/CatchIo.Util.NotifyBooleanPropertyChanged.html": {
    "href": "api/CatchIo.Util.NotifyBooleanPropertyChanged.html",
    "title": "Class NotifyBooleanPropertyChanged | Catch.io Developer Reference",
    "keywords": "Class NotifyBooleanPropertyChanged This class has events called when the boolean value is changed compared to the previous value. Inheritance Object NotifyBooleanPropertyChanged Namespace : CatchIo.Util Assembly : cs.temp.dll.dll Syntax public class NotifyBooleanPropertyChanged Properties Value Declaration public bool Value { get; set; } Property Value Type Description Boolean Methods OnPropertyChangedFalse(String) Declaration protected virtual void OnPropertyChangedFalse(string propertyName) Parameters Type Name Description String propertyName OnPropertyChangedTrue(String) Declaration protected virtual void OnPropertyChangedTrue(string propertyName) Parameters Type Name Description String propertyName SetField(ref Boolean, Boolean, String) Declaration protected virtual void SetField(ref bool field, bool value, string propertyName) Parameters Type Name Description Boolean field Boolean value String propertyName Events PropertyChangedFalse Declaration public event PropertyChangedEventHandler PropertyChangedFalse Event Type Type Description PropertyChangedEventHandler PropertyChangedTrue Declaration public event PropertyChangedEventHandler PropertyChangedTrue Event Type Type Description PropertyChangedEventHandler"
  },
  "api/CatchIo.Util.SceneControl.html": {
    "href": "api/CatchIo.Util.SceneControl.html",
    "title": "Class SceneControl | Catch.io Developer Reference",
    "keywords": "Class SceneControl Inheritance Object SceneControl Namespace : CatchIo.Util Assembly : cs.temp.dll.dll Syntax public static class SceneControl Methods GetCurrentSceneName() Declaration public static string GetCurrentSceneName() Returns Type Description String GetPreviousSceneName() Declaration public static string GetPreviousSceneName() Returns Type Description String IsSceneCurrentlyLoaded(String) Declaration public static bool IsSceneCurrentlyLoaded(string sceneName) Parameters Type Name Description String sceneName Returns Type Description Boolean Load(Int32, LoadSceneMode) Synchronous SceneManager.LoadScene() wrapper Declaration public static void Load(int sceneIndex, LoadSceneMode mode = null) Parameters Type Name Description Int32 sceneIndex LoadSceneMode mode Load(String, LoadSceneMode) Declaration public static void Load(string sceneName, LoadSceneMode mode = null) Parameters Type Name Description String sceneName LoadSceneMode mode LoadAsync(String, LoadSceneMode) Declaration public static UnityEngine.AsyncOperation LoadAsync(string sceneName, LoadSceneMode mode = null) Parameters Type Name Description String sceneName LoadSceneMode mode Returns Type Description UnityEngine.AsyncOperation UnloadAdditiveScene(String) Declaration public static UnityEngine.AsyncOperation UnloadAdditiveScene(string sceneName) Parameters Type Name Description String sceneName Returns Type Description UnityEngine.AsyncOperation"
  },
  "api/CatchIo.Util.Singleton-1.html": {
    "href": "api/CatchIo.Util.Singleton-1.html",
    "title": "Class Singleton<T> | Catch.io Developer Reference",
    "keywords": "Class Singleton<T> Inheritance Object Singleton<T> Namespace : CatchIo.Util Assembly : cs.temp.dll.dll Syntax public class Singleton<T> where T : class Type Parameters Name Description T Properties Instance Declaration public static T Instance { get; } Property Value Type Description T"
  },
  "api/CatchIo.Util.SingletonMonoBehaviour-1.html": {
    "href": "api/CatchIo.Util.SingletonMonoBehaviour-1.html",
    "title": "Class SingletonMonoBehaviour<T> | Catch.io Developer Reference",
    "keywords": "Class SingletonMonoBehaviour<T> Inheritance Object SingletonMonoBehaviour<T> Namespace : CatchIo.Util Assembly : cs.temp.dll.dll Syntax public abstract class SingletonMonoBehaviour<T> : MonoBehaviour where T : MonoBehaviour Type Parameters Name Description T Properties Instance Declaration public static T Instance { get; } Property Value Type Description T Methods OnApplicationQuit() When Unity quits, it destroys objects in a random order. In principle, a Singleton is only destroyed when application quits. If any script calls Instance after it have been destroyed, it will create a buggy ghost object that will stay on the Editor scene even after stopping playing the Application. Really bad! So, this was made to be sure we're not creating that buggy ghost object. Declaration protected virtual void OnApplicationQuit()"
  },
  "index.html": {
    "href": "index.html",
    "title": "Project Catch.io Developer Reference | Catch.io Developer Reference",
    "keywords": "Project Catch.io Developer Reference Introduction This is the developer reference for Witch One , internally referred to as Project Catch.io . If you are part of development team, feel free to add new tasks or comment on existing ones. Every information that is required for developing with the Project Catch.io team will be documented here. Such information includes: Project folder structure Coding styles and guidelines Project contribution format (semantic version for this project, Pull Request format, etc.) Milestones and progress reporting methods Team roles Documentation format and more... You can think of this as a general guideline and a starting point for joining the team or unifying how our works should be prevented in order for them to be considered 'finished'. To keep things organized, project members should document their work and tell everyone how you want others to handle your work. Please keep in mind that you are not expected to read all the docs, but you are expected to understand the parts that is related to your task. Project Resources All resources and documents related to the development of project Catch.io is split amongst various repositories, sites and services. We will list all of them here and explain what their purposes are. Some links listed here will not be accessible by the public while some are. Please change the list content if we decide to make adjustments to the team management structure. Catch.io Project Repository: The repository for the source code of project Catch.io. This repository is made private, and we only allow access to project developers. However, contents like code documentation or ongoing test builds will be made available to the public with the power of Github CI. Catch.io docs repository : The source code for project developer references are kept in this repository. Currently, this repo contains two different document pages. Project Development Manual : Hosted via Github Pages, this page contains the auto generated scripting reference for this project. The content of this page will change with every update made to the Catch.io source code. It is convenient, but hard to migrate to other pages as this does not use Markdown for API references (only code manuals are in Markdown). Google Drive Shared Folder : Internal documents, weekly meeting records, brainstorming records, project expenses, art/music assets for the project and other information that are meant to be stored for a long time and only meant for team members will be stored here. Non-programmers will mostly interact with Google Drive. Itch.io page : Itch.io is used for sharing quick prototype builds of the game (in WebGL for most cases) both inside and outside the team. Generally, this page is used for quick internal testing, but we may consider releasing the game here at some point. Trello Project Board : Still experimental, but this is where the development progress regarding Catch.io will be tracked. Catch.io GDD : Hosted by Gitbook, this page contains everything about the project such as the game mechanics, expected features, rough timeline, expected release platforms, general marketing strategy, pivot strategies, and more. Abbreviations & Definitions To increase the efficiency of communications between members, it is good to use abbreviations. If there are any abbreviations (and the definition of that word) you are using that is foreign to other new members, please add it here. PR: Pull Request (when merging a branch or a fork to the master repository) Repo: Repository (Git repository) doc: Documentation (Projects documentation like this one will be referred to as docs) WIP: Working In Progress impl: short for implement or implementation LGTM: Looks Good to Me (used when a PR does not have any issues and is good to merge) Scripts: Refers to the .cs code that contains game play logic, but are not directly used as part of a Unity game object Components: This is also a .cs code, but it is meant to be used as a component for Unity game objects How to Write Documents Project docs like this one must be written in Markdown. You can use stackedit.io to write a quick doc, or use the Markdown All in One extension for VS Code. Documentations should be long and comprehensive so anyone can understand. As a general format, think of this README doc as a template to start from. Q: What should be a doc Anything that requires more than one people to work on either now or in the future. Or if you have any special requirements regarding your work or working style, write a doc to express that to other members. Q: Who can write a doc Anyone within the team. You will need other's permission to edit an existing doc (except for fixing typos or obvious problems), but creating a new one is completely up to you. Q: Any word requirements It should be comprehensive, but not boring. There are no strict word count, however it should be long enough to let the reader understand what you want to say and short enough to not make the reader fall asleep."
  },
  "manual/artist-guidelines.html": {
    "href": "manual/artist-guidelines.html",
    "title": "Art Asset Structure | Catch.io Developer Reference",
    "keywords": "Art Asset Structure This section will describe how art assets for Catch.io should be structured. Directory Every art assets used in the game (excluding UI) is stored in Assets/Textures/ . This includes character sprites, environmental objects, throwable objects and map tile sets. Everything relating to the UI such as menu, title, inventory icon, etc will be stored in Assets/Textures/UI/ . Asset import settings When importing the assets to Unity engine, the file settings should be like the following: Texture Type: Sprite (2D and UI) Sprite Mode: Multiple or Single Pixels Per Unit: 32 Filter Mode: Point (no filter) Compression: None When slicing animated sprites, it is recommended to use the Grid by Cell Count method. You can find the detailed image import setting inside the Assets/Editor/Presets/InGameSpriteImport_Default.preset preset file. Submitting Assets For artists who are submitting their work, it is recommended to upload the work to Google Drive Team STEP/Projects/Project Catch.io/Sprites/ folder with the appropriate name of the sprite that is being added. Because Google Drive does not send responsive notifications for uploading images, the artist will have to notify the developer that their work has been uploaded via Slack. Folder Structure Animated character sprites will be placed in the Characters/ folder with the name of the character as the root directory. Inside this folder, there should be a subdirectory that describes the action (ex: Characters/Shade/Walking/ , Characters/Shade/Running/ , Characters/Shade/Crouching/ , etc.). The actual image file will be saved within those folders. Completely optional, but it is recommended to create source folder as well that stores the original work file in any format as a backup solution (ex: Characters/Shade/source/running.aseprite ). Image Format It is recommended that the final asset is saved as .png , but Unity supports a vast number of image formats, so as long as the file can save alpha channel data or layer data (if required), the artist can save it as any format as they want. For any animated sprites, it is recommended to separate the sprite asset into animation sheets like the following sample animation. Character sprites should be separated into each direction where a single image contains all the frames for that direction. The asset file name should be prefixed with the action and suffixed with the direction that the character is facing with a space in between the two. The direction should be named as the cardinal direction (ex: Run NE.png , Walk S.png , etc.). To summarize all of this, character assets should have the format of Characters/{Character Name}/{Action}/{Action Direction}.png . Theses are some examples: Characters/Shade/Walking/Walking NW.png Characters/Shade/Running/Running N.png Characters/Shade/Throwing/Throwing SW.png Item/Torch/Torch1.png Item/Frog/Red Frog/Back.png Asset Color Palette Both characters and props must follow the following color palette to keep a consistent feeling for the visual assets. A single component of an asset (such as metal, gold, cloth, etc.) should be within 2 variations of light to dark palettes/color. Feel free to be creative, but the main idea is that for artists to make an object (e.g a wooden barrel) it should use the same wood colors as the trees in the environment for consistent visuals."
  },
  "manual/coding-style.html": {
    "href": "manual/coding-style.html",
    "title": "Coding Style | Catch.io Developer Reference",
    "keywords": "Coding Style This section will discuss the naming convention of code, files, github branches, etc. If you find any files with inconsistent naming, please fix them accordingly. C# Naming Conventions Because Unity uses C# as its preferred language, the standard C# naming conventions will be used within this project. This scheme will apply to C# script names as well. For further details regarding C# coding conventions, please refer to the following documents: https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/general-naming-conventions https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/interface https://docs.microsoft.com/en-us/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces https://blog.submain.com/c-interface-definition-examples/ https://www.c-sharpcorner.com/article/types-of-relationships-in-object-oriented-programming-oops/ Everything else will mostly be kept consistent with Unity/C# conventions, but for this project, we will not be having the m_ prefix for component variables in Unity. Namespaces All C# scripts that are inside the Assets/Scripts folder must have a namespace to it. The namespace should be CatchIo.<folder name> , where the <folder name> is replaced with the folder that the script is in. Unity Asset Names Every asset used within the Unity engine will use the Upper Camel Case (ex: MainCharacter.prefab or GrassLandTileSet.png ). These assets include everything from tile maps, sprites, object prefabs, shaders, etc. Scene names should be in Camel Case as well as items within the scenes too. It's discouraged to use spaces for game object names, but not mandatory as there are some generated objects that does include a space in the name (ex: Main Camera ). Style Rules This project uses EditorConfig to maintain its code style. Some style rules have been disabled due to compatibility with how Unity handles C# scripts. These settings will be automatically read by Visual Studio. For developers using VS Code, we have stored a pre-configured workspace settings and recommended extensions in the .vscode folder for easy configuration. The repository for this project will check for the code style via dotnet-format for every PR. This check must pass in order for new code to be merged to the main branch. Formatting Code Although both VS Code and Visual Studio offers a built-in code cleaner that can be triggered for every save, we found that there are some style rules won't apply with this method. So we recommend using the development version of dotnet-format tool. You can install this tool by using this following command from your terminal: dotnet tool install -g dotnet-format --version 5.0.142902 --add-source https://pkgs.dev.azure.com/dnceng/public/_packaging/dotnet-tools/nuget/v3/index.json To format the entire script folder, you will have to first open a script in Unity with Visual Studio so that Unity engine can generate the .csproj file. Once that is done, use the following command from the root of this project folder: dotnet-format Catch.io.sln --fix-style warn"
  },
  "manual/development-environment.html": {
    "href": "manual/development-environment.html",
    "title": "Setting up the development environment | Catch.io Developer Reference",
    "keywords": "Setting up the development environment Game Development Environment Unity Engine The development for Witch One (development title Catch.io) will be in most cases, done in Unity. We recommend installing Unity Hub as it supports various OS and can install multiple versions of the Unity Editor. Installing Unity Hub Mac and Windows You can install the latest version of Unity Hub through the official download page . Linux In the past, you could have downloaded the .AppImage executable of Unity Hub, but this has been deprecated from 2022. Currently, you can follow the instruction written here to install Unity Hub for Linux. There is a known issue on Ubuntu 22.04 regarding missing dependencies. Read this thread for more information. Engine Version Currently, we are using Unity version 2021.2.3f1 (32358a8527b4) . You can check the official release archive from this page , or install directly via Unity Hub by clicking this link . For Linux users who run Unity through an .AppImage executable, the deep link installation provided by the Unity release archive may not work. Instead, you will have to pass the deep link URL as a parameter for the application file from your terminal. ./UnityHub.AppImage unityhub://2021.2.3f1/32358a8527b4 Configuring Unity Editor Setting The Default IDE You can change your preferred IDE/Editor in Unity by going to the Edit -> Preferences -> External Tools menu. Regarding how to install the IDE and text editors, please refer to the next section. General Development Environment Version Control Software Git & GitHub Our team uses Git as the main version control software, and GitHub as the repository host: Team STEP GitHub Account Installing The Git Client Most IDEs offer a way to interact with the remote repository. If you have a preferred Git client, you are free to use it. For most developers, our team recommend using GitHub Desktop, as it offers a robust GUI, auto-configuring the global Git settings, and automatically updating repository submodules. You can install GitHub Desktop on Windows 10 and macOS from the official website: GitHub Desktop For Linux users, you can install a fork of GitHub Desktop maintained by Shiftkey ( releases ) For Windows users, we also recommend installing the Windows Git client that comes with the Bash terminal. Bash on Windows allows you to access applications installed with PowerShell as well. Downloading Git . Setting Up IDE & Text Editors Visual Studio Community Note: Visual Studio Community is not supported on Linux systems When working with Unity, we generally recommend using Visual Studio, as it provides full support for Unity including breakpoints and unity game object component reference checking. Although Unity will ask you to install Visual Studio before you install the engine in Windows, you might want to have a full installation of Visual Studio if you need extra features. In which case, you can install the IDE . MonoDevelop Note: MonoDevelop is not a requirement for developing on a Linux environment. The guide below adds the package repository from Ubuntu 18, as that is the only way you can install it on later versions . MonoDevelop is an open-source cross-platform IDE that supports languages like C#, F#, Visual Basic .NET, and Vala. You can find more information on their homepage . Generally speaking, MonoDevelop is considered to be a replacement for Visual Studio for Linux systems. If you're using Windows 10 or macOS, we recommend installing Visual Studio Community instead of MonoDevelop. This installation guide will assume that the user is working on Ubuntu-based systems (LTS 20.04 or up). First, add the Mono repository to your system. # update your repository. Upgrade any packages if you have to sudo apt update && sudo apt upgrade # install the basic dependencies sudo apt install dirmngr gnupg apt-transport-https ca-certificates # add the mono repository key sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF # add the app repository to your apt source sudo sh -c 'echo \"deb https://download.mono-project.com/repo/ubuntu stable-bionic main\" > /etc/apt/sources.list.d/mono-official-stable.list' # refresh your repository list sudo apt update Second, install the full MonoDevelop package and the IDE # install the full mono package sudo apt install mono-complete # install the monodevelop IDE sudo apt install monodevelop # install the .Net NUit unit test packages sudo apt install monodevelop-nunit Lastly, check your installation # this command should output the compiler version if your installation was complete mono --version Your IDE should look something like this: This guide was based on the article written by Website For Students . Visual Studio Code Visual Studio Code is a lightweight text editor (until you install a boatload of extensions) for developers on all major platforms. There are several Visual Studio Code extensions that work with the Unity Engine. It does not support everything that Visual Studio can do with Unity, but we recommend install VS Code as it is great for development that is outside of Unity (such as web development, or PR review/resolving merge conflicts). You can install Visual Studio Code from here . Visual Studio Code must be configured properly before it can work with Unity. This is the list of recommended extensions that we use at the time of this writing. extensions.json { \"recommendations\": [ \"editorconfig.editorconfig\", \"aaron-bond.better-comments\", \"ms-dotnettools.csharp\", \"jchannon.csharpextensions\", \"streetsidesoftware.code-spell-checker\", \"unity.unity-debug\", \"donjayamanne.githistory\", \"felipecaputo.git-project-manager\", \"github.vscode-pull-request-github\", \"formulahendry.github-actions\", \"eamodio.gitlens\", \"yzhang.markdown-all-in-one\", \"davidanson.vscode-markdownlint\", \"tobiah.unity-tools\", \"ptd.vscode-unitymeta\", \"redhat.vscode-yaml\", \"dotjoshjohnson.xml\" ] } settings.json { \"editor.defaultFormatter\": \"EditorConfig.EditorConfig\", \"markdownlint.config\": { \"html\": true, \"MD033\": false, }, \"[jsonc]\": { \"editor.defaultFormatter\": \"vscode.json-language-features\" }, \"omnisharp.enableEditorConfigSupport\": true, \"editor.formatOnSave\": true, \"cSpell.words\": [ \"Tilemap\", \"Tilemaps\", \"gameplay\", \"royale\", \"tileset\" ] } Editing the contents of the .vscode/ folder in the root directory of the project allows the developer to change the default setting for developers working in VS Code. This means that all developers with a new installation of VS Code has to do is open VS Code from the root of the project folder. Android Studio Android Studio is a cross-platform IDE for developing applications for Android devices, commonly with Java and Kotlin. Our team will rarely develop directly in Android Studio, but installing it allows us to easily install different versions of Android SDK, or access other development tools like the Android Device Emulator. Plus, Android Studio is available for most commonly used OS, so if your disk space can handle it, we recommend installing it from their official installation page . System Terminal and Package Manager Windows 10 - Chocolatey No sane developers will use Windows for its terminal or package management, but here we are. This section will guide you through installing Chocolatey , a package manager for Windows. Windows system comes with PowerShell and the Command Line Prompt as its main terminal. Alternatively, you can install Bash that comes with the Windows Git client (mentioned in the previous section). For this guide, we will be using PowerShell. To access PowerShell with administrative rights, click on the Windows search bar on the bottom left corner of your screen (next to the Windows button in the task bar), and search for PowerShell . Right-click on the app and choose Run as administrator . When you open the terminal, it should look something like this: Note that administrator sessions runs from Windows\\system32 instead of the user home directory. Paste the following command to your terminal. Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')) This should install Chocolatey to your system. You can confirm it by using the choco command to your terminal. You can read the detailed installation process from the official installation page . macOS - Homebrew Homebrew is a package manager for macOS. It offers a wide variety of applications that are a must-install for developers working from macOS. Unlike Windows; macOS comes with a zsh terminal, which shares a lot of characteristics of bash. This means that most commands that works with bash will work on your Mac. To install Homebrew, you simply open your terminal from the Utilities folder and paste the following command. /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" You can learn more from the official Homebrew page."
  },
  "manual/game-mode-design.html": {
    "href": "manual/game-mode-design.html",
    "title": "Game mode design | Catch.io Developer Reference",
    "keywords": "Game mode design This chapter will explain how to make the game mode and how to implement the game mode. The game mode is a core system of our project. Game mode structure The game mode is scriptable object and a game session require the game mode that the host(room master) selected. How to make the game mode If you want to make a new game mode, you have to inherit the GameMode class. (You have to create game mode instance on Resources/ScriptableObjects/GameMode directory) For example, [CreateAssetMenu(fileName = \"GameModeName\", menuName\"GameMode/GameModeName\", order = 0)] public class NewGameMode : GameMode { ... } And you have to add the game mode dropdown option."
  },
  "manual/github-guide.html": {
    "href": "manual/github-guide.html",
    "title": "Git Guide | Catch.io Developer Reference",
    "keywords": "Git Guide Branches and Forks The basic idea of branches and PRs is, when implementing a new feature for most projects, you would create a branch that is only for that feature. When the development is done you would open a pull request and merge it with the master. We will elaborate on this idea and create a single standard as game development involves many moving parts that rely on each other and it is important for everyone to be on the same page with this. There will be mainly four types of branches. fix branch: a branch name that is used for commits for patches or fixes that address a bug that came from the feature branch. This does not add anything new in terms of features, but only refactors them. Ex) fix/throw-object . feature branch: branches that add something new to the game which may break the game or not. Because of how game development works, commits in this branch will inadvertently act similar as the fix branch (and it is fine to do that as long as you record it!), but one key difference is that feature branch must add something new. Ex) feature/ai-sensors . development branch: these are the branches that are in active development. They have a very strict rule. First, the name must be the semantic version name. Second, every feature and fix branches must be derived from this branch and merge back to it when finished (no branch should derive from other branches). Lastly, after merging the development branch with the master branch, the development branch should not be touched at all. Ex) development/v-0.0.1b document branch: this is a special branch that is used exclusively for PR that adds documentation to the repo In short, branches with the name development must be derived from the master while the fix and feature branches derive from the latest development branch. Only development branches are allowed to merge with master . However, you can only merge when there are no fix or feature branches, and once you merge you can only create a new development branch, no direct commits to master unless the situation calls for it . Merging a development branch to the master branch will be part of a Milestone . Forking works similar to the fix and feature branch. You can freely fork a development branch and merge back to it. But you should never fork and commit to a fix / feature branch unless you made a new one or you have to! Versioning Scheme By default, projects will use the Semantic Versioning as the base for the versioning scheme. Versions are generally used in three different places. Github tag/dev branch names In-engine version In-game graphical version display In-engine version and the In-game graphical version display will be linked together, allowing the developer to only focus on working with the in-engine version numbering. Those will have to be changed manually. Github version names will be taking the form of development branch names like development/v0.1.3a and will also be the name of Github's Projects feature and Milestones feature. The naming scheme for branch names will be like the following, development/v[major].[minor].[patch][alpha/beta] . The major number is when we add a huge feature that may change the game as a whole. One example would include a multiplayer mode for a single player only game. Adding on to this, minor versions are additional feature that does not affect the game play flow to a huge degree, but does add something new to the existing game. For example, a new character model or new items. Patch numbers are generally when a game changes its backend code that the end-users does not notice right away and updates that does not add something visible to the game. Like bug fixes and gameplay balancing. Using Git Projects and Progress Tracking Todo: This section is outdated. We use Notion as our main project management tool. Please update this. For tracking the development process, we will be using Git Projects. Git Projects is an automated Kanban for understanding what tasks should be done, what is in progress and what is finished. For this project we will be using the automated Kanban, meaning that issues will be automatically added to the Projects Kanban. Project names should be the development version that the project will have. If all the items in the Project are considered to be finished, you can open a new milestone and merge that version with the master branch. After that you would create a new Project with a new version name. For adding items to the Kanban, please create a new Issue with the appropriate label. When adding a new feature to the game, create a new branch with the prefix feature/[feature-name] and open a new issue with the label enhancement . For fixing bugs or other patches, create a new branch with the prefix fix/[patch-name] and open a new issue with the label fix . When you open a new issue, that item will be automatically added to the Project Kanban. GitHub Projects is just a simple method to check the overall progress of the working project and to understand what the developers should be doing. As long as the developer understands to open an issue and creating a new branch before making any changes, there should be no problem. Opening Issues As mentioned above, the project's development progress and assigning tasks will be done via opening issues on the repository. Because of this, it is important to understand the format for opening one in a consistent way. Issue Title: The title of the feature/fix that the assigned developer will make. Description: The detailed description of what this task will be adding. It is best to add a list of things that will be done. Assignees: This shows the developers who will be taking on the task that the issue describes. Labels: The category of the issue. Mostly it will be either enhancement or fix . Projects: The project that this issue will be committing to. This should always be the latest working development build before it is committed to the master branch. Milestone: This shows which development build this issue belongs to. Preventing Merge Conflicts When using Git for version controlling game projects, the team will definitely encounter several critical conflicts. This generally stems from the following reasons: Too much noise - most heavy game engines will create a lot of meta files for various reasons. This is always automatically generated by the engine, which makes it hard to predict how it is going to change. Furthermore, this will clog up the changed file list for each commit and pulls which makes reviewing hard. Too many file types - most engines will use their custom file types for managing game objects or settings. Sometimes this will result in files being treated as binaries rather than code. Most cases these are just markup languages with a special file extension, but this still makes it hard for developers to review other's code. Large files - not completely related to merge conflicts, but using large media files like .wav or .png makes syncing and merge a time consuming process. So how can we prevent merge conflicts when working with a big team? There is no single solution for this, but we can come up with commit standards to ensure that we can avoid critical errors. The following guide will be based on using Unity with Github Work on a new scene - if you are adding a new feature or item, create a new scene or duplicate one of the existing scenes and only work on that. This ensures that no scene conflicts will ever happen. Only focus on your feature - not limited to game development, but for any collaborative working environment, it is best to only stick on your feature and not try to work on something that is not related to it. Create/override prefabs - always make a prefab for game objects that will be used throughout multiple scenes. Furthermore, before committing to the repo, do not forget to update your prefab."
  },
  "manual/in-game-tilemap.html": {
    "href": "manual/in-game-tilemap.html",
    "title": "In-Game Tilemap System | Catch.io Developer Reference",
    "keywords": "In-Game Tilemap System In this page, we will focus on summarizing two popular tilemap frameworks that we can consider for our project. Available Tilemap Frameworks There are a couple of options you can choose when creating a tile-based 2D game in Unity. All frameworks have their strengths and weaknesses that the developers should consider and commit to that framework to allow the core mechanics to have a consistent performance. Unity 2D Tilemap Unity 2D Tilemap is a tilemap component that Unity offers within their engine. Because it is part of the engine, this framework is highly compatible with most components and other tools within the Unity ecosystem. Plus, it is very flexible when it comes to adding custom features. You can learn more about extending the Unity 2D Tilemap framework from this GitHub repository . Despite the strong support that Unity 2D Tilemap receives from both Unity and the community (hey, that rhymed!), there are limitations that the developer should consider before fully committing to it. One such limitation is with the in-engine editor, as it lacks a lot of tile selection tools and built-in brushes. Another limitation is how complicated the custom brush implementation is alongside the difficulty of extending the existing tilemap framework itself. Pros: Highly compatible with the base engine and other assets Ability to create custom brushes and tile logics Easy composite collider Great documentation Great support from the community Completely free Cons: Difficult to extend the core tilemap component Difficult to create usable custom brushes All tiles are saved as a separate prefab in the project (hard to migrate) Lack of effective custom tile property injection Helpful resources: Unity tilemap manual Tilemap component tutorial Super Tilemap Editor Super Tilemap Editor is a 3rd-party Unity asset that can be bought from the Unity Asset Store for $45. This asset (or plug-in) allows you to create and use 2D tilemap in your game scene. The tile system is based on the position within the specified atlas image, whereas Unity will create a prefab for each individual tiles from a sprite image. Overall, Super Tilemap Editor is a robust package that offers easy in-engine map editing tools. Thanks to the fact that the source code is available to the developer, you can extend and change the plugin from its core. However, Super Tilemap Editor has trouble with importing TMX (Tiled Map Editor XML) files despite it claims to provide full support for it. In addition to that, Super Tilemap Editor lacks in proper documentation or community support compared to that of Unity Tilemap. Pros: Highly expandable Optimized tiling system Robust editing tools Supports tile metadata and custom properties Easy to use Can export tilemaps as prefabs Cons: Not free Lacks in documentation Community size is small compared to Unity Tilemap Issue with importing from TMX files Helpful Resources: Unity forums release thread Super Tilemap Editor Official Page Super Tilemap Editor Documentation"
  },
  "manual/level-design-guide.html": {
    "href": "manual/level-design-guide.html",
    "title": "Level Design Guideline | Catch.io Developer Reference",
    "keywords": "Level Design Guideline Game Mechanic and Level Designing Project Catch.io heavily relies on passive mechanics that affects the gameplay-flow. Passive mechanics are game mechanics that the players are expected to always be aware of and actively utilize to win without having a dedicated button to execute it. Examples of such mechanic includes: Visible sound waves Player footprint Environmental objects You can learn more from Game Mechanics and Features section of the game design document. Map Sections This project is expected to have an average of 15 players in a battle-royale-style death-match. A full game map will be divided into small sections that can be either a set of tilemap prefabs or multiple scenes combined together. The level designer will only need to focus on designing these map sections, rather than making the full map at once. Player spawn-points are manually placed by the designer to ensure that the game is balanced for everyone. To keep the map designing process simplified, a single map section will be large enough to handle three player spawn-points , where the distance between any given spawn-point must be more than 64 tiles . This means that the entire map must contain at least 5 sections. The above image is a rough approximation of how the player spawn-point and map edges will be placed. In here, we assume that the space between each spawn-points in a single section is 64 tiles apart. Please note that this is just an example of how the map sections can be combined. The level designer can change the size of a section, or change how they are placed if they need to do so. Map Elements Aside from the visual style, the level designer will have to consider the following elements when making a map. Map Surface: All levels will have a base ground tile and a special surface tile. These surface can leave footprints, generate sound with a higher volume, or slowdown the player. Player Spawn-points: As mentioned above, player spawn-points are manually placed by the level designer. When a player enters a game, they will spawn randomly from a set of locations defined by the designer. Offensive/Evasive Items: Offensive and evasive items are objects that players can keep in their inventory and throw it with the throw button. These items are the primary source of gameplay that allows the player to either attack the other player, or run away from certain situations. Level designers should be mindful of where they should be placed and how many should be accessible in a given section. Consumable Item Spawn-points: Consumable items are essentially health potions for replenishing player's sanity value. Potions use the same inventory slot as the offensive/evasive items, but they are not re-usable once consumed. To keep the gameplay flow going and prevent players dying from lack of potions, consumable items are spawned in a fixed location that only spawn to the location with the least players in the area. Environmental Objects: Environmental objects are map props that is part of the map design. They are not meant to have any player interaction, instead, they are meant to be a static object. However, environmental objects can cast shadows or block bounce-off projectiles, which means that they can be used as a hiding spot or an ambush spot for the player. Light Sources: These are part of the environmental object group, however, instead of being a hiding spot for the player, this will become the area that exposes the player, as players will only be visible to other players when they are being lit. Buildings and Houses: Similar to environmental objects, buildings are a static prop that is part of the map. However, they do not come in a fixed size like a tree would. Players are expected to use buildings and houses as a landmark for map navigation and hiding. Story Telling: When designing a level, the designer should tell a story for each object they place. This aspect of level designing will not be emphasized for the vertical slice of the project, but the release version should be able to tell the game lore and place objects in a way that stays consistent with the story that the designer is trying to tell."
  },
  "manual/map-surfaces-in-tiled.html": {
    "href": "manual/map-surfaces-in-tiled.html",
    "title": "Map surfaces in Tiled | Catch.io Developer Reference",
    "keywords": "Map surfaces in Tiled Last Edited: November 5, 2021 2:06 PM Status: Draft Type: Manual Game Map Architecture The scripting aspect of the project may change depending on the implementation. In order to keep the development flow going, it is important for us to separate the level designing process from the level feature implementation. We do not want the level designers to wait for some coding task to finish or lose their work when we change or optimize the tilemap system. At the same time, we want a flexible and powerful editing tool that allows the level designer to abstract the features. That is why our team had to use external tools for map designing instead of keeping everything in Unity. This guide will describe how you can create a map \"wireframe\" for Catch.io using Tiled. Note that this guide assumes that the reader has basic knowledge of all the tools used in this project and therefore, will only describe the parts that are unique to Catch.io's map design process. Creating a Map Using Tiled What is Tiled There are many options when it comes to implementing 2D tilemap systems in Unity. To keep the project development flow clean, we will use a map editing tool called Tiled. You can download the latest version from the official site . Alternatively, you can compile it from the source . Tiled is a map editing tool that reads and saves the map information as a tilemap file with the extension .tmx which is a form of XML. Tiled comes with various powerful tools and features that make 2D map designing easy. You can add custom properties to petty much everything starting from the map down to the individual tiles. Thanks to this feature, it is possible to create a concept map that contains features that are not yet implemented in the game. Our project uses Tiled as the main map designing tool, therefore, designers can directly link Unity prefabs and tile properties within Tiled. To learn more about what this tool is capable of, please refer to the Tiled official documentation . Tiled Project File All the maps, worlds, tilesets, object templates, and types used within Catch.io are managed by a single project file ( .tiled-project ). Keeping a project file as a single source of reference for all the Tiled files allows us to keep a consistent working environment across different designers. The Tiled project will be part of Catch.io’s source code under the folder TiledMapEditor/ . The location of this folder may change depending on how we decide to import the map data to Unity, but as of this writing, the folder will be in the root directory of the project ( TiledMapEditor/CatchIoLevels.tiled-project ). Tiled Project Folder Structure For our project, we will have the following folder structure: extensions : Contains the Tiled editor extension scripts that can be used by the designer. This folder is a clone of the official extension repository . You can create new extensions and just add them to this folder. The editor will automatically parse through the content. Maps : Contains the TMX tilemap file that the designer will directly work on, plus the automapping rules entry point. All game levels designed in Tiled should be saved in this folder. Rules : A subdirectory of Maps . This folder contains the automapping rule maps that will be used in this project. All TMX files used here must be referenced in the rules.txt file in the Maps folder if you want the editor to read them. Schemes : A folder that contains a world file. In short, these are the main file that combines the smaller .tmx files into a single large playable map that will be imported to Unity. Templates : Contains the map object template file. Objects are useful when you want to reference a Unity prefab or other complicated game-specific logic that is difficult to add using Tiled. When you create an object that is used in other maps, please create a template of it and save it in this folder. Tileset : Contains the tileset information that is used in the map. The tileset source image will always be inside the Assets/Textures/Tileset or Assets/Textures/Props folder. This means that all the tilemap used in Tiled are based on the raw sprites that are read by the game engine. Tileset should match the sprite name that it is based on to reduce confusion. Types : Contains the map object type data. Using types allows the object to have a consistent property which makes it easy for the Unity importer to handle them later on. All types are kept in a single .xml file, so every time you add a new type, you should overwrite the existing one. However, be careful not to change the file name as they are referenced by the .tiled-project file. Naming Schemes In our project, the file naming scheme will differ depending on its type. For general naming styles, we have; PascalCase : .tmx files (tilemap), .world files (tile world), tile layers, terrain names, folder names, and all custom property key-values, .tx files (object templates), object types ( Types/ObjectTypes.xml ) are written in this case. For example, GrassLand.tmx , BorderColliders layer, custom property surface:Terrain : Ground , etc. snake_case : only .tsx files (tileset) are written in this style. For example, cave_decorative.tsx . kebab-case : only .js files (JavaScript Tiled extensions) are written in this case. Note that folders inside the extension folder are also written in this style too. Maps and Layers Tilesets Our game works on an orthogonal 32x32 tilemap. So when you create a new tileset, please ensure that it contains the following properties: Orientation: Orthogonal ObjectAlignment: Unspecified GridWidth: 32 GridHeight: 32 The tileset source image will be stored inside Assets/Textures/Tileset/ , which is the same location as the in-game tilemap object texture. Terrains All environmental tiles should have a defined terrain so that they can be drawn with the terrain brush. Terrains are essentially a simple Wang Tile algorithm. Defining the terrains in a tileset allows the designers to use terrain brushes for auto mapping. You can learn more about creating terrains in Tiled from the official documentation . As you can see from the image below, the type of terrain is represented by a color code, and the rules are defined by its shape. However, Wang Tile patterns in Tiled can only work on a per-tile basis. Meaning that multi-tile high objects like cliffs cannot be expressed purely using terrains. Automapping or rule tiles can solve this. For example, we use a brute-forced one-to-one mapping to automatically add the bottom half of the cliff when the designer places the top half of the cliff on the map. For more information, please refer to the official documentation . Tilemaps In most cases, our tilemap will need the following property values: Orientation: Orthogonal TileWidth: 32 TileHeight: 32 Infinite: true TileLayerFormat: Base64 OutputChunkWidth: 16 OutputChunkHeight: 16 TileRenderOrder: RightDown And the following are custom properties to configure the sorting layer and object tag of the tilemap when it is loaded to Unity. For most maps, we use the following default values: unity:SortingLayer: Ground unity:layer: GroundTileMap Layers Our game will only use the Tile Layer and the Object Layer (however we do use the Group Layer to clean up the map layers). Tile layers are used for drawing the map while object layers are used to place custom map objects that are used to either import Unity prefabs to the scene or to add a line collider to the map. Layer rules Layer names must use the PascalCase without any space. All tile layers must be separated based on the type of surface and the sound effect it generates, not the terrain type. For example, our game has two variants of grass terrain. However, they can be in the same layer as both of them will generate the same sound effect. Tile layer names must represent the surface type. Object layers are limited to SpawnPoints , Items , Environment , and Colliders . Readable Surfaces A readable surface in Catch.io is defined by the custom property of a tile layer. To add layer surface information, click on a tile layer and add the following custom properties. surface:LeavesMark: \"bool\" surface:Terrain: \"string\" surface:Volume: \"float\" Note that surface-related custom properties will have the prefix surface: . For example, a mud layer can have the following custom properties. surface:LeavesMark: true surface:Terrain: \"Mud\" surface:Volume: 6.0 surface:LeavesMark : This property will determine whether or not if the surface will leave a footprint when the player walks on top of it. surface:Terrain : This property will define the sound effect that will be played when an object like the player or throwable items interact with the surface. Note that the string value of this property must match the label value for parameter Terrain in event TerrainSfx . The string value of this custom property is directly passed to the FMOD plugin. surface:Volume : This property will determine the lifetime of the sound wave that is emitted when an object interacts with the surface. The actual volume of the sound effect is defined in FMOD. Adding Unity Prefabs from the Tilemap In Catch.io , the designer should be able to define player spawn points, item spawn points, and other environmental objects directly to the game map without having to open Unity. To do this, we use map objects with custom properties that point to the prefab file in the project's assets folder. All objects that are going to be replaced as an actual prefab in the game scene are represented by a point object which can be created by using the Insert Point(I) option when clicked on an object layer. Click on the point object that you wish to change, and choose the type Prefab for the property Type . This will add the custom property prefabSource which contains the file path of the prefab within the Assets/ folder. The unity:FlipX and unity:FlipY properties are used to flip the prefab sprite in the game. Note that once you define the values, the game will replace the point object with the selected prefab in the exact location, layer, and name of the map object."
  },
  "manual/project-structure.html": {
    "href": "manual/project-structure.html",
    "title": "Project Structure | Catch.io Developer Reference",
    "keywords": "Project Structure This chapter will discuss the file structure of this project and how the project should be organized. Because of how game development works, this chapter will change depending on what type of assets we add to the game. In such situation, please update this doc to the corresponding changes so no one is confused to where things are stored. Core Folder Types This project will have the following core folder types: Audio - contains every asset that is in an audio format like background music, in-game sound effects, UI sound effects, background sound, etc. Editor - C# scripts that are specifically made for the Unity Editor to support development. Game-affecting logic does not belong in this folder. Gizmos - Similar to the Editor folder, this folder will contain all visual assets that are used for the editor, like inspector icons or other visual indicators. Materials - Contains all material assets (in the format of .mat ) that are used in the game. Plugins - Third-party libraries from the Unity Asset Store or helper scripts that does not change frequently and is compatible with other Unity projects should be stored in this folder. Resources - contains all game object resources like object prefabs, rule tiles, scriptable objects, etc. Scenes - games scene will be in this folder Scripts - every script that is directly made for the project belongs in this folder. Shaders - shader files will be in this folder. Textures - every 2D image files will be in this folder. This includes tile map, character sprite, UI elements, etc. Structuring Code General Structure Note: This section is outdated and will need revision in the near future It is recommended that all scripts are Duck-typed (use logical naming and inheritance/interface for all scripts that will be expanded in the future) and use inheritance to neatly wrap the function of each component. This means that scripts with similar functionality should be wrapped with a parent class that inherits from MonoBehaviour (or another class that inherits from it like MonoBehaviourPun ). The same logic will apply to folder structuring as well. Interacting with the UI In Unity, scene elements and the code are kept separate, as they only communicate through an event callback. So scenes that requires user interaction through UI elements must have a scene manager or a UI handler object of sort. To increase code scalability, the HUD or menu UI objects should be kept separated from the backend logic that handles the data for UI to display. Instead, allow the UI controller script to interact with the scene objects and relay the user input into a handler script. This can resemble a simplified version of the MVC pattern. In this model, the UI behavior script and the scene manager script should be in the same game object so that the manager script can access the UI behavior script via .GetComponent<T>(); . Folder Structure Because the project source code is expected to grow and change with every new feature added to the game, it won't be practical trying to limit the number of code sub-folders in the game. Instead, this section will define the categories of the source code that we expect to be bundled in a folder. A single category can be split into multiple folders, or sub-folders when needed. It is good to keep the actual name of the folder should be descriptive enough for people to understand, but this document will not try to come up with any as we want the developers to change the name or add more when they have to. Folders should be kept flexible and descriptive. Furthermore, developers should keep all components and data types on a separate script and try to group all similar codes into a folder. If a component behavior script becomes hard to categorize into a single folder even though they share similar characteristics, let it inherent from a parent class that implements those behaviors and place the child script into their own folders that best describes them. Because all game-related .cs files are expected to be stored inside the Assets/Scripts/ folder, the code category listed below will describe the general folder structure inside the Scripts/ folder and nowhere else. This means the following definitions will not be applicable to codes inside Editor/ or Plugins/ folder. Core classes - The core types and components that are used to build other game components. Everything in this category are not expected to be used directly in the game. Instead, they should be the template for creating new components. This will also include custom types that does not inherit from anything. UI controller classes - Components specifically for controlling the UI or in-game HUD. Most, if not all of them should have using UnityEngine.UI; in one way or another. Interfaces/Enums/Struct - It is best to keep all the interface, enum, data structure code into a separate folder, as it allows the team to understand what interfaces are written by us and which ones are from a 3rd party library. Utility classes - These classes are static functions that is only used to prevent writing the same method inside a component over and over again. Scripts in this category are expected to be used throughout different components without any dependency issue. Map prop classes - All components that are used for environmental objects but is not directly controlled by the player should be kept in the same folder. For example, a script for opening a door. Sound manager classes - Sound (music and SFX) is a crucial game play aspect for Catch.io, so we can expect separate scripts that handles this logic. Controllable object classes - All scripts and components that are meant to be directly controlled by the client (aka, the player components) should be kept in the same folder. These should not be confused with the UI controller classes, as those are independent of the player object. Game manager classes - Components that are meant to handle the backend processing of a scene will be organized into its own folder."
  }
}